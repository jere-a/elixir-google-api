# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.KnowledgeAnswersIntentQueryToken do
  @moduledoc """
  A token represents an ngram with relevant information about it. If the token is a context phrase, it will have a prior score associated with it. The prior is computed via knowledge/answers/query_generalization/ word_prior/word_prior_from_examples_lib.cc, and ranges between 0 and 1. Stopwords and intent tokens (primary and component) have a score of 1.0.

  ## Attributes

  *   `evalData` (*type:* `GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingAnnotationEvalData.t`, *default:* `nil`) - This field is used inside Aqua and outside Aqua for identifying the token indices and/or byte offsets of this Token.
  *   `ngram` (*type:* `String.t`, *default:* `nil`) - |ngram| should be populated with a string from the raw query, not the normalized tokens. E.g. The ngram in the ignored token for the Height intent on the query [Height of barack obama], will be "Height". The ngram in the ignored token for the Videos intent on the query [vidéos] will be "vidéos".
  *   `parsedDueToExperiment` (*type:* `list(String.t)`, *default:* `nil`) - Experiments that caused this Token to parse, without which this would not have parsed.
  *   `prior` (*type:* `number()`, *default:* `nil`) - 
  *   `provenance` (*type:* `String.t`, *default:* `nil`) - 
  *   `provenanceId` (*type:* `list(String.t)`, *default:* `nil`) - Unique identifiers for the provenance of this token, for example, NLP Repository Example IDs.
  *   `provenanceLanguage` (*type:* `String.t`, *default:* `nil`) - 
  *   `synonyms` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.KnowledgeAnswersIntentQueryTokenSynonym.t)`, *default:* `nil`) - 
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :evalData =>
            GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingAnnotationEvalData.t() | nil,
          :ngram => String.t() | nil,
          :parsedDueToExperiment => list(String.t()) | nil,
          :prior => number() | nil,
          :provenance => String.t() | nil,
          :provenanceId => list(String.t()) | nil,
          :provenanceLanguage => String.t() | nil,
          :synonyms =>
            list(GoogleApi.ContentWarehouse.V1.Model.KnowledgeAnswersIntentQueryTokenSynonym.t())
            | nil
        }

  field(:evalData, as: GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingAnnotationEvalData)
  field(:ngram)
  field(:parsedDueToExperiment, type: :list)
  field(:prior)
  field(:provenance)
  field(:provenanceId, type: :list)
  field(:provenanceLanguage)

  field(:synonyms,
    as: GoogleApi.ContentWarehouse.V1.Model.KnowledgeAnswersIntentQueryTokenSynonym,
    type: :list
  )
end

defimpl Poison.Decoder, for: GoogleApi.ContentWarehouse.V1.Model.KnowledgeAnswersIntentQueryToken do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.KnowledgeAnswersIntentQueryToken.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContentWarehouse.V1.Model.KnowledgeAnswersIntentQueryToken do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
