# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.PhotosVisionObjectrecGeoLocation do
  @moduledoc """
  The geo-location of a single point, or of the "center" of a group of points.

  ## Attributes

  *   `altitudeMeters` (*type:* `float()`, *default:* `nil`) - Altitude of the point above the earth's surface, in meters.
  *   `countryCode` (*type:* `String.t`, *default:* `nil`) - Country code string.
  *   `fromGps` (*type:* `boolean()`, *default:* `nil`) - Indicates if the lat/lon above is assumed to come from a GPS device.
  *   `lat` (*type:* `float()`, *default:* `nil`) - Latitude in degrees north. Values south of the equator are negative.
  *   `latErrorBound` (*type:* `float()`, *default:* `nil`) - When applied to a single point, represents the estimated error bounds of manual geotagging. The estimate is based on size of the bounding box of the map used for manual geotagging. When applied to a group of points, the error bounds represent the dispersion around the group center (lat/lon above). The dispersion in this case is computed as half the interquartile range. Reference: http://en.wikipedia.org/wiki/Interquartile_range (lat +/- lat_error_bound, lng +/- lng_error_bound).
  *   `lon` (*type:* `float()`, *default:* `nil`) - Longitude in degrees east. Values west of 0 deg are negative.
  *   `lonErrorBound` (*type:* `float()`, *default:* `nil`) - 
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :altitudeMeters => float() | nil,
          :countryCode => String.t() | nil,
          :fromGps => boolean() | nil,
          :lat => float() | nil,
          :latErrorBound => float() | nil,
          :lon => float() | nil,
          :lonErrorBound => float() | nil
        }

  field(:altitudeMeters)
  field(:countryCode)
  field(:fromGps)
  field(:lat)
  field(:latErrorBound)
  field(:lon)
  field(:lonErrorBound)
end

defimpl Poison.Decoder, for: GoogleApi.ContentWarehouse.V1.Model.PhotosVisionObjectrecGeoLocation do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.PhotosVisionObjectrecGeoLocation.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContentWarehouse.V1.Model.PhotosVisionObjectrecGeoLocation do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
