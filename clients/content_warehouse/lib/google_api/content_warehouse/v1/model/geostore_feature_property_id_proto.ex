# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.GeostoreFeaturePropertyIdProto do
  @moduledoc """
  Message to represent a "feature property" as an abstract construct. Most feature properties are mapped one to one with the EditProto field types. However in some cases the EditProto field type granularity is too coarse to support use-cases that rely on feature properties (such as per-value rights tracking). When that is the case, the feature property is augmented with a secondary field.

  ## Attributes

  *   `attachmentTypeId` (*type:* `String.t`, *default:* `nil`) - Required when field_type == ATTACHMENT.
  *   `attributeId` (*type:* `String.t`, *default:* `nil`) - Required when field_type == FEATURE_ATTRIBUTE.
  *   `fieldType` (*type:* `String.t`, *default:* `nil`) - 
  *   `kgPropertyId` (*type:* `String.t`, *default:* `nil`) - Required when field_type == KNOWLEDGE_GRAPH_PROPERTY.
  *   `nameLanguage` (*type:* `String.t`, *default:* `nil`) - RESERVED
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :attachmentTypeId => String.t() | nil,
          :attributeId => String.t() | nil,
          :fieldType => String.t() | nil,
          :kgPropertyId => String.t() | nil,
          :nameLanguage => String.t() | nil
        }

  field(:attachmentTypeId)
  field(:attributeId)
  field(:fieldType)
  field(:kgPropertyId)
  field(:nameLanguage)
end

defimpl Poison.Decoder, for: GoogleApi.ContentWarehouse.V1.Model.GeostoreFeaturePropertyIdProto do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.GeostoreFeaturePropertyIdProto.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContentWarehouse.V1.Model.GeostoreFeaturePropertyIdProto do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
