# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.ResearchScamTokenNamespace do
  @moduledoc """


  ## Attributes

  *   `bytesBlocklistTokens` (*type:* `list(String.t)`, *default:* `nil`) - If present, override |string_blacklist_tokens|.
  *   `bytesTokens` (*type:* `list(String.t)`, *default:* `nil`) - If present, override |string_tokens|
  *   `namespace` (*type:* `String.t`, *default:* `nil`) - //////////////////////////////////////////////////////////////////////////// NAMESPACE - the string name of the namespace that this proto is specifying, such as "color", "shape", "geo", or "tags". Recall that your overall query is an AND across namespaces.
  *   `stringBlacklistTokens` (*type:* `list(String.t)`, *default:* `nil`) - New use cases should prefer |bytes_tokens|, go/fast/11#bytes-vs-string When migrate, need to be consistent in both dataset and query.
  *   `stringTokens` (*type:* `list(String.t)`, *default:* `nil`) - New use cases should prefer |bytes_tokens|, go/fast/11#bytes-vs-string When migrate, need to be consistent in both dataset and query.
  *   `uint64BlacklistTokens` (*type:* `list(String.t)`, *default:* `nil`) - TODO(qhliao) rename to |uint64_blocklist_tokens| eventually.
  *   `uint64Tokens` (*type:* `list(String.t)`, *default:* `nil`) - 
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :bytesBlocklistTokens => list(String.t()) | nil,
          :bytesTokens => list(String.t()) | nil,
          :namespace => String.t() | nil,
          :stringBlacklistTokens => list(String.t()) | nil,
          :stringTokens => list(String.t()) | nil,
          :uint64BlacklistTokens => list(String.t()) | nil,
          :uint64Tokens => list(String.t()) | nil
        }

  field(:bytesBlocklistTokens, type: :list)
  field(:bytesTokens, type: :list)
  field(:namespace)
  field(:stringBlacklistTokens, type: :list)
  field(:stringTokens, type: :list)
  field(:uint64BlacklistTokens, type: :list)
  field(:uint64Tokens, type: :list)
end

defimpl Poison.Decoder, for: GoogleApi.ContentWarehouse.V1.Model.ResearchScamTokenNamespace do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.ResearchScamTokenNamespace.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContentWarehouse.V1.Model.ResearchScamTokenNamespace do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
