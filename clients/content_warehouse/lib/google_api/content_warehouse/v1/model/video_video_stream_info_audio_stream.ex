# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.VideoVideoStreamInfoAudioStream do
  @moduledoc """
  Next id: 25

  ## Attributes

  *   `ambisonics` (*type:* `GoogleApi.ContentWarehouse.V1.Model.VideoAmbisonicsAmbisonicsMetadata.t`, *default:* `nil`) - Optional ambisonics metadata.
  *   `bitrate` (*type:* `String.t`, *default:* `nil`) - audio bitrate in bits/s
  *   `channelPosition` (*type:* `list(String.t)`, *default:* `nil`) - 
  *   `channels` (*type:* `integer()`, *default:* `nil`) - number of audio channels
  *   `clockDiscontinuityUs` (*type:* `String.t`, *default:* `nil`) - some container allows for a clock discontinuity. In this case, the end_timestamp may not be the correct DTS of the stream.
  *   `codecFourcc` (*type:* `String.t`, *default:* `nil`) - 
  *   `codecId` (*type:* `String.t`, *default:* `nil`) - Primary audio codec information
  *   `codecString` (*type:* `String.t`, *default:* `nil`) - RFC6381 Codec string.
  *   `contentType` (*type:* `String.t`, *default:* `nil`) - Specifies the content_type of the audio stream as given in the metadata.
  *   `decodeOffset` (*type:* `String.t`, *default:* `nil`) - The bytes offset of the end of the first decodable packet.
  *   `endTimestamp` (*type:* `String.t`, *default:* `nil`) - 
  *   `frameSize` (*type:* `String.t`, *default:* `nil`) - audio frame size
  *   `language` (*type:* `String.t`, *default:* `nil`) - Specifies the language of the audio stream as given in the metadata.
  *   `length` (*type:* `float()`, *default:* `nil`) - audio length in seconds Note that when the VSI is from users videos, it is not guaranteed to be the same as transcode lengths and it could be 0 when the full VSI cannot compute the length from the source header and timestamps (for example when header and timestamps are too broken).
  *   `metadata` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.VideoClipInfo.t)`, *default:* `nil`) - Metadata for audio elementary stream;
  *   `numberOfFrames` (*type:* `String.t`, *default:* `nil`) - Number of audio frames.
  *   `profile` (*type:* `String.t`, *default:* `nil`) - 
  *   `sampleRate` (*type:* `String.t`, *default:* `nil`) - audio sample rate
  *   `sampleSize` (*type:* `integer()`, *default:* `nil`) - Number of meaningful bits per decoded audio sample. This is an implicit conceptual meaning. This is *NOT* the same as ffmpeg's internal sample format that is used when actually decoding with ffmpeg.
  *   `startTimestamp` (*type:* `String.t`, *default:* `nil`) - Start/end timestamps of audio in ms.
  *   `streamCodecTag` (*type:* `String.t`, *default:* `nil`) - 
  *   `streamIndex` (*type:* `String.t`, *default:* `nil`) - Index of the stream in the file. it is 0 based.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :ambisonics =>
            GoogleApi.ContentWarehouse.V1.Model.VideoAmbisonicsAmbisonicsMetadata.t() | nil,
          :bitrate => String.t() | nil,
          :channelPosition => list(String.t()) | nil,
          :channels => integer() | nil,
          :clockDiscontinuityUs => String.t() | nil,
          :codecFourcc => String.t() | nil,
          :codecId => String.t() | nil,
          :codecString => String.t() | nil,
          :contentType => String.t() | nil,
          :decodeOffset => String.t() | nil,
          :endTimestamp => String.t() | nil,
          :frameSize => String.t() | nil,
          :language => String.t() | nil,
          :length => float() | nil,
          :metadata => list(GoogleApi.ContentWarehouse.V1.Model.VideoClipInfo.t()) | nil,
          :numberOfFrames => String.t() | nil,
          :profile => String.t() | nil,
          :sampleRate => String.t() | nil,
          :sampleSize => integer() | nil,
          :startTimestamp => String.t() | nil,
          :streamCodecTag => String.t() | nil,
          :streamIndex => String.t() | nil
        }

  field(:ambisonics, as: GoogleApi.ContentWarehouse.V1.Model.VideoAmbisonicsAmbisonicsMetadata)
  field(:bitrate)
  field(:channelPosition, type: :list)
  field(:channels)
  field(:clockDiscontinuityUs)
  field(:codecFourcc)
  field(:codecId)
  field(:codecString)
  field(:contentType)
  field(:decodeOffset)
  field(:endTimestamp)
  field(:frameSize)
  field(:language)
  field(:length)
  field(:metadata, as: GoogleApi.ContentWarehouse.V1.Model.VideoClipInfo, type: :list)
  field(:numberOfFrames)
  field(:profile)
  field(:sampleRate)
  field(:sampleSize)
  field(:startTimestamp)
  field(:streamCodecTag)
  field(:streamIndex)
end

defimpl Poison.Decoder, for: GoogleApi.ContentWarehouse.V1.Model.VideoVideoStreamInfoAudioStream do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.VideoVideoStreamInfoAudioStream.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContentWarehouse.V1.Model.VideoVideoStreamInfoAudioStream do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
