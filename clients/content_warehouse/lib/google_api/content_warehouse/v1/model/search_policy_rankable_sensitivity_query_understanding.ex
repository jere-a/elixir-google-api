# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.SearchPolicyRankableSensitivityQueryUnderstanding do
  @moduledoc """
  Sensitivity is produced by QU.

  ## Attributes

  *   `intentOnlyNoPii` (*type:* `boolean()`, *default:* `nil`) - QU dectects a sensitive intent with no sensitive content (eg., [Send email]). This flag is only used to trigger a sensitive feature because as a precaution all sensitive features should check current sensitivity mode before triggering; but will NOT block any backends, which means all other features can compete fairly.
  *   `rewrittenQuery` (*type:* `String.t`, *default:* `nil`) - The rewritten query this sensitivity is for. Note different query rewrites could produce different sensitivities.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :intentOnlyNoPii => boolean() | nil,
          :rewrittenQuery => String.t() | nil
        }

  field(:intentOnlyNoPii)
  field(:rewrittenQuery)
end

defimpl Poison.Decoder,
  for: GoogleApi.ContentWarehouse.V1.Model.SearchPolicyRankableSensitivityQueryUnderstanding do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.SearchPolicyRankableSensitivityQueryUnderstanding.decode(
      value,
      options
    )
  end
end

defimpl Poison.Encoder,
  for: GoogleApi.ContentWarehouse.V1.Model.SearchPolicyRankableSensitivityQueryUnderstanding do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
