# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.KnowledgeVerticalsWeatherProtoUserSpecifiedLocation do
  @moduledoc """
  A user specified location to trigger weather for a specific location. Also it can be generalized for other verticals.

  ## Attributes

  *   `featureId` (*type:* `GoogleApi.ContentWarehouse.V1.Model.GeostoreFeatureIdProto.t`, *default:* `nil`) - (Mandatory) Oyster ID.
  *   `latLng` (*type:* `GoogleApi.ContentWarehouse.V1.Model.GoogleTypeLatLng.t`, *default:* `nil`) - (Mandatory) Coordinates of the location for which weather is requested.
  *   `locationName` (*type:* `String.t`, *default:* `nil`) - The name to display. If specified it will override the formatted address of "feature_id".
  *   `mid` (*type:* `String.t`, *default:* `nil`) - MID corresponding to the location from feature_id.
  *   `timezone` (*type:* `String.t`, *default:* `nil`) - The timezone to display the current conditions observation time. Optional and will override the timezone of "feature_id".
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :featureId => GoogleApi.ContentWarehouse.V1.Model.GeostoreFeatureIdProto.t() | nil,
          :latLng => GoogleApi.ContentWarehouse.V1.Model.GoogleTypeLatLng.t() | nil,
          :locationName => String.t() | nil,
          :mid => String.t() | nil,
          :timezone => String.t() | nil
        }

  field(:featureId, as: GoogleApi.ContentWarehouse.V1.Model.GeostoreFeatureIdProto)
  field(:latLng, as: GoogleApi.ContentWarehouse.V1.Model.GoogleTypeLatLng)
  field(:locationName)
  field(:mid)
  field(:timezone)
end

defimpl Poison.Decoder,
  for: GoogleApi.ContentWarehouse.V1.Model.KnowledgeVerticalsWeatherProtoUserSpecifiedLocation do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.KnowledgeVerticalsWeatherProtoUserSpecifiedLocation.decode(
      value,
      options
    )
  end
end

defimpl Poison.Encoder,
  for: GoogleApi.ContentWarehouse.V1.Model.KnowledgeVerticalsWeatherProtoUserSpecifiedLocation do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
