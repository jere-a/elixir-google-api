# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.IndexingDupsComputedLocalizedAlternateNamesLocaleEntry do
  @moduledoc """


  ## Attributes

  *   `clusterId` (*type:* `String.t`, *default:* `nil`) - Cluster-ID of that locale entry. Not Populated if the message is part of a Cluster-Proto (e.g. when loaded as a signal). The data is being populated when the proto is used outside of the cluster context. For instance, when being used as a dups-computed-localized-alternate-name.
  *   `deviceMatchInfo` (*type:* `String.t`, *default:* `nil`) - Device match info calculated only by URL pattern.
  *   `language` (*type:* `String.t`, *default:* `nil`) - Language/Region code. E.g. "en-US" or "de". Allowed values are language-region codes based on the W3C recommendation http://www.w3.org/TR/html401/struct/dirlang.html#langcodes
  *   `url` (*type:* `String.t`, *default:* `nil`) - The alternate url representing the content for a specific language and region (or language only).
  *   `urlEncoding` (*type:* `integer()`, *default:* `nil`) - see webutil/urlencoding
  *   `urlRegionCode` (*type:* `integer()`, *default:* `nil`) - The region code that was extracted from the URL, either by the TLD or via a pattern (like 'en-ca' as a path element).. Always filled in if known, unlike the sometimes left out region part of the language field. Unknown Region Code
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :clusterId => String.t() | nil,
          :deviceMatchInfo => String.t() | nil,
          :language => String.t() | nil,
          :url => String.t() | nil,
          :urlEncoding => integer() | nil,
          :urlRegionCode => integer() | nil
        }

  field(:clusterId)
  field(:deviceMatchInfo)
  field(:language)
  field(:url)
  field(:urlEncoding)
  field(:urlRegionCode)
end

defimpl Poison.Decoder,
  for: GoogleApi.ContentWarehouse.V1.Model.IndexingDupsComputedLocalizedAlternateNamesLocaleEntry do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.IndexingDupsComputedLocalizedAlternateNamesLocaleEntry.decode(
      value,
      options
    )
  end
end

defimpl Poison.Encoder,
  for: GoogleApi.ContentWarehouse.V1.Model.IndexingDupsComputedLocalizedAlternateNamesLocaleEntry do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
