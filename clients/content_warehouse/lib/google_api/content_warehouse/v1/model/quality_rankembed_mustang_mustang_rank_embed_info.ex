# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.QualityRankembedMustangMustangRankEmbedInfo do
  @moduledoc """
  Used as Mustang attachment DO NOT: - ACCESS THE PROTO FIELDS DIRECTLY - USE THE DECODING LIBRARY IN quality/rankembed/mustang/fixed_point_decoding_helpers.h INSTEAD. - USE HARDCODED MustangRankEmbedInfo TEXT PROTOS IN TESTS! USE quality/rankembed/test_utils/mustang_rankembed_info_utils.h INSTEAD.

  ## Attributes

  *   `additionalFixedPointEncodings` (*type:* `list(String.t)`, *default:* `nil`) - Each of the repeated elements in this field has the same scheme as 'fixed_point_encoding'; See go/rankembed-astro-rule-set-dd
  *   `compressedDocumentEmbedding` (*type:* `GoogleApi.ContentWarehouse.V1.Model.QualityRankembedMustangMustangRankEmbedInfoCompressedEmbedding.t`, *default:* `nil`) - Each uint64 encodes 8 8-bit values for the quantized document embedding
  *   `fixedPointEncoding` (*type:* `String.t`, *default:* `nil`) - This field replaces the above 3 "per-encoding-type-fields", where the encoding type (and the embedding type) are part of the encoding, and is stored in the first byte. The remaining bytes are the same as the previous 3 fields, but shifted by 1 byte. - byte[0]: encoding type & embedding type - byte[1....]: similar to the above depending on the encoding type.
  *   `scaledFixedPoint4Encoding` (*type:* `String.t`, *default:* `nil`) - - byte[0]: version - bytes[1...4]: scalar - bytes[5,...]: the values, one byte per 2 values
  *   `scaledFixedPoint8Encoding` (*type:* `String.t`, *default:* `nil`) - - byte[0]: version - bytes[1...4]: scalar - bytes[5,...]: the values, one byte per value
  *   `scaledShiftedFixedPoint4Encoding` (*type:* `String.t`, *default:* `nil`) - - byte[0]: version - bytes[1...4]: scalar - bytes[5...8]: shift - bytes[9,...]: the values, one byte per 2 values
  *   `versionAndImprovInfo` (*type:* `integer()`, *default:* `nil`) - First 7 bits encode the version, then each chunk of 5 bits encode the index of a potential improv query (lsb to msb) -------|-----|-----|-----|-----|----- version| id1 | id2 | id3 | id4 | id5 where id1 is the index of the first improv query in the improv debug table. As of cl/270008220, this field only contains the version info. For backward compatibility, version still only uses the first 7 bits, and is still prepended by 5 1 bits.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :additionalFixedPointEncodings => list(String.t()) | nil,
          :compressedDocumentEmbedding =>
            GoogleApi.ContentWarehouse.V1.Model.QualityRankembedMustangMustangRankEmbedInfoCompressedEmbedding.t()
            | nil,
          :fixedPointEncoding => String.t() | nil,
          :scaledFixedPoint4Encoding => String.t() | nil,
          :scaledFixedPoint8Encoding => String.t() | nil,
          :scaledShiftedFixedPoint4Encoding => String.t() | nil,
          :versionAndImprovInfo => integer() | nil
        }

  field(:additionalFixedPointEncodings, type: :list)

  field(:compressedDocumentEmbedding,
    as:
      GoogleApi.ContentWarehouse.V1.Model.QualityRankembedMustangMustangRankEmbedInfoCompressedEmbedding
  )

  field(:fixedPointEncoding)
  field(:scaledFixedPoint4Encoding)
  field(:scaledFixedPoint8Encoding)
  field(:scaledShiftedFixedPoint4Encoding)
  field(:versionAndImprovInfo)
end

defimpl Poison.Decoder,
  for: GoogleApi.ContentWarehouse.V1.Model.QualityRankembedMustangMustangRankEmbedInfo do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.QualityRankembedMustangMustangRankEmbedInfo.decode(
      value,
      options
    )
  end
end

defimpl Poison.Encoder,
  for: GoogleApi.ContentWarehouse.V1.Model.QualityRankembedMustangMustangRankEmbedInfo do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
