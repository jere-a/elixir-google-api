# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.AssistantApiCoreTypesMessageNotification do
  @moduledoc """
  This proto captures the contents of a messaging app notification that is typically part of a conversation thread. Next Id: 21

  ## Attributes

  *   `appName` (*type:* `String.t`, *default:* `nil`) - App name of the message notification, e.g. Hangouts.
  *   `bundleId` (*type:* `String.t`, *default:* `nil`) - The key used to group this notification into a cluster.
  *   `dataUri` (*type:* `String.t`, *default:* `nil`) - Uri for the attachment (image, audio, video etc.).
  *   `groupName` (*type:* `String.t`, *default:* `nil`) - Name of the group associated with the message notification. This field is set iff this is a group message.
  *   `groupingKey` (*type:* `String.t`, *default:* `nil`) - The group key of a proactive notification. Details in assistant.api.client_op.NotificationArgs.grouping_key.
  *   `index` (*type:* `integer()`, *default:* `nil`) - Index of the message notification.
  *   `markAsReadActionAvailable` (*type:* `boolean()`, *default:* `nil`) - Boolean indicating if the mark_as_read action is available for this message.
  *   `messageLength` (*type:* `integer()`, *default:* `nil`) - Length of the message/notification content in characters. Note: We can't send the full content because of privacy restriction, preventing sending client content to our backends. Concatenated message_length of all notification_entries.
  *   `messageRecipientType` (*type:* `String.t`, *default:* `nil`) - 
  *   `messageWordCount` (*type:* `integer()`, *default:* `nil`) - Word count of the message
  *   `mimeType` (*type:* `String.t`, *default:* `nil`) - Mime type of the data_uri. e.g. 'audio/wav', 'video/mp4', 'image/png'.
  *   `notificationEntries` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.AssistantApiCoreTypesMessageNotificationNotificationEntry.t)`, *default:* `nil`) - 
  *   `notificationIconKey` (*type:* `String.t`, *default:* `nil`) - On-device cache key for notification icon.
  *   `notificationKey` (*type:* `String.t`, *default:* `nil`) - String key of the notification. It is the key from original StatusBarNotification received from Android OS. It is used to identify the original notification to send a reply.
  *   `opaqueToken` (*type:* `String.t`, *default:* `nil`) - The opaque_token of a proactive notification. Details in assistant.api.client_op.NotificationArgs.opaque_token.
  *   `packageName` (*type:* `String.t`, *default:* `nil`) - App pkg of the message notification, e.g. "com.google.android.talk".
  *   `postTime` (*type:* `String.t`, *default:* `nil`) - Timestamp of the last notification's post time.
  *   `replyActionAvailable` (*type:* `boolean()`, *default:* `nil`) - Boolean indicating if the reply action is available for this message.
  *   `sender` (*type:* `GoogleApi.ContentWarehouse.V1.Model.AssistantApiCoreTypesMessageNotificationPerson.t`, *default:* `nil`) - 
  *   `senderName` (*type:* `String.t`, *default:* `nil`) - Sender's name of the message notification, e.g. Elsa. Last sender name in case of a group conversation.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :appName => String.t() | nil,
          :bundleId => String.t() | nil,
          :dataUri => String.t() | nil,
          :groupName => String.t() | nil,
          :groupingKey => String.t() | nil,
          :index => integer() | nil,
          :markAsReadActionAvailable => boolean() | nil,
          :messageLength => integer() | nil,
          :messageRecipientType => String.t() | nil,
          :messageWordCount => integer() | nil,
          :mimeType => String.t() | nil,
          :notificationEntries =>
            list(
              GoogleApi.ContentWarehouse.V1.Model.AssistantApiCoreTypesMessageNotificationNotificationEntry.t()
            )
            | nil,
          :notificationIconKey => String.t() | nil,
          :notificationKey => String.t() | nil,
          :opaqueToken => String.t() | nil,
          :packageName => String.t() | nil,
          :postTime => String.t() | nil,
          :replyActionAvailable => boolean() | nil,
          :sender =>
            GoogleApi.ContentWarehouse.V1.Model.AssistantApiCoreTypesMessageNotificationPerson.t()
            | nil,
          :senderName => String.t() | nil
        }

  field(:appName)
  field(:bundleId)
  field(:dataUri)
  field(:groupName)
  field(:groupingKey)
  field(:index)
  field(:markAsReadActionAvailable)
  field(:messageLength)
  field(:messageRecipientType)
  field(:messageWordCount)
  field(:mimeType)

  field(:notificationEntries,
    as:
      GoogleApi.ContentWarehouse.V1.Model.AssistantApiCoreTypesMessageNotificationNotificationEntry,
    type: :list
  )

  field(:notificationIconKey)
  field(:notificationKey)
  field(:opaqueToken)
  field(:packageName)
  field(:postTime)
  field(:replyActionAvailable)

  field(:sender,
    as: GoogleApi.ContentWarehouse.V1.Model.AssistantApiCoreTypesMessageNotificationPerson
  )

  field(:senderName)
end

defimpl Poison.Decoder,
  for: GoogleApi.ContentWarehouse.V1.Model.AssistantApiCoreTypesMessageNotification do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.AssistantApiCoreTypesMessageNotification.decode(
      value,
      options
    )
  end
end

defimpl Poison.Encoder,
  for: GoogleApi.ContentWarehouse.V1.Model.AssistantApiCoreTypesMessageNotification do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
