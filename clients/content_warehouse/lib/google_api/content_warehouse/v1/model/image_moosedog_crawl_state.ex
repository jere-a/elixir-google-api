# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.ImageMoosedogCrawlState do
  @moduledoc """


  ## Attributes

  *   `code` (*type:* `String.t`, *default:* `nil`) - 
  *   `detailedReason` (*type:* `integer()`, *default:* `nil`) - Each of the above not_crawled_reason will have a set of detailed reason defined in crawler/trawler/trawler_enums.proto.
  *   `internalStatus` (*type:* `GoogleApi.ContentWarehouse.V1.Model.UtilStatusProto.t`, *default:* `nil`) - The status returned when RPCs are used to internally fetch the image (eg. from FIFE).
  *   `isTerminal` (*type:* `boolean()`, *default:* `nil`) - Specifies if the current crawl state is terminal.
  *   `noIndexAfterTimestamp` (*type:* `String.t`, *default:* `nil`) - Time in seconds since epoch after which this image should be considered unavailable.
  *   `notCrawledReason` (*type:* `String.t`, *default:* `nil`) - 
  *   `overrodeTerminalState` (*type:* `boolean()`, *default:* `nil`) - When true, it means that a non-terminal state has overwrote a terminal one.
  *   `repid` (*type:* `String.t`, *default:* `nil`) - The repid for the urls. This repid is the id given to the dupe cluster this url belongs to.
  *   `robotedAgents` (*type:* `String.t`, *default:* `nil`) - A comma separated list of user agents for which this image should be considered roboted. All images are crawled using googlebot-images and this exists here purely for informative reasons.
  *   `url` (*type:* `String.t`, *default:* `nil`) - The url at which we crawled this content. With us starting to use repids the crawl table key no longer is suggestive of the url. In addition this is used in Amarna to detect race conditions between a reference changing its crawl directive and the original crawl job finishing.
  *   `urlDeleted` (*type:* `boolean()`, *default:* `nil`) - Set to true if the url is taken down by clients. This indicates that this crawl state is used to fast remove the crawl result of the url instead of waiting for Multiverse crawl results. For more information, please refer to go/amarna-url-deletion.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :code => String.t() | nil,
          :detailedReason => integer() | nil,
          :internalStatus => GoogleApi.ContentWarehouse.V1.Model.UtilStatusProto.t() | nil,
          :isTerminal => boolean() | nil,
          :noIndexAfterTimestamp => String.t() | nil,
          :notCrawledReason => String.t() | nil,
          :overrodeTerminalState => boolean() | nil,
          :repid => String.t() | nil,
          :robotedAgents => String.t() | nil,
          :url => String.t() | nil,
          :urlDeleted => boolean() | nil
        }

  field(:code)
  field(:detailedReason)
  field(:internalStatus, as: GoogleApi.ContentWarehouse.V1.Model.UtilStatusProto)
  field(:isTerminal)
  field(:noIndexAfterTimestamp)
  field(:notCrawledReason)
  field(:overrodeTerminalState)
  field(:repid)
  field(:robotedAgents)
  field(:url)
  field(:urlDeleted)
end

defimpl Poison.Decoder, for: GoogleApi.ContentWarehouse.V1.Model.ImageMoosedogCrawlState do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.ImageMoosedogCrawlState.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContentWarehouse.V1.Model.ImageMoosedogCrawlState do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
