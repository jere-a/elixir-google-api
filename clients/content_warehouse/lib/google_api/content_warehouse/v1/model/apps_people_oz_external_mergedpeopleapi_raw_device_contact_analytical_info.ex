# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.AppsPeopleOzExternalMergedpeopleapiRawDeviceContactAnalyticalInfo do
  @moduledoc """


  ## Attributes

  *   `dataSet` (*type:* `String.t`, *default:* `nil`) - The data set within the account that this raw contact belongs to.
  *   `dirty` (*type:* `boolean()`, *default:* `nil`) - The CP2 dirty field which indicates the sync state of the raw contact: https://developer.android.com/reference/android/provider/ContactsContract.SyncColumns#DIRTY True if the row is changed but not synced
  *   `sourceIdExist` (*type:* `boolean()`, *default:* `nil`) - Whether the source ID exists for non-Google contacts. Won't set for Google contacts.
  *   `syncInfo` (*type:* `GoogleApi.ContentWarehouse.V1.Model.SocialGraphApiProtoSyncInfo.t`, *default:* `nil`) - The Sync Info of a raw contact.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :dataSet => String.t() | nil,
          :dirty => boolean() | nil,
          :sourceIdExist => boolean() | nil,
          :syncInfo => GoogleApi.ContentWarehouse.V1.Model.SocialGraphApiProtoSyncInfo.t() | nil
        }

  field(:dataSet)
  field(:dirty)
  field(:sourceIdExist)
  field(:syncInfo, as: GoogleApi.ContentWarehouse.V1.Model.SocialGraphApiProtoSyncInfo)
end

defimpl Poison.Decoder,
  for:
    GoogleApi.ContentWarehouse.V1.Model.AppsPeopleOzExternalMergedpeopleapiRawDeviceContactAnalyticalInfo do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.AppsPeopleOzExternalMergedpeopleapiRawDeviceContactAnalyticalInfo.decode(
      value,
      options
    )
  end
end

defimpl Poison.Encoder,
  for:
    GoogleApi.ContentWarehouse.V1.Model.AppsPeopleOzExternalMergedpeopleapiRawDeviceContactAnalyticalInfo do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
