# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.QualityShoppingShoppingAttachmentPBlock do
  @moduledoc """
  Next ID: 18

  ## Attributes

  *   `fullTitle` (*type:* `String.t`, *default:* `nil`) - Field full_title may contain duplicate info from title and list_title.
  *   `imageDocid` (*type:* `list(String.t)`, *default:* `nil`) - Ordering for `image_docid`, and `image_info` are the same.
  *   `imageInfo` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.QualityShoppingShoppingAttachmentPBlockImageInfo.t)`, *default:* `nil`) - 
  *   `isFreeDelivery` (*type:* `boolean()`, *default:* `nil`) - 
  *   `isFreeReturn` (*type:* `boolean()`, *default:* `nil`) - 
  *   `listTitle` (*type:* `String.t`, *default:* `nil`) - 
  *   `maxPriceValue` (*type:* `number()`, *default:* `nil`) - 
  *   `minPriceValue` (*type:* `number()`, *default:* `nil`) - 
  *   `price` (*type:* `String.t`, *default:* `nil`) - 
  *   `priceCurrency` (*type:* `String.t`, *default:* `nil`) - 
  *   `priceValue` (*type:* `number()`, *default:* `nil`) - 
  *   `title` (*type:* `String.t`, *default:* `nil`) - Product info extracted by Product Blocks go/sdu-shopping-page-intro and go/product-block-extraction. Here is an example of a page with a ## list_title (Shoes) and 3 blocks with their own titles: | Shoes | | ---------------------| | * For Running | | ---------------------| | * Men's Hiking | | ---------------------| ## | * Dress Shoes | The field full_title is what we constructed to best describe the product in the block. For example, for the above 3 blocks, their full_titles will contain info from list_title: "Shoes For Running", "Shoes Men's Hiking", "Dress Shoes". Note that the list_title is not repeated for the 3rd block Real sample pages: http://screen/6UaoBtwWsLfbSKg http://screen/BDHRgDonKG3KcXu, http://screen/53tLwNaX8mmYzDz
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :fullTitle => String.t() | nil,
          :imageDocid => list(String.t()) | nil,
          :imageInfo =>
            list(
              GoogleApi.ContentWarehouse.V1.Model.QualityShoppingShoppingAttachmentPBlockImageInfo.t()
            )
            | nil,
          :isFreeDelivery => boolean() | nil,
          :isFreeReturn => boolean() | nil,
          :listTitle => String.t() | nil,
          :maxPriceValue => number() | nil,
          :minPriceValue => number() | nil,
          :price => String.t() | nil,
          :priceCurrency => String.t() | nil,
          :priceValue => number() | nil,
          :title => String.t() | nil
        }

  field(:fullTitle)
  field(:imageDocid, type: :list)

  field(:imageInfo,
    as: GoogleApi.ContentWarehouse.V1.Model.QualityShoppingShoppingAttachmentPBlockImageInfo,
    type: :list
  )

  field(:isFreeDelivery)
  field(:isFreeReturn)
  field(:listTitle)
  field(:maxPriceValue)
  field(:minPriceValue)
  field(:price)
  field(:priceCurrency)
  field(:priceValue)
  field(:title)
end

defimpl Poison.Decoder,
  for: GoogleApi.ContentWarehouse.V1.Model.QualityShoppingShoppingAttachmentPBlock do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.QualityShoppingShoppingAttachmentPBlock.decode(
      value,
      options
    )
  end
end

defimpl Poison.Encoder,
  for: GoogleApi.ContentWarehouse.V1.Model.QualityShoppingShoppingAttachmentPBlock do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
