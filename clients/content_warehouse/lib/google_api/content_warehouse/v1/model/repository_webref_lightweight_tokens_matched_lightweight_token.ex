# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.RepositoryWebrefLightweightTokensMatchedLightweightToken do
  @moduledoc """
  Necessary information of lightweight token pattern with entity retrieval to pass to downstream clients. For example: FpTokenRange: normalized_text: "zurichben" language: Hungarian retrieved_entity: /m/08966 (with name "zurich") will get: MatchedLightweightToken: LightweightTokenType: "LOCATIVE" begin_offset: 6 end_offset: 9 pattern_id: 8141703461898598811 source_entity_index: 0 FpTokenRange: normalized_text: "egyesult allamokott" language: Hungarian retrieved_entity: /m/09c7w0 (with name "egyesult allamok") will get: MatchedLightweightToken: LightweightTokenType: "LOCATIVE" begin_offset: 16 end_offset: 19 pattern_id: 10449962977910715124 source_entity_index: 0 Note that begin_offset and end_offset marks the input byte range of the matched input text. For example, if the input text is [tannlegas] in Norwegian, this matches with the rewrite rule "*e:*as" to transform "tannlegas" to "tannlege". The matched byte range is [7, 9) on "as", therefore begin_offset = 7 and end_offset = 9. This must not be confused with the rewritten range [7, 8) on "e". Also, keep in mind these are byte offsets, not codepoints.

  ## Attributes

  *   `additionalBeginOffset` (*type:* `integer()`, *default:* `nil`) - The byte offset of the beging of the additional lightweight token match. e.g. the prefix pattern of the circumfix.
  *   `additionalEndOffset` (*type:* `integer()`, *default:* `nil`) - The byte offset of the end of the additional lightweight token match. e.g. the suffix pattern of the circumfix.
  *   `beginOffset` (*type:* `integer()`, *default:* `nil`) - The byte offset of the begin of the lightweight token match within each range. The default value of -1 (std::string::npos) means that there's no affix or adposition detected.
  *   `endOffset` (*type:* `integer()`, *default:* `nil`) - The byte offset of the end of the lightweight token match within each range. The default value of 0 means that there's no affix or adposition detected.
  *   `patternId` (*type:* `String.t`, *default:* `nil`) - Matched pattern Id which will be used to retrieve back pattern features. Pattern id is only populated for Enricher model.
  *   `sourceEntityIndex` (*type:* `integer()`, *default:* `nil`) - The index of the source entity in the resulting WebrefEntities or WebrefEntitiesWrapper, to which the lightweight token rule is applied. This field is only populated at the end of Qref scorer when we are sure which source entity should output.
  *   `type` (*type:* `String.t`, *default:* `nil`) - The type of the lightweight token match, which provides the semantic information.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :additionalBeginOffset => integer() | nil,
          :additionalEndOffset => integer() | nil,
          :beginOffset => integer() | nil,
          :endOffset => integer() | nil,
          :patternId => String.t() | nil,
          :sourceEntityIndex => integer() | nil,
          :type => String.t() | nil
        }

  field(:additionalBeginOffset)
  field(:additionalEndOffset)
  field(:beginOffset)
  field(:endOffset)
  field(:patternId)
  field(:sourceEntityIndex)
  field(:type)
end

defimpl Poison.Decoder,
  for:
    GoogleApi.ContentWarehouse.V1.Model.RepositoryWebrefLightweightTokensMatchedLightweightToken do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.RepositoryWebrefLightweightTokensMatchedLightweightToken.decode(
      value,
      options
    )
  end
end

defimpl Poison.Encoder,
  for:
    GoogleApi.ContentWarehouse.V1.Model.RepositoryWebrefLightweightTokensMatchedLightweightToken do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
