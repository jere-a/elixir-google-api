# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.AbuseiamVerdict do
  @moduledoc """
  Verdict against a target. AbuseIAm generates a verdict based on evaluations. AbuseIAm can send such verdicts to clients for enforcement.

  ## Attributes

  *   `client` (*type:* `GoogleApi.ContentWarehouse.V1.Model.AbuseiamClient.t`, *default:* `nil`) - Target client of the verdict. It can be used to differentiate verdicts from multiple clients when such verdicts are processed in one common place.
  *   `comment` (*type:* `String.t`, *default:* `nil`) - Additional info regarding the verdict.
  *   `decision` (*type:* `String.t`, *default:* `nil`) - 
  *   `durationMins` (*type:* `integer()`, *default:* `nil`) - Time duration (in minutes) of the verdict.
  *   `evaluation` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.AbuseiamEvaluation.t)`, *default:* `nil`) - Evaluations relevant to this verdict. Every Verdict should contain at least one Evaluation.
  *   `hashes` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.AbuseiamHash.t)`, *default:* `nil`) - Details of all the hashes that can be computed on a message, such as simhash and attachment hash
  *   `isLegalIssued` (*type:* `boolean()`, *default:* `nil`) - Is this verdict issued by legal?
  *   `miscScores` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.AbuseiamNameValuePair.t)`, *default:* `nil`) - This field is used to pass relevant / necessary scores to our clients. For eg: ASBE propagates these scores to moonshine.
  *   `reasonCode` (*type:* `String.t`, *default:* `nil`) - A short description of the reason why the verdict decision is made.
  *   `region` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.AbuseiamRegion.t)`, *default:* `nil`) - The regions in which this verdict should be enforced. Absence of this field indicates that the verdict is applicable everywhere.
  *   `restriction` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.AbuseiamVerdictRestriction.t)`, *default:* `nil`) - Restrictions on where this verdict applies. If any restriction is met, the verdict is applied there. If no restrictions are present, the verdict is considered global.
  *   `strikeCategory` (*type:* `String.t`, *default:* `nil`) - Category of the strike if this is a strike verdict.
  *   `target` (*type:* `GoogleApi.ContentWarehouse.V1.Model.AbuseiamTarget.t`, *default:* `nil`) - 
  *   `targetTimestampMicros` (*type:* `String.t`, *default:* `nil`) - The timestamp of the target. E.g., the time when the target was updated.
  *   `timestampMicros` (*type:* `String.t`, *default:* `nil`) - When the verdict is generated
  *   `userNotification` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.AbuseiamUserNotification.t)`, *default:* `nil`) - Extra notification(s) to be delivered to target user or message owner about the verdict.
  *   `version` (*type:* `String.t`, *default:* `nil`) - version of decision script
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :client => GoogleApi.ContentWarehouse.V1.Model.AbuseiamClient.t() | nil,
          :comment => String.t() | nil,
          :decision => String.t() | nil,
          :durationMins => integer() | nil,
          :evaluation => list(GoogleApi.ContentWarehouse.V1.Model.AbuseiamEvaluation.t()) | nil,
          :hashes => list(GoogleApi.ContentWarehouse.V1.Model.AbuseiamHash.t()) | nil,
          :isLegalIssued => boolean() | nil,
          :miscScores =>
            list(GoogleApi.ContentWarehouse.V1.Model.AbuseiamNameValuePair.t()) | nil,
          :reasonCode => String.t() | nil,
          :region => list(GoogleApi.ContentWarehouse.V1.Model.AbuseiamRegion.t()) | nil,
          :restriction =>
            list(GoogleApi.ContentWarehouse.V1.Model.AbuseiamVerdictRestriction.t()) | nil,
          :strikeCategory => String.t() | nil,
          :target => GoogleApi.ContentWarehouse.V1.Model.AbuseiamTarget.t() | nil,
          :targetTimestampMicros => String.t() | nil,
          :timestampMicros => String.t() | nil,
          :userNotification =>
            list(GoogleApi.ContentWarehouse.V1.Model.AbuseiamUserNotification.t()) | nil,
          :version => String.t() | nil
        }

  field(:client, as: GoogleApi.ContentWarehouse.V1.Model.AbuseiamClient)
  field(:comment)
  field(:decision)
  field(:durationMins)
  field(:evaluation, as: GoogleApi.ContentWarehouse.V1.Model.AbuseiamEvaluation, type: :list)
  field(:hashes, as: GoogleApi.ContentWarehouse.V1.Model.AbuseiamHash, type: :list)
  field(:isLegalIssued)
  field(:miscScores, as: GoogleApi.ContentWarehouse.V1.Model.AbuseiamNameValuePair, type: :list)
  field(:reasonCode)
  field(:region, as: GoogleApi.ContentWarehouse.V1.Model.AbuseiamRegion, type: :list)

  field(:restriction,
    as: GoogleApi.ContentWarehouse.V1.Model.AbuseiamVerdictRestriction,
    type: :list
  )

  field(:strikeCategory)
  field(:target, as: GoogleApi.ContentWarehouse.V1.Model.AbuseiamTarget)
  field(:targetTimestampMicros)
  field(:timestampMicros)

  field(:userNotification,
    as: GoogleApi.ContentWarehouse.V1.Model.AbuseiamUserNotification,
    type: :list
  )

  field(:version)
end

defimpl Poison.Decoder, for: GoogleApi.ContentWarehouse.V1.Model.AbuseiamVerdict do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.AbuseiamVerdict.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContentWarehouse.V1.Model.AbuseiamVerdict do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
