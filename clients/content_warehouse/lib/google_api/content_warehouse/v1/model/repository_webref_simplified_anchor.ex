# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.RepositoryWebrefSimplifiedAnchor do
  @moduledoc """
  Represents a subpart of the anchor data of the docjoins, but is much smaller. When we build this SimplifiedAnchor from the anchor data of the docjoins, by specifying the option separate_onsite_anchors to SimplifiedAnchorsBuilder, we can also separate the onsite anchors from the other (offdomain) anchors. So onsite anchors and offdomain anchors will have their own count, score, normalized score, and total volume (.._offdomain and .._onsite fields). For example, if there are 10 onsite anchors and 20 offdomain anchors for the anchor text "mountain view", then the count_from_onsite is 10, and the count_from_offdomain is 20 when we separate onsite anchors out. Otherwise (if we don't separate onsite anchors), the count is 30 (10 + 20) and we don't have values in the .._offdomain and .._onsite fields.

  ## Attributes

  *   `anchorIndices` (*type:* `GoogleApi.ContentWarehouse.V1.Model.RepositoryWebrefAnchorIndices.t`, *default:* `nil`) - The set of (equivalent from WebRef point of view) anchors used to produce this segment.
  *   `anchorText` (*type:* `GoogleApi.ContentWarehouse.V1.Model.RepositoryWebrefLocalizedString.t`, *default:* `nil`) - The anchor text. Note that the normalized text is not populated.
  *   `count` (*type:* `String.t`, *default:* `nil`) - The number of times we see this anchor text.
  *   `countFromOffdomain` (*type:* `String.t`, *default:* `nil`) - Count, score, normalized score, and volume of offdomain anchors.
  *   `countFromOnsite` (*type:* `String.t`, *default:* `nil`) - Count, score, normalized score, and volume of onsite anchors.
  *   `normalizedScore` (*type:* `number()`, *default:* `nil`) - The normalized score, which is computed from the score and the total_volume.
  *   `normalizedScoreFromOffdomain` (*type:* `number()`, *default:* `nil`) - 
  *   `normalizedScoreFromOnsite` (*type:* `number()`, *default:* `nil`) - 
  *   `score` (*type:* `number()`, *default:* `nil`) - The sum/aggregate of the anchor scores that have the same text.
  *   `scoreFromFragment` (*type:* `number()`, *default:* `nil`) - The sum/aggregate of the anchor scores that direct to a fragment and have the same text.
  *   `scoreFromOffdomain` (*type:* `number()`, *default:* `nil`) - 
  *   `scoreFromOffdomainFragment` (*type:* `number()`, *default:* `nil`) - 
  *   `scoreFromOnsite` (*type:* `number()`, *default:* `nil`) - 
  *   `scoreFromOnsiteFragment` (*type:* `number()`, *default:* `nil`) - 
  *   `scoreFromRedirect` (*type:* `number()`, *default:* `nil`) - The sum/aggregate of the anchor scores that direct to a different wiki title and have the same text. NOTE: url direct to a fragment score is not included in this value.
  *   `totalVolume` (*type:* `number()`, *default:* `nil`) - The total score volume used for normalization.
  *   `totalVolumeFromOffdomain` (*type:* `number()`, *default:* `nil`) - 
  *   `totalVolumeFromOnsite` (*type:* `number()`, *default:* `nil`) - 
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :anchorIndices =>
            GoogleApi.ContentWarehouse.V1.Model.RepositoryWebrefAnchorIndices.t() | nil,
          :anchorText =>
            GoogleApi.ContentWarehouse.V1.Model.RepositoryWebrefLocalizedString.t() | nil,
          :count => String.t() | nil,
          :countFromOffdomain => String.t() | nil,
          :countFromOnsite => String.t() | nil,
          :normalizedScore => number() | nil,
          :normalizedScoreFromOffdomain => number() | nil,
          :normalizedScoreFromOnsite => number() | nil,
          :score => number() | nil,
          :scoreFromFragment => number() | nil,
          :scoreFromOffdomain => number() | nil,
          :scoreFromOffdomainFragment => number() | nil,
          :scoreFromOnsite => number() | nil,
          :scoreFromOnsiteFragment => number() | nil,
          :scoreFromRedirect => number() | nil,
          :totalVolume => number() | nil,
          :totalVolumeFromOffdomain => number() | nil,
          :totalVolumeFromOnsite => number() | nil
        }

  field(:anchorIndices, as: GoogleApi.ContentWarehouse.V1.Model.RepositoryWebrefAnchorIndices)
  field(:anchorText, as: GoogleApi.ContentWarehouse.V1.Model.RepositoryWebrefLocalizedString)
  field(:count)
  field(:countFromOffdomain)
  field(:countFromOnsite)
  field(:normalizedScore)
  field(:normalizedScoreFromOffdomain)
  field(:normalizedScoreFromOnsite)
  field(:score)
  field(:scoreFromFragment)
  field(:scoreFromOffdomain)
  field(:scoreFromOffdomainFragment)
  field(:scoreFromOnsite)
  field(:scoreFromOnsiteFragment)
  field(:scoreFromRedirect)
  field(:totalVolume)
  field(:totalVolumeFromOffdomain)
  field(:totalVolumeFromOnsite)
end

defimpl Poison.Decoder, for: GoogleApi.ContentWarehouse.V1.Model.RepositoryWebrefSimplifiedAnchor do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.RepositoryWebrefSimplifiedAnchor.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContentWarehouse.V1.Model.RepositoryWebrefSimplifiedAnchor do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
