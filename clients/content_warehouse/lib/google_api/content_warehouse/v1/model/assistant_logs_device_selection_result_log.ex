# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.AssistantLogsDeviceSelectionResultLog do
  @moduledoc """
  Log the selection result. Next ID: 11

  ## Attributes

  *   `ambiguousTargetDevices` (*type:* `GoogleApi.ContentWarehouse.V1.Model.AssistantLogsAmbiguousTargetDeviceLog.t`, *default:* `nil`) - Deprecated, please use qualified_devices.
  *   `deviceSelectionDecisionSummary` (*type:* `GoogleApi.ContentWarehouse.V1.Model.AssistantLogsMediaDeviceSelectionDecisionSummary.t`, *default:* `nil`) - 
  *   `deviceTargetingErrorType` (*type:* `String.t`, *default:* `nil`) - 
  *   `finalLumosStage` (*type:* `String.t`, *default:* `nil`) - The class name for the final filter/promoter used by Lumos for device targeting. This filter or promoter runs for all users, and contains no data specific to the individual user.
  *   `lowConfidenceTargetDevice` (*type:* `GoogleApi.ContentWarehouse.V1.Model.AssistantLogsLowConfidenceTargetDeviceLog.t`, *default:* `nil`) - ////////////////////////////////////////////////////////////////////////// Ambiguous Results: the library failed to select the final target device(s) but it narrows down to a set of devices which are all valid target device candidates. The client needs to do further disambiguation, e.g., giving a dialog or having customized logic. The low confidence target device means the library falied to select the target device but it picked two devices for the client to do disambiguation.
  *   `mediaFocusSelectionErrorType` (*type:* `String.t`, *default:* `nil`) - ////////////////////////////////////////////////////////////////////////// This field log the error while selecting target device in media_focus_selector.
  *   `processorInfo` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.AssistantLogsLumosProcessorInfo.t)`, *default:* `nil`) - The log for each stage of Lumos, showing the number of eliminated devices from each processor.
  *   `qualifiedDevices` (*type:* `GoogleApi.ContentWarehouse.V1.Model.AssistantLogsAmbiguousTargetDeviceLog.t`, *default:* `nil`) - We will apply several filters and dialogs to select a target device if media_focus_selector fail to select one. This field should log the devices left after each filter or dialog. It also log the detailed info of the final target device.
  *   `singleTargetDevice` (*type:* `GoogleApi.ContentWarehouse.V1.Model.AssistantLogsDeviceInfoLog.t`, *default:* `nil`) - ////////////////////////////////////////////////////////////////////////// Unambiguous Results: the library successfully selected the final target device(s) and no further disambiguation is needed. Deprecated, please use target_device.
  *   `targetDevice` (*type:* `GoogleApi.ContentWarehouse.V1.Model.AssistantLogsTargetDeviceLog.t`, *default:* `nil`) - 
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :ambiguousTargetDevices =>
            GoogleApi.ContentWarehouse.V1.Model.AssistantLogsAmbiguousTargetDeviceLog.t() | nil,
          :deviceSelectionDecisionSummary =>
            GoogleApi.ContentWarehouse.V1.Model.AssistantLogsMediaDeviceSelectionDecisionSummary.t()
            | nil,
          :deviceTargetingErrorType => String.t() | nil,
          :finalLumosStage => String.t() | nil,
          :lowConfidenceTargetDevice =>
            GoogleApi.ContentWarehouse.V1.Model.AssistantLogsLowConfidenceTargetDeviceLog.t()
            | nil,
          :mediaFocusSelectionErrorType => String.t() | nil,
          :processorInfo =>
            list(GoogleApi.ContentWarehouse.V1.Model.AssistantLogsLumosProcessorInfo.t()) | nil,
          :qualifiedDevices =>
            GoogleApi.ContentWarehouse.V1.Model.AssistantLogsAmbiguousTargetDeviceLog.t() | nil,
          :singleTargetDevice =>
            GoogleApi.ContentWarehouse.V1.Model.AssistantLogsDeviceInfoLog.t() | nil,
          :targetDevice =>
            GoogleApi.ContentWarehouse.V1.Model.AssistantLogsTargetDeviceLog.t() | nil
        }

  field(:ambiguousTargetDevices,
    as: GoogleApi.ContentWarehouse.V1.Model.AssistantLogsAmbiguousTargetDeviceLog
  )

  field(:deviceSelectionDecisionSummary,
    as: GoogleApi.ContentWarehouse.V1.Model.AssistantLogsMediaDeviceSelectionDecisionSummary
  )

  field(:deviceTargetingErrorType)
  field(:finalLumosStage)

  field(:lowConfidenceTargetDevice,
    as: GoogleApi.ContentWarehouse.V1.Model.AssistantLogsLowConfidenceTargetDeviceLog
  )

  field(:mediaFocusSelectionErrorType)

  field(:processorInfo,
    as: GoogleApi.ContentWarehouse.V1.Model.AssistantLogsLumosProcessorInfo,
    type: :list
  )

  field(:qualifiedDevices,
    as: GoogleApi.ContentWarehouse.V1.Model.AssistantLogsAmbiguousTargetDeviceLog
  )

  field(:singleTargetDevice, as: GoogleApi.ContentWarehouse.V1.Model.AssistantLogsDeviceInfoLog)
  field(:targetDevice, as: GoogleApi.ContentWarehouse.V1.Model.AssistantLogsTargetDeviceLog)
end

defimpl Poison.Decoder,
  for: GoogleApi.ContentWarehouse.V1.Model.AssistantLogsDeviceSelectionResultLog do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.AssistantLogsDeviceSelectionResultLog.decode(
      value,
      options
    )
  end
end

defimpl Poison.Encoder,
  for: GoogleApi.ContentWarehouse.V1.Model.AssistantLogsDeviceSelectionResultLog do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
