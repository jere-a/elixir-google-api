# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.AssistantLogsDeviceInfoLog do
  @moduledoc """
  The information related to the device. Next ID: 19

  ## Attributes

  *   `arbitrationDeviceId` (*type:* `String.t`, *default:* `nil`) - Device identifier string for the current device used in the arbitration service.
  *   `availableDeviceAndCtfContextDiff` (*type:* `GoogleApi.ContentWarehouse.V1.Model.AssistantLogsAvailableDeviceAndCtfContextDiffLog.t`, *default:* `nil`) - A list of diffs for the device's context between AvailableDevice and CTF.
  *   `connectivity` (*type:* `String.t`, *default:* `nil`) - 
  *   `deviceId` (*type:* `String.t`, *default:* `nil`) - The identification of the device. DeviceId (go/as-device-id) has multiple fields. To consloidate it to a single to make dremel easier, we use the string obtained by calling go/get-device-id.
  *   `deviceIdLog` (*type:* `GoogleApi.ContentWarehouse.V1.Model.AssistantLogsSettingsDeviceIdLog.t`, *default:* `nil`) - The identification of the device. The logging version of the full DeviceId.
  *   `deviceIndex` (*type:* `integer()`, *default:* `nil`) - We index linked devices and log these index to avoid logging device_id. device_index should always be a positive number or -1. -1 means this device is not in homegraph.
  *   `deviceModelId` (*type:* `String.t`, *default:* `nil`) - This is the device_model_id field in device_settings proto. It has the same value for the same type of devices. e.g. Sonos.Sonos One.S13
  *   `distance` (*type:* `String.t`, *default:* `nil`) - LINT.ThenChange(//depot/google3/assistant/context/proto/device_arbitration.proto:EstimatedRelativeDistance)
  *   `eliminatingLumosProcessor` (*type:* `String.t`, *default:* `nil`) - The lumos processor which eliminated this device, if applicable
  *   `homeStructureId` (*type:* `String.t`, *default:* `nil`) - The home structure id of the device.
  *   `isRemote` (*type:* `boolean()`, *default:* `nil`) - 
  *   `isTethered` (*type:* `boolean()`, *default:* `nil`) - This flag indicates this is a non-local device that is tethered to local/originating device. Tethered device is a special case of is_remote and typically used in wearable scenarios. This is always false for local device and when it is true, it implies is_remote is also true.
  *   `mediaCapabilities` (*type:* `GoogleApi.ContentWarehouse.V1.Model.AssistantLogsMediaCapabilities.t`, *default:* `nil`) - 
  *   `mediaDeviceType` (*type:* `String.t`, *default:* `nil`) - 
  *   `name` (*type:* `String.t`, *default:* `nil`) - User defined device name
  *   `sessions` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.AssistantLogsDeviceMediaSessionLog.t)`, *default:* `nil`) - This field should be populated only when there is at least one session on this device.
  *   `surfaceType` (*type:* `String.t`, *default:* `nil`) - This field should be populated only when the device is an Assistant device.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :arbitrationDeviceId => String.t() | nil,
          :availableDeviceAndCtfContextDiff =>
            GoogleApi.ContentWarehouse.V1.Model.AssistantLogsAvailableDeviceAndCtfContextDiffLog.t()
            | nil,
          :connectivity => String.t() | nil,
          :deviceId => String.t() | nil,
          :deviceIdLog =>
            GoogleApi.ContentWarehouse.V1.Model.AssistantLogsSettingsDeviceIdLog.t() | nil,
          :deviceIndex => integer() | nil,
          :deviceModelId => String.t() | nil,
          :distance => String.t() | nil,
          :eliminatingLumosProcessor => String.t() | nil,
          :homeStructureId => String.t() | nil,
          :isRemote => boolean() | nil,
          :isTethered => boolean() | nil,
          :mediaCapabilities =>
            GoogleApi.ContentWarehouse.V1.Model.AssistantLogsMediaCapabilities.t() | nil,
          :mediaDeviceType => String.t() | nil,
          :name => String.t() | nil,
          :sessions =>
            list(GoogleApi.ContentWarehouse.V1.Model.AssistantLogsDeviceMediaSessionLog.t()) | nil,
          :surfaceType => String.t() | nil
        }

  field(:arbitrationDeviceId)

  field(:availableDeviceAndCtfContextDiff,
    as: GoogleApi.ContentWarehouse.V1.Model.AssistantLogsAvailableDeviceAndCtfContextDiffLog
  )

  field(:connectivity)
  field(:deviceId)
  field(:deviceIdLog, as: GoogleApi.ContentWarehouse.V1.Model.AssistantLogsSettingsDeviceIdLog)
  field(:deviceIndex)
  field(:deviceModelId)
  field(:distance)
  field(:eliminatingLumosProcessor)
  field(:homeStructureId)
  field(:isRemote)
  field(:isTethered)

  field(:mediaCapabilities, as: GoogleApi.ContentWarehouse.V1.Model.AssistantLogsMediaCapabilities)

  field(:mediaDeviceType)
  field(:name)

  field(:sessions,
    as: GoogleApi.ContentWarehouse.V1.Model.AssistantLogsDeviceMediaSessionLog,
    type: :list
  )

  field(:surfaceType)
end

defimpl Poison.Decoder, for: GoogleApi.ContentWarehouse.V1.Model.AssistantLogsDeviceInfoLog do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.AssistantLogsDeviceInfoLog.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContentWarehouse.V1.Model.AssistantLogsDeviceInfoLog do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
