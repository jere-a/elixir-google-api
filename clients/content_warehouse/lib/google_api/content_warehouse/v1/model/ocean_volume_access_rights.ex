# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.OceanVolumeAccessRights do
  @moduledoc """


  ## Attributes

  *   `allowAutoGeneratedText` (*type:* `boolean()`, *default:* `nil`) - If false, then we can only provide text layer generated from publisher provided epub.
  *   `canShowInfoCards` (*type:* `boolean()`, *default:* `nil`) - Whether we can show info cards inside this book.
  *   `canShowPhotos` (*type:* `boolean()`, *default:* `nil`) - Whether we can show photos inside this book.
  *   `numAdeDeviceAllowed` (*type:* `integer()`, *default:* `nil`) - Maximum number of Adobe Digital Editions device per sale item allowed. 0 means no download allowed. -1 means unlimited download.
  *   `numAdobeIdAllowed` (*type:* `integer()`, *default:* `nil`) - Maximum number of Adobe id per sale item allowed. 0 means no download allowed. -1 means unlimited download.
  *   `numDownloadsAllowed` (*type:* `integer()`, *default:* `nil`) - Max. number of Google eBooks downloads allowed. This is related to iPhone/iPad/Androrid/WebReader reading, not to epub/pdf downloads. 0 means no download allowed. This is related to bug #3094719.
  *   `numSimultaneousAccess` (*type:* `integer()`, *default:* `nil`) - Number of readers can read the Google eBooks simultaneously
  *   `offlineDownload` (*type:* `String.t`, *default:* `nil`) - Download type for offline reading
  *   `percentCopyable` (*type:* `integer()`, *default:* `nil`) - How much of a volume we allow user to extract as text (for copy+paste)
  *   `percentPrintable` (*type:* `integer()`, *default:* `nil`) - How much of a volume we allow user to print
  *   `restrictOnlyToText` (*type:* `boolean()`, *default:* `nil`) - True iff restrict view only to epub text. Don't show page images if this is true. Some pubs don't have copyright for page layout and fonts.
  *   `sellFixedLayoutAsImageOnly` (*type:* `boolean()`, *default:* `nil`) - Whether we sell fixed layout as image only.
  *   `textToSpeech` (*type:* `boolean()`, *default:* `nil`) - Whether text to speech is allowed
  *   `treatAsPublicDomain` (*type:* `boolean()`, *default:* `nil`) - Whether we treat this book as public domain.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :allowAutoGeneratedText => boolean() | nil,
          :canShowInfoCards => boolean() | nil,
          :canShowPhotos => boolean() | nil,
          :numAdeDeviceAllowed => integer() | nil,
          :numAdobeIdAllowed => integer() | nil,
          :numDownloadsAllowed => integer() | nil,
          :numSimultaneousAccess => integer() | nil,
          :offlineDownload => String.t() | nil,
          :percentCopyable => integer() | nil,
          :percentPrintable => integer() | nil,
          :restrictOnlyToText => boolean() | nil,
          :sellFixedLayoutAsImageOnly => boolean() | nil,
          :textToSpeech => boolean() | nil,
          :treatAsPublicDomain => boolean() | nil
        }

  field(:allowAutoGeneratedText)
  field(:canShowInfoCards)
  field(:canShowPhotos)
  field(:numAdeDeviceAllowed)
  field(:numAdobeIdAllowed)
  field(:numDownloadsAllowed)
  field(:numSimultaneousAccess)
  field(:offlineDownload)
  field(:percentCopyable)
  field(:percentPrintable)
  field(:restrictOnlyToText)
  field(:sellFixedLayoutAsImageOnly)
  field(:textToSpeech)
  field(:treatAsPublicDomain)
end

defimpl Poison.Decoder, for: GoogleApi.ContentWarehouse.V1.Model.OceanVolumeAccessRights do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.OceanVolumeAccessRights.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContentWarehouse.V1.Model.OceanVolumeAccessRights do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
