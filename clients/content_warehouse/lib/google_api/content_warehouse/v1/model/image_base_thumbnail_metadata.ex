# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.ImageBaseThumbnailMetadata do
  @moduledoc """
  Next ID: 16

  ## Attributes

  *   `byteSize` (*type:* `integer()`, *default:* `nil`) - the size of the stored thumbnail
  *   `crops` (*type:* `GoogleApi.ContentWarehouse.V1.Model.ContentAwareCropsIndexing.t`, *default:* `nil`) - SmartCrop crop-hints By default, this field is not populated.
  *   `deepCrop` (*type:* `GoogleApi.ContentWarehouse.V1.Model.DeepCropIndexing.t`, *default:* `nil`) - DeepCrop crop-hints. Usage in thumbnails could be deprecated in favor or deep_crop_pixels (below). By default, this field is not populated.
  *   `deepCropPixels` (*type:* `GoogleApi.ContentWarehouse.V1.Model.DeepCropPixels.t`, *default:* `nil`) - DeepCrop signal in pixels, equivalent to deep_crop (above) but with pixels instead of percentages. By default, this field is not populated.
  *   `docid` (*type:* `String.t`, *default:* `nil`) - the Amarna docid of the thumbnail
  *   `encryptedDocid` (*type:* `String.t`, *default:* `nil`) - encrypted version of docid
  *   `expirationTimestampMicros` (*type:* `String.t`, *default:* `nil`) - expiration timestamp of thumbnail
  *   `fprint` (*type:* `String.t`, *default:* `nil`) - the fprint of the thumbnail
  *   `height` (*type:* `integer()`, *default:* `nil`) - the height of the stored thumbnail
  *   `mimeType` (*type:* `String.t`, *default:* `nil`) - The mime_type of the thumbnail ("image/jpeg", "image/png", etc.).
  *   `originalHeight` (*type:* `integer()`, *default:* `nil`) - 
  *   `originalWidth` (*type:* `integer()`, *default:* `nil`) - Not populated by Amarna/image pipelines, ever. This was apparently introduced by a customer that wished to extend ThumbnailMetadata with this custom data.
  *   `type` (*type:* `String.t`, *default:* `nil`) - 
  *   `width` (*type:* `integer()`, *default:* `nil`) - the width of the stored thumbnail
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :byteSize => integer() | nil,
          :crops => GoogleApi.ContentWarehouse.V1.Model.ContentAwareCropsIndexing.t() | nil,
          :deepCrop => GoogleApi.ContentWarehouse.V1.Model.DeepCropIndexing.t() | nil,
          :deepCropPixels => GoogleApi.ContentWarehouse.V1.Model.DeepCropPixels.t() | nil,
          :docid => String.t() | nil,
          :encryptedDocid => String.t() | nil,
          :expirationTimestampMicros => String.t() | nil,
          :fprint => String.t() | nil,
          :height => integer() | nil,
          :mimeType => String.t() | nil,
          :originalHeight => integer() | nil,
          :originalWidth => integer() | nil,
          :type => String.t() | nil,
          :width => integer() | nil
        }

  field(:byteSize)
  field(:crops, as: GoogleApi.ContentWarehouse.V1.Model.ContentAwareCropsIndexing)
  field(:deepCrop, as: GoogleApi.ContentWarehouse.V1.Model.DeepCropIndexing)
  field(:deepCropPixels, as: GoogleApi.ContentWarehouse.V1.Model.DeepCropPixels)
  field(:docid)
  field(:encryptedDocid)
  field(:expirationTimestampMicros)
  field(:fprint)
  field(:height)
  field(:mimeType)
  field(:originalHeight)
  field(:originalWidth)
  field(:type)
  field(:width)
end

defimpl Poison.Decoder, for: GoogleApi.ContentWarehouse.V1.Model.ImageBaseThumbnailMetadata do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.ImageBaseThumbnailMetadata.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContentWarehouse.V1.Model.ImageBaseThumbnailMetadata do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
