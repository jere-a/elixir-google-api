# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.CountryGeoLocations do
  @moduledoc """
  List of locations assigned to a document.

  ## Attributes

  *   `geoLocation` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.CountryGeoLocation.t)`, *default:* `nil`) - 
  *   `isNonLocationSpecific` (*type:* `boolean()`, *default:* `nil`) - This will be set to true for documents which receive several clicks but are not assigned any location because the click distribution is flat. Typical examples are global sites like facebook.com, chains like walmart.com, informational sites like wikipedia.org etc. This flag is not propagated to deeper pages since this signal is meant to indicate that a website or a part of website is conclusively non-local, so propagating this information to deeper pages does not make sense. If this flag is set, then the only possible geo_location will be the ones which are propagated_from_a_subpage.
  *   `propagationDepthFromParent` (*type:* `integer()`, *default:* `nil`) - Depth of the URL from it's nearest parent in GeoLocation data. Webpages inherhit locations from their parent pages. For example, if foo.com/a is assigned location L1, and foo.com/a/b is not assigned any location, then http://www.foo.com/a/b inherits location L1 from it's nearest parent foo.com/a in GeoLocation data. This attribute is the distance from the nearest parent which is present in GeoLocation data. In this particular case, it will be 1.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :geoLocation => list(GoogleApi.ContentWarehouse.V1.Model.CountryGeoLocation.t()) | nil,
          :isNonLocationSpecific => boolean() | nil,
          :propagationDepthFromParent => integer() | nil
        }

  field(:geoLocation, as: GoogleApi.ContentWarehouse.V1.Model.CountryGeoLocation, type: :list)
  field(:isNonLocationSpecific)
  field(:propagationDepthFromParent)
end

defimpl Poison.Decoder, for: GoogleApi.ContentWarehouse.V1.Model.CountryGeoLocations do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.CountryGeoLocations.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContentWarehouse.V1.Model.CountryGeoLocations do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
