# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingNumberNumber do
  @moduledoc """
  Next ID: 9

  ## Attributes

  *   `evalData` (*type:* `GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingAnnotationEvalData.t`, *default:* `nil`) - Span info of the annotation - mostly used for evaluation purpose. Note: this data must never be used outside Aqua because it relies on the internal tokenization used in Aqua that could change over time.
  *   `fractionNumber` (*type:* `GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingNumberFractionNumber.t`, *default:* `nil`) - 
  *   `isSpelledOut` (*type:* `boolean()`, *default:* `nil`) - An optional field that holds whether the number_type number is a normalized spelled-out number or not. This field will not be set in cases when this information is not available.
  *   `modifier` (*type:* `String.t`, *default:* `nil`) - NumberModifier is used to capture when the expression is not an absolute number, but a number expression to represent an increase/decrease/comparison. E.g. [10 more percent], [5 less].
  *   `normalizedValue` (*type:* `String.t`, *default:* `nil`) - Contains a normalized string representation of the numeric value that has: * No digit grouping delimiter (e.g. "," in english). * Decimal mark (if present) as "." (dot). For fraction_number, this contains the floating point representation of the fraction. The number of digits after the decimal point is defined in the precision field of fraction_number.proto.
  *   `rawText` (*type:* `String.t`, *default:* `nil`) - The raw text of the annotation.
  *   `simpleNumber` (*type:* `GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingNumberSimpleNumber.t`, *default:* `nil`) - 
  *   `spelledOutType` (*type:* `String.t`, *default:* `nil`) - We expect this field to be set only when is_spelled_out is true.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :evalData =>
            GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingAnnotationEvalData.t() | nil,
          :fractionNumber =>
            GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingNumberFractionNumber.t() | nil,
          :isSpelledOut => boolean() | nil,
          :modifier => String.t() | nil,
          :normalizedValue => String.t() | nil,
          :rawText => String.t() | nil,
          :simpleNumber =>
            GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingNumberSimpleNumber.t() | nil,
          :spelledOutType => String.t() | nil
        }

  field(:evalData, as: GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingAnnotationEvalData)

  field(:fractionNumber,
    as: GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingNumberFractionNumber
  )

  field(:isSpelledOut)
  field(:modifier)
  field(:normalizedValue)
  field(:rawText)

  field(:simpleNumber,
    as: GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingNumberSimpleNumber
  )

  field(:spelledOutType)
end

defimpl Poison.Decoder, for: GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingNumberNumber do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingNumberNumber.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingNumberNumber do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
