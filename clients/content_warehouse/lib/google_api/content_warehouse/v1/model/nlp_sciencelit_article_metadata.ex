# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.NlpSciencelitArticleMetadata do
  @moduledoc """
  Next available ID: 20.

  ## Attributes

  *   `abstract` (*type:* `GoogleApi.ContentWarehouse.V1.Model.NlpSciencelitTokenizedText.t`, *default:* `nil`) - Abstract of article from metadata.
  *   `articleId` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.NlpSciencelitArticleId.t)`, *default:* `nil`) - 
  *   `author` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.NlpSciencelitAuthor.t)`, *default:* `nil`) - Author of article.
  *   `dataset` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.NlpSciencelitDataset.t)`, *default:* `nil`) - Datasets referenced from this article.
  *   `dateStr` (*type:* `String.t`, *default:* `nil`) - Most recent date YYYY-MM-DD.
  *   `deleted` (*type:* `boolean()`, *default:* `nil`) - Citation for flagged for deletion by source.
  *   `heading` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.NlpSciencelitMeshHeading.t)`, *default:* `nil`) - Mesh Terms.
  *   `issue` (*type:* `String.t`, *default:* `nil`) - 
  *   `journal` (*type:* `String.t`, *default:* `nil`) - Title of journal. For books: Journal = Publisher Volume = Collection
  *   `language` (*type:* `String.t`, *default:* `nil`) - 
  *   `lastRevisedDateStr` (*type:* `String.t`, *default:* `nil`) - Last entry revision date YYYY-MM-DD.
  *   `metadataSource` (*type:* `list(String.t)`, *default:* `nil`) - 
  *   `parsedFrom` (*type:* `String.t`, *default:* `nil`) - Source Pubmed/Medline XML file.
  *   `pmid` (*type:* `String.t`, *default:* `nil`) - PMID of article (for non-pubmed data, this is the docid).
  *   `publicationType` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.NlpSciencelitPublicationType.t)`, *default:* `nil`) - 
  *   `scamRestrictTokens` (*type:* `GoogleApi.ContentWarehouse.V1.Model.ResearchScamV3Restrict.t`, *default:* `nil`) - Optional ScaM restrict tokens to be added to all GFVs generated from this article's data.
  *   `title` (*type:* `String.t`, *default:* `nil`) - Title of article.
  *   `url` (*type:* `list(String.t)`, *default:* `nil`) - URL(s) for the document. If possible, order by decreasing desirability.
  *   `volume` (*type:* `String.t`, *default:* `nil`) - 
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :abstract => GoogleApi.ContentWarehouse.V1.Model.NlpSciencelitTokenizedText.t() | nil,
          :articleId =>
            list(GoogleApi.ContentWarehouse.V1.Model.NlpSciencelitArticleId.t()) | nil,
          :author => list(GoogleApi.ContentWarehouse.V1.Model.NlpSciencelitAuthor.t()) | nil,
          :dataset => list(GoogleApi.ContentWarehouse.V1.Model.NlpSciencelitDataset.t()) | nil,
          :dateStr => String.t() | nil,
          :deleted => boolean() | nil,
          :heading =>
            list(GoogleApi.ContentWarehouse.V1.Model.NlpSciencelitMeshHeading.t()) | nil,
          :issue => String.t() | nil,
          :journal => String.t() | nil,
          :language => String.t() | nil,
          :lastRevisedDateStr => String.t() | nil,
          :metadataSource => list(String.t()) | nil,
          :parsedFrom => String.t() | nil,
          :pmid => String.t() | nil,
          :publicationType =>
            list(GoogleApi.ContentWarehouse.V1.Model.NlpSciencelitPublicationType.t()) | nil,
          :scamRestrictTokens =>
            GoogleApi.ContentWarehouse.V1.Model.ResearchScamV3Restrict.t() | nil,
          :title => String.t() | nil,
          :url => list(String.t()) | nil,
          :volume => String.t() | nil
        }

  field(:abstract, as: GoogleApi.ContentWarehouse.V1.Model.NlpSciencelitTokenizedText)
  field(:articleId, as: GoogleApi.ContentWarehouse.V1.Model.NlpSciencelitArticleId, type: :list)
  field(:author, as: GoogleApi.ContentWarehouse.V1.Model.NlpSciencelitAuthor, type: :list)
  field(:dataset, as: GoogleApi.ContentWarehouse.V1.Model.NlpSciencelitDataset, type: :list)
  field(:dateStr)
  field(:deleted)
  field(:heading, as: GoogleApi.ContentWarehouse.V1.Model.NlpSciencelitMeshHeading, type: :list)
  field(:issue)
  field(:journal)
  field(:language)
  field(:lastRevisedDateStr)
  field(:metadataSource, type: :list)
  field(:parsedFrom)
  field(:pmid)

  field(:publicationType,
    as: GoogleApi.ContentWarehouse.V1.Model.NlpSciencelitPublicationType,
    type: :list
  )

  field(:scamRestrictTokens, as: GoogleApi.ContentWarehouse.V1.Model.ResearchScamV3Restrict)
  field(:title)
  field(:url, type: :list)
  field(:volume)
end

defimpl Poison.Decoder, for: GoogleApi.ContentWarehouse.V1.Model.NlpSciencelitArticleMetadata do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.NlpSciencelitArticleMetadata.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContentWarehouse.V1.Model.NlpSciencelitArticleMetadata do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
