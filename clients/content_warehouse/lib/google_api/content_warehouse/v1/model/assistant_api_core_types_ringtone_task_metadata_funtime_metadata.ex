# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.AssistantApiCoreTypesRingtoneTaskMetadataFuntimeMetadata do
  @moduledoc """
  Used to make timers and alarms more delightful. See go/funtime-engdesign for more details.

  ## Attributes

  *   `agentIds` (*type:* `list(String.t)`, *default:* `nil`) - For FunTime alarms and timers, the media resources are provided through AOG apps during their ringtone. Multiple AoG agents can satisfy a label. So a random agent will be chosen from those that are supplied. See go/funtime-engdesign.
  *   `animationBlob` (*type:* `String.t`, *default:* `nil`) - These bytes may represent the blob of the Rive animation that we pass to the Opal App. We will deprecate this field if we figure out a solution to load the animation from the web.
  *   `animationUrl` (*type:* `String.t`, *default:* `nil`) - Url for Rive animation that is brought up on ring. Rive is a lightweight animation library that is compatible with Flutter on Opal. See https://rive.app/.
  *   `timerHeroUrl` (*type:* `String.t`, *default:* `nil`) - The url used to load the image that is at the center of the timer during timer countdown visuals.
  *   `ttsServiceRequestBytes` (*type:* `String.t`, *default:* `nil`) - This is used to call S3 to realize the TTS. Is in the form of bytes because of a circular dependency issue in libassistant protos. It is a serialized proto of type speech.s3.TtsServiceRequest.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :agentIds => list(String.t()) | nil,
          :animationBlob => String.t() | nil,
          :animationUrl => String.t() | nil,
          :timerHeroUrl => String.t() | nil,
          :ttsServiceRequestBytes => String.t() | nil
        }

  field(:agentIds, type: :list)
  field(:animationBlob)
  field(:animationUrl)
  field(:timerHeroUrl)
  field(:ttsServiceRequestBytes)
end

defimpl Poison.Decoder,
  for:
    GoogleApi.ContentWarehouse.V1.Model.AssistantApiCoreTypesRingtoneTaskMetadataFuntimeMetadata do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.AssistantApiCoreTypesRingtoneTaskMetadataFuntimeMetadata.decode(
      value,
      options
    )
  end
end

defimpl Poison.Encoder,
  for:
    GoogleApi.ContentWarehouse.V1.Model.AssistantApiCoreTypesRingtoneTaskMetadataFuntimeMetadata do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
