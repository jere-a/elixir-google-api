# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.AppsPeopleOzExternalMergedpeopleapiPosixAccount do
  @moduledoc """
  Custom field that represents POSIX account information. Description of the field family: go/fbs-posix. If account has non-empty Username or Uid we will enforce global uniqueness of (AccountNamespace, CustomerKey, SystemId, Uid) and (AccountNamespace, CustomerKey, SystemId, Username) tuples to ensure there are no duplicates.

  ## Attributes

  *   `accountId` (*type:* `String.t`, *default:* `nil`) - The user visible value is used to distinguish identical posix account fields with different customer key values.
  *   `accountNamespace` (*type:* `String.t`, *default:* `nil`) - Value indicates the uniqueness namespace that applies to the POSIX information. The value is included in all POSIX account uniqueness indices. The indexing prevents two accounts within the same customer from having the same username. Namespacing allows Windows and Linux users to share the same username.
  *   `accountType` (*type:* `String.t`, *default:* `nil`) - Value indicates whether the POSIX information is associated with a non-human entity and the validation logic to apply during PosixAccount mutation.
  *   `customerKey` (*type:* `String.t`, *default:* `nil`) - The customer associated with the POSIX identity. If the user is already associated with a G Suite Customer, this field has the same value as http://google3/ccc/hosted/policies/settings/dthree_customer_info.proto
  *   `fingerprint` (*type:* `String.t`, *default:* `nil`) - The value is automatically set to a SHA-256 fingerprint of the POSIX account. A fingerprint should uniquely identify a POSIX account entry.
  *   `gecos` (*type:* `String.t`, *default:* `nil`) - The GECOS (user information) entry for this account.
  *   `gid` (*type:* `String.t`, *default:* `nil`) - The default group ID.
  *   `homeDirectory` (*type:* `String.t`, *default:* `nil`) - The path to the home directory for this account.
  *   `metadata` (*type:* `GoogleApi.ContentWarehouse.V1.Model.AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata.t`, *default:* `nil`) - 
  *   `operatingSystemType` (*type:* `String.t`, *default:* `nil`) - Value indicates whether to use Linux or Windows specific validation logic during PosixAccount mutation.
  *   `shell` (*type:* `String.t`, *default:* `nil`) - The path to the login shell for this account.
  *   `systemId` (*type:* `String.t`, *default:* `nil`) - System identifier for which account Username or Uid apply to. If not specified on mutate by a caller it will default to empty value if either Username or Uid are being set. SystemId does require to have a value (even an empty one) because it is included into null-filtered Spanner index used to enforce uniqueness on Username and Uid fields.
  *   `uid` (*type:* `String.t`, *default:* `nil`) - The user ID.
  *   `username` (*type:* `String.t`, *default:* `nil`) - The username of the account.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :accountId => String.t() | nil,
          :accountNamespace => String.t() | nil,
          :accountType => String.t() | nil,
          :customerKey => String.t() | nil,
          :fingerprint => String.t() | nil,
          :gecos => String.t() | nil,
          :gid => String.t() | nil,
          :homeDirectory => String.t() | nil,
          :metadata =>
            GoogleApi.ContentWarehouse.V1.Model.AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata.t()
            | nil,
          :operatingSystemType => String.t() | nil,
          :shell => String.t() | nil,
          :systemId => String.t() | nil,
          :uid => String.t() | nil,
          :username => String.t() | nil
        }

  field(:accountId)
  field(:accountNamespace)
  field(:accountType)
  field(:customerKey)
  field(:fingerprint)
  field(:gecos)
  field(:gid)
  field(:homeDirectory)

  field(:metadata,
    as: GoogleApi.ContentWarehouse.V1.Model.AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata
  )

  field(:operatingSystemType)
  field(:shell)
  field(:systemId)
  field(:uid)
  field(:username)
end

defimpl Poison.Decoder,
  for: GoogleApi.ContentWarehouse.V1.Model.AppsPeopleOzExternalMergedpeopleapiPosixAccount do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.AppsPeopleOzExternalMergedpeopleapiPosixAccount.decode(
      value,
      options
    )
  end
end

defimpl Poison.Encoder,
  for: GoogleApi.ContentWarehouse.V1.Model.AppsPeopleOzExternalMergedpeopleapiPosixAccount do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
