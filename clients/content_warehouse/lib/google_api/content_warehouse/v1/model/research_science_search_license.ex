# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.ResearchScienceSearchLicense do
  @moduledoc """
  Distribution license information. Next ID: 6

  ## Attributes

  *   `id` (*type:* `String.t`, *default:* `nil`) - A fingerprint id generated based on the license_class, URL or text. Since the knowledge graph requires a unique string id for the license but any filed of license can be empty, a fingerprint id can serve as a compact identifier representing the non-empty sub-fields.
  *   `licenseClass` (*type:* `String.t`, *default:* `nil`) - A value from a controlled vocabulary that uniquely identifies a license. Unless this is set to LICENSE_CLASS_UNDEFINED_NO_MATCH or LICENSE_CLASS_UNDEFINED_CONTRADICTING_MATCHES other fields in this message should be empty.
  *   `licenseMid` (*type:* `String.t`, *default:* `nil`) - mid for the license.
  *   `text` (*type:* `String.t`, *default:* `nil`) - The text (usually, the name) of the distribution license.
  *   `url` (*type:* `String.t`, *default:* `nil`) - The url for the distribution license.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :id => String.t() | nil,
          :licenseClass => String.t() | nil,
          :licenseMid => String.t() | nil,
          :text => String.t() | nil,
          :url => String.t() | nil
        }

  field(:id)
  field(:licenseClass)
  field(:licenseMid)
  field(:text)
  field(:url)
end

defimpl Poison.Decoder, for: GoogleApi.ContentWarehouse.V1.Model.ResearchScienceSearchLicense do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.ResearchScienceSearchLicense.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContentWarehouse.V1.Model.ResearchScienceSearchLicense do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
