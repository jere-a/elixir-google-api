# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.KnowledgeAnswersIntentModifiers do
  @moduledoc """
  Modifiers decorate a Meaning Expression (i.e. intent FunctionCall) with signals that depend on the source language's grammar and syntax. See go/intent-modifiers for details. NOTE: Modifiers don't necessarily impact go/intent-resolution semantics. LINT.IfChange

  ## Attributes

  *   `alternateLanguage` (*type:* `String.t`, *default:* `nil`) - Language of all of the non-annotation tokens of the query interpretation, if it is different than |language|. This can happen with English smearing, e.g. [height rousseau] will trigger as "fr" when issued in fr/FR, but really the language is "en". This can also happen when we have extra information about the language model, e.g. language="zh", alternate_language="zh-Hant".
  *   `definiteness` (*type:* `String.t`, *default:* `nil`) - 
  *   `language` (*type:* `String.t`, *default:* `nil`) - Language of parsed query.
  *   `mood` (*type:* `String.t`, *default:* `nil`) - Since there's only IMPERATIVE, consider using Marker.command instead.
  *   `plurality` (*type:* `String.t`, *default:* `nil`) - 
  *   `polarQuestion` (*type:* `boolean()`, *default:* `nil`) - Whether or not the question is a polar (yes/no) question.
  *   `sentiment` (*type:* `GoogleApi.ContentWarehouse.V1.Model.SentimentSentiment.t`, *default:* `nil`) - Sentiment analysis attached to an intent implies the sentiment user expressed behind that query. This is generated by the Empathetic Servlet in the QRewrite.
  *   `tense` (*type:* `String.t`, *default:* `nil`) - 
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :alternateLanguage => String.t() | nil,
          :definiteness => String.t() | nil,
          :language => String.t() | nil,
          :mood => String.t() | nil,
          :plurality => String.t() | nil,
          :polarQuestion => boolean() | nil,
          :sentiment => GoogleApi.ContentWarehouse.V1.Model.SentimentSentiment.t() | nil,
          :tense => String.t() | nil
        }

  field(:alternateLanguage)
  field(:definiteness)
  field(:language)
  field(:mood)
  field(:plurality)
  field(:polarQuestion)
  field(:sentiment, as: GoogleApi.ContentWarehouse.V1.Model.SentimentSentiment)
  field(:tense)
end

defimpl Poison.Decoder, for: GoogleApi.ContentWarehouse.V1.Model.KnowledgeAnswersIntentModifiers do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.KnowledgeAnswersIntentModifiers.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContentWarehouse.V1.Model.KnowledgeAnswersIntentModifiers do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
