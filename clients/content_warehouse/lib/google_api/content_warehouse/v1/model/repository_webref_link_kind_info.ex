# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.RepositoryWebrefLinkKindInfo do
  @moduledoc """
  Information about one of the types of a linked entity.

  ## Attributes

  *   `flags` (*type:* `GoogleApi.ContentWarehouse.V1.Model.RepositoryWebrefLinkKindFlags.t`, *default:* `nil`) - The flags associated with the link kind.
  *   `topicPropertyName` (*type:* `String.t`, *default:* `nil`) - If the link was extracted from a property, the name of the property. Can start with an exclamation mark "!" to indicate that the inverse relationship is specified. (e.g. "!/tv/tv_series_episode/series" is the inverse of "tv/tv_program/episodes").
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :flags => GoogleApi.ContentWarehouse.V1.Model.RepositoryWebrefLinkKindFlags.t() | nil,
          :topicPropertyName => String.t() | nil
        }

  field(:flags, as: GoogleApi.ContentWarehouse.V1.Model.RepositoryWebrefLinkKindFlags)
  field(:topicPropertyName)
end

defimpl Poison.Decoder, for: GoogleApi.ContentWarehouse.V1.Model.RepositoryWebrefLinkKindInfo do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.RepositoryWebrefLinkKindInfo.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContentWarehouse.V1.Model.RepositoryWebrefLinkKindInfo do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
