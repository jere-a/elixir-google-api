# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.GDocumentBaseOriginalContent do
  @moduledoc """
  The original, unconverted document, typically PDF or Word. Copied from OriginalDoc field of doclogs. Unlike "Content", this does not contain any HTTP headers. The content may be compressed using the same method as "Content". In practice it is only compressed in the Teragoogle index. It is never compressed in docjoins because those are compressed at the sstable level. In doclogs content will only be compressed if the Trawler fetchreply is also compressed--which is currently never and unlikely to change for performance reasons.

  ## Attributes

  *   `Representation` (*type:* `String.t`, *default:* `nil`) - 
  *   `UncompressedLength` (*type:* `integer()`, *default:* `nil`) - present iff rep is compressed
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :Representation => String.t() | nil,
          :UncompressedLength => integer() | nil
        }

  field(:Representation)
  field(:UncompressedLength)
end

defimpl Poison.Decoder, for: GoogleApi.ContentWarehouse.V1.Model.GDocumentBaseOriginalContent do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.GDocumentBaseOriginalContent.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContentWarehouse.V1.Model.GDocumentBaseOriginalContent do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
