# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.SmartphonePerDocData do
  @moduledoc """
  This message is used for storing smartphone related information. Note: MobilePerDocData is a similar message, but it's for lowend mobile.

  ## Attributes

  *   `DEPRECATEDDesktopCanonicalDocid` (*type:* `String.t`, *default:* `nil`) - If set, this page is a smartphone dup, a page serving equivalent contents as another URL (desktop canonical), but in smartphone-optimized style. This field holds the docid of the desktop canonical.
  *   `DEPRECATEDMobileHomepageDocid` (*type:* `String.t`, *default:* `nil`) - Mobile URL for homepages, predicted by the URL rewrite rules. See go/mobile-homepage-prediction.
  *   `adsDensityInterstitialViolationStrength` (*type:* `integer()`, *default:* `nil`) - Indicates if the page is violating mobile ads density interstitial policy and the violation strength. See go/interstitials-for-ads and http://ariane/268642 for details. To save indexing space, we convert the double values in [0.0, 1.0] to intergers in range [0, 1000] by using floor(value * 1000).
  *   `isErrorPage` (*type:* `boolean()`, *default:* `nil`) - Indicates if the page serves error to smartphone crawler. go/ramsey-sp404demotion
  *   `isN1Redirect` (*type:* `boolean()`, *default:* `nil`) - Indicates if the page has mobile N-1 redirection. go/ramsey-n1demotion
  *   `isSmartphoneOptimized` (*type:* `boolean()`, *default:* `nil`) - Indicates if the page is rendered in a friendly manner on smartphones. We use this field as tri-state: "unset" means the rendering result classification is not available, and "set as false" means that the page is rendered in unfriendly manner on smartphones. See also go/modena-ranking.
  *   `isWebErrorMobileContent` (*type:* `boolean()`, *default:* `nil`) - Indicates if the current URL serves error page to desktop crawler and non error page to smartphone crawler.
  *   `maximumFlashRatio` (*type:* `float()`, *default:* `nil`) - The ratio of the area of the largest Flash to the render area.
  *   `violatesMobileInterstitialPolicy` (*type:* `boolean()`, *default:* `nil`) - Indicates if the page is violating mobile interstitial policy and should be demoted. See go/interstitials-ranking-dd for details.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :DEPRECATEDDesktopCanonicalDocid => String.t() | nil,
          :DEPRECATEDMobileHomepageDocid => String.t() | nil,
          :adsDensityInterstitialViolationStrength => integer() | nil,
          :isErrorPage => boolean() | nil,
          :isN1Redirect => boolean() | nil,
          :isSmartphoneOptimized => boolean() | nil,
          :isWebErrorMobileContent => boolean() | nil,
          :maximumFlashRatio => float() | nil,
          :violatesMobileInterstitialPolicy => boolean() | nil
        }

  field(:DEPRECATEDDesktopCanonicalDocid)
  field(:DEPRECATEDMobileHomepageDocid)
  field(:adsDensityInterstitialViolationStrength)
  field(:isErrorPage)
  field(:isN1Redirect)
  field(:isSmartphoneOptimized)
  field(:isWebErrorMobileContent)
  field(:maximumFlashRatio)
  field(:violatesMobileInterstitialPolicy)
end

defimpl Poison.Decoder, for: GoogleApi.ContentWarehouse.V1.Model.SmartphonePerDocData do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.SmartphonePerDocData.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContentWarehouse.V1.Model.SmartphonePerDocData do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
