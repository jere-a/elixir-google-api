# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.RepositoryWebrefGeoMetadataProto do
  @moduledoc """
  Geo-specific information about the entity. Next available tag: 34.

  ## Attributes

  *   `address` (*type:* `GoogleApi.ContentWarehouse.V1.Model.GeostoreAddressProto.t`, *default:* `nil`) - Stores parent/container information containing city, province & country.
  *   `addressSynonyms` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.RepositoryWebrefGeoMetadataProtoAddressSynonym.t)`, *default:* `nil`) - This field is only provided through the online qref interface (QrefMetadata). This is a fairly simple extraction from the /geo/type/feature/address_proto_blob triple.
  *   `areaKm2` (*type:* `float()`, *default:* `nil`) - Area in km^2 of the feature if the feature has polygon. Only set by qrefmetadata.
  *   `bound` (*type:* `GoogleApi.ContentWarehouse.V1.Model.GeostoreRectProto.t`, *default:* `nil`) - The tight bounds of this feature. Note that these are different from the FeatureProto.bound field.
  *   `countryCode` (*type:* `String.t`, *default:* `nil`) - Country code of the country of the entity. Only available in qref-metadata.
  *   `location` (*type:* `GoogleApi.ContentWarehouse.V1.Model.GeostorePointProto.t`, *default:* `nil`) - The geographic location (center) and geometry of this entity. See geostore.FeatureProto for more details.
  *   `name` (*type:* `GoogleApi.ContentWarehouse.V1.Model.GeostoreNameProto.t`, *default:* `nil`) - The best name from Oyster for this entity. Is only included for some types of entities, and is a trimmed version of the proto (some fields are cleared).
  *   `oysterId` (*type:* `GoogleApi.ContentWarehouse.V1.Model.GeostoreFeatureIdProto.t`, *default:* `nil`) - The oyster id of the entity
  *   `stableIntegerCountryCode` (*type:* `integer()`, *default:* `nil`) - Numerical country code, converted with i18n/identifiers/stableinternalregionconverter.h. It is the same as country_code, but it is available in the annotator model (and takes less space).
  *   `timezone` (*type:* `String.t`, *default:* `nil`) - Timezone if the feature is contained inside one.
  *   `wpLocation` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.RepositoryWebrefWikipediaGeocode.t)`, *default:* `nil`) - Information about the geographic location (center) extracted from the wikijoins.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :address => GoogleApi.ContentWarehouse.V1.Model.GeostoreAddressProto.t() | nil,
          :addressSynonyms =>
            list(
              GoogleApi.ContentWarehouse.V1.Model.RepositoryWebrefGeoMetadataProtoAddressSynonym.t()
            )
            | nil,
          :areaKm2 => float() | nil,
          :bound => GoogleApi.ContentWarehouse.V1.Model.GeostoreRectProto.t() | nil,
          :countryCode => String.t() | nil,
          :location => GoogleApi.ContentWarehouse.V1.Model.GeostorePointProto.t() | nil,
          :name => GoogleApi.ContentWarehouse.V1.Model.GeostoreNameProto.t() | nil,
          :oysterId => GoogleApi.ContentWarehouse.V1.Model.GeostoreFeatureIdProto.t() | nil,
          :stableIntegerCountryCode => integer() | nil,
          :timezone => String.t() | nil,
          :wpLocation =>
            list(GoogleApi.ContentWarehouse.V1.Model.RepositoryWebrefWikipediaGeocode.t()) | nil
        }

  field(:address, as: GoogleApi.ContentWarehouse.V1.Model.GeostoreAddressProto)

  field(:addressSynonyms,
    as: GoogleApi.ContentWarehouse.V1.Model.RepositoryWebrefGeoMetadataProtoAddressSynonym,
    type: :list
  )

  field(:areaKm2)
  field(:bound, as: GoogleApi.ContentWarehouse.V1.Model.GeostoreRectProto)
  field(:countryCode)
  field(:location, as: GoogleApi.ContentWarehouse.V1.Model.GeostorePointProto)
  field(:name, as: GoogleApi.ContentWarehouse.V1.Model.GeostoreNameProto)
  field(:oysterId, as: GoogleApi.ContentWarehouse.V1.Model.GeostoreFeatureIdProto)
  field(:stableIntegerCountryCode)
  field(:timezone)

  field(:wpLocation,
    as: GoogleApi.ContentWarehouse.V1.Model.RepositoryWebrefWikipediaGeocode,
    type: :list
  )
end

defimpl Poison.Decoder, for: GoogleApi.ContentWarehouse.V1.Model.RepositoryWebrefGeoMetadataProto do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.RepositoryWebrefGeoMetadataProto.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContentWarehouse.V1.Model.RepositoryWebrefGeoMetadataProto do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
