# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.OceanDocTagMagazineSpecific do
  @moduledoc """
  Magazine-specific fields. See https://www.corp.google.com/eng/designdocs/scanning/magazines/designdoc.html for magazine design doc.

  ## Attributes

  *   `displayDate` (*type:* `String.t`, *default:* `nil`) - A human-readable date for display in the UI. Unlike "publication_date_" above, this should not be parsed into structured data, but should only be displayed as is.
  *   `issueDescription` (*type:* `String.t`, *default:* `nil`) - Description specific to a magazine issue, such as featured articles and article summaries.
  *   `issueEnd` (*type:* `integer()`, *default:* `nil`) - 
  *   `issueStart` (*type:* `integer()`, *default:* `nil`) - 
  *   `item` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.OceanDataDocinfoWoodwingItemMetadata.t)`, *default:* `nil`) - Items within a magazine issue.
  *   `otherNumberingEnd` (*type:* `integer()`, *default:* `nil`) - 
  *   `otherNumberingSchema` (*type:* `integer()`, *default:* `nil`) - NOTE: These should to be values from MetadataNumberingSchema; when this becomes a proto2, we can use MetadataEnums values.
  *   `otherNumberingStart` (*type:* `integer()`, *default:* `nil`) - For season or quarter dates.
  *   `pageToItem` (*type:* `list(integer())`, *default:* `nil`) - For each page of a magazine, maps to the item index of "item".
  *   `publicationDateEnd` (*type:* `String.t`, *default:* `nil`) - 
  *   `publicationDateStart` (*type:* `String.t`, *default:* `nil`) - 
  *   `serialTitle` (*type:* `String.t`, *default:* `nil`) - This is used to render the metadata line of the snippet and should be present in all magazine documents.
  *   `serialVolumeid` (*type:* `String.t`, *default:* `nil`) - 
  *   `volume` (*type:* `integer()`, *default:* `nil`) - 
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :displayDate => String.t() | nil,
          :issueDescription => String.t() | nil,
          :issueEnd => integer() | nil,
          :issueStart => integer() | nil,
          :item =>
            list(GoogleApi.ContentWarehouse.V1.Model.OceanDataDocinfoWoodwingItemMetadata.t())
            | nil,
          :otherNumberingEnd => integer() | nil,
          :otherNumberingSchema => integer() | nil,
          :otherNumberingStart => integer() | nil,
          :pageToItem => list(integer()) | nil,
          :publicationDateEnd => String.t() | nil,
          :publicationDateStart => String.t() | nil,
          :serialTitle => String.t() | nil,
          :serialVolumeid => String.t() | nil,
          :volume => integer() | nil
        }

  field(:displayDate)
  field(:issueDescription)
  field(:issueEnd)
  field(:issueStart)

  field(:item,
    as: GoogleApi.ContentWarehouse.V1.Model.OceanDataDocinfoWoodwingItemMetadata,
    type: :list
  )

  field(:otherNumberingEnd)
  field(:otherNumberingSchema)
  field(:otherNumberingStart)
  field(:pageToItem, type: :list)
  field(:publicationDateEnd)
  field(:publicationDateStart)
  field(:serialTitle)
  field(:serialVolumeid)
  field(:volume)
end

defimpl Poison.Decoder, for: GoogleApi.ContentWarehouse.V1.Model.OceanDocTagMagazineSpecific do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.OceanDocTagMagazineSpecific.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContentWarehouse.V1.Model.OceanDocTagMagazineSpecific do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
