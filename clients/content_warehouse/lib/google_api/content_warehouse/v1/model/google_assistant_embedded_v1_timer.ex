# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.GoogleAssistantEmbeddedV1Timer do
  @moduledoc """
  Conceptually, timers are clocks that count down from an initial duration and ring when they reach 0. In practice, as a timer is running, it holds a stable expiration time and computes the remaining duration using the current time. When a timer is paused, it holds a stable remaining duration.

  ## Attributes

  *   `expireTime` (*type:* `DateTime.t`, *default:* `nil`) - The time the timer is scheduled to expire. google.protobuf.Timestamp is a Unix epoch time with a granularity of 1 nanosecond.
  *   `label` (*type:* `String.t`, *default:* `nil`) - A user-provided name for this timer.
  *   `originalDuration` (*type:* `String.t`, *default:* `nil`) - The duration of the timer when it was started. For the ADD_TIME action, this field contains the amount of time to add to the timer with the given timer_id.
  *   `remainingDuration` (*type:* `String.t`, *default:* `nil`) - The remaining duration for the timer.
  *   `status` (*type:* `String.t`, *default:* `nil`) - Describes the part of the lifecycle a timer is in.
  *   `timerId` (*type:* `String.t`, *default:* `nil`) - A string key used as an identifier to this timer. This key needs to be unique amongst all timers on the device. The client can choose a mechanism of its choice to ensure this. If the server suggests a timer_id, the client can either use the suggestion or create a new unique timer_id of its choosing.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :expireTime => DateTime.t() | nil,
          :label => String.t() | nil,
          :originalDuration => String.t() | nil,
          :remainingDuration => String.t() | nil,
          :status => String.t() | nil,
          :timerId => String.t() | nil
        }

  field(:expireTime, as: DateTime)
  field(:label)
  field(:originalDuration)
  field(:remainingDuration)
  field(:status)
  field(:timerId)
end

defimpl Poison.Decoder, for: GoogleApi.ContentWarehouse.V1.Model.GoogleAssistantEmbeddedV1Timer do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.GoogleAssistantEmbeddedV1Timer.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContentWarehouse.V1.Model.GoogleAssistantEmbeddedV1Timer do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
