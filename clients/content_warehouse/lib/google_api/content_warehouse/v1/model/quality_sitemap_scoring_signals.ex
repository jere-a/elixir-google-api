# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.QualitySitemapScoringSignals do
  @moduledoc """
  Scoring signals for computing the sitelink score. This message is currently intended only for debugging. Accordingly, this is populated in CDoc but not in MDU. It is enforced by the [(exclude_from_mdu) = true] annotation of the corresponding fields in Target and TargetGroup.

  ## Attributes

  *   `annotations` (*type:* `list(String.t)`, *default:* `nil`) - 
  *   `chromeTransCount` (*type:* `String.t`, *default:* `nil`) - 
  *   `chromeTransProb` (*type:* `number()`, *default:* `nil`) - 
  *   `chromeWeight` (*type:* `number()`, *default:* `nil`) - 
  *   `country` (*type:* `list(String.t)`, *default:* `nil`) - 
  *   `countryConfidence` (*type:* `list(number())`, *default:* `nil`) - 
  *   `impressions` (*type:* `String.t`, *default:* `nil`) - 
  *   `langConfidence` (*type:* `list(number())`, *default:* `nil`) - 
  *   `language` (*type:* `list(String.t)`, *default:* `nil`) - 
  *   `localCountryIdentifier` (*type:* `list(String.t)`, *default:* `nil`) - 
  *   `longClicks` (*type:* `String.t`, *default:* `nil`) - 
  *   `longCtr` (*type:* `number()`, *default:* `nil`) - 
  *   `navboostScore` (*type:* `number()`, *default:* `nil`) - 
  *   `navmenuScore` (*type:* `number()`, *default:* `nil`) - 
  *   `pagerank` (*type:* `integer()`, *default:* `nil`) - 
  *   `recentLongCtr` (*type:* `number()`, *default:* `nil`) - 
  *   `targetCdocLanguages` (*type:* `list(integer())`, *default:* `nil`) - 
  *   `titleScore` (*type:* `number()`, *default:* `nil`) - 
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :annotations => list(String.t()) | nil,
          :chromeTransCount => String.t() | nil,
          :chromeTransProb => number() | nil,
          :chromeWeight => number() | nil,
          :country => list(String.t()) | nil,
          :countryConfidence => list(number()) | nil,
          :impressions => String.t() | nil,
          :langConfidence => list(number()) | nil,
          :language => list(String.t()) | nil,
          :localCountryIdentifier => list(String.t()) | nil,
          :longClicks => String.t() | nil,
          :longCtr => number() | nil,
          :navboostScore => number() | nil,
          :navmenuScore => number() | nil,
          :pagerank => integer() | nil,
          :recentLongCtr => number() | nil,
          :targetCdocLanguages => list(integer()) | nil,
          :titleScore => number() | nil
        }

  field(:annotations, type: :list)
  field(:chromeTransCount)
  field(:chromeTransProb)
  field(:chromeWeight)
  field(:country, type: :list)
  field(:countryConfidence, type: :list)
  field(:impressions)
  field(:langConfidence, type: :list)
  field(:language, type: :list)
  field(:localCountryIdentifier, type: :list)
  field(:longClicks)
  field(:longCtr)
  field(:navboostScore)
  field(:navmenuScore)
  field(:pagerank)
  field(:recentLongCtr)
  field(:targetCdocLanguages, type: :list)
  field(:titleScore)
end

defimpl Poison.Decoder, for: GoogleApi.ContentWarehouse.V1.Model.QualitySitemapScoringSignals do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.QualitySitemapScoringSignals.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContentWarehouse.V1.Model.QualitySitemapScoringSignals do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
