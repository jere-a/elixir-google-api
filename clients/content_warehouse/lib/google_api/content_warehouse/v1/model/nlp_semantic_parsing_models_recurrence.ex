# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingModelsRecurrence do
  @moduledoc """
  Recurrence rule for specifying date- and time-based repetition for tasks. Next id: 12.

  ## Attributes

  *   `dailyPattern` (*type:* `GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingModelsRecurrenceDailyPattern.t`, *default:* `nil`) - Optional. Specifies when in the day the task should occur. Applies to all frequencies DAILY and greater. If absent, the repeating tasks are considered "all day" type.
  *   `evalData` (*type:* `GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingAnnotationEvalData.t`, *default:* `nil`) - This field of the Recurrence message should not in general be used by outside clients of the grammar. It is intended to be used internally in Aqua for evaluation purposes. The rationale is that token counts depend on the particular tokenization used in Aqua which may be different from the one used by the client and may change from time to time. Outside clients should not create a dependency on the current tokenization used in Aqua.
  *   `every` (*type:* `integer()`, *default:* `nil`) - Multiplier on the frequency of the recurrence. Use this to specify patterns that recur every X days, months, years, etc. Example: [remind me to call mom every 2nd week]. Default is 1 (every day, every month, every year). Floating point numbers are understood and rounded to the nearest integer. E.g. "every 2.8 months" => (every 3)
  *   `frequency` (*type:* `String.t`, *default:* `nil`) - Required. The high-level frequency of the recurrence.
  *   `monthlyPattern` (*type:* `GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingModelsRecurrenceMonthlyPattern.t`, *default:* `nil`) - Specify a monthly recurrence. Valid and required for MONTHLY frequencies only.
  *   `numInstancesInFrequency` (*type:* `integer()`, *default:* `nil`) - How many times the task should be repeated within the frequency interval. Floating point numbers are understood and rounded to the nearest integer. E.g. "3.8 times per week" => (num_instances_in_frequency 4)
  *   `recurrenceEnd` (*type:* `GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingModelsRecurrenceRecurrenceEnd.t`, *default:* `nil`) - Required. The end condition for the recurrence.
  *   `recurrenceStart` (*type:* `GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingModelsRecurrenceRecurrenceStart.t`, *default:* `nil`) - Required. The start of the recurrence.
  *   `time` (*type:* `GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingDatetimeDateTime.t`, *default:* `nil`) - Optional time included with some types of recurrence phrases, such as "every morning".
  *   `weeklyPattern` (*type:* `GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingModelsRecurrenceWeeklyPattern.t`, *default:* `nil`) - Specify a weekly recurrence. Valid and required for WEEKLY frequencies only.
  *   `yearlyPattern` (*type:* `GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingModelsRecurrenceYearlyPattern.t`, *default:* `nil`) - Specify a yearly recurrence. Valid only for YEARLY frequencies.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :dailyPattern =>
            GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingModelsRecurrenceDailyPattern.t()
            | nil,
          :evalData =>
            GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingAnnotationEvalData.t() | nil,
          :every => integer() | nil,
          :frequency => String.t() | nil,
          :monthlyPattern =>
            GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingModelsRecurrenceMonthlyPattern.t()
            | nil,
          :numInstancesInFrequency => integer() | nil,
          :recurrenceEnd =>
            GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingModelsRecurrenceRecurrenceEnd.t()
            | nil,
          :recurrenceStart =>
            GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingModelsRecurrenceRecurrenceStart.t()
            | nil,
          :time =>
            GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingDatetimeDateTime.t() | nil,
          :weeklyPattern =>
            GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingModelsRecurrenceWeeklyPattern.t()
            | nil,
          :yearlyPattern =>
            GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingModelsRecurrenceYearlyPattern.t()
            | nil
        }

  field(:dailyPattern,
    as: GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingModelsRecurrenceDailyPattern
  )

  field(:evalData, as: GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingAnnotationEvalData)
  field(:every)
  field(:frequency)

  field(:monthlyPattern,
    as: GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingModelsRecurrenceMonthlyPattern
  )

  field(:numInstancesInFrequency)

  field(:recurrenceEnd,
    as: GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingModelsRecurrenceRecurrenceEnd
  )

  field(:recurrenceStart,
    as: GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingModelsRecurrenceRecurrenceStart
  )

  field(:time, as: GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingDatetimeDateTime)

  field(:weeklyPattern,
    as: GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingModelsRecurrenceWeeklyPattern
  )

  field(:yearlyPattern,
    as: GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingModelsRecurrenceYearlyPattern
  )
end

defimpl Poison.Decoder,
  for: GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingModelsRecurrence do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingModelsRecurrence.decode(value, options)
  end
end

defimpl Poison.Encoder,
  for: GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingModelsRecurrence do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
