# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.NlpSciencelitArticleData do
  @moduledoc """
  A copy of the text of an article along with references to internal figures and external citations, datasets, etc. Next available ID: 19

  ## Attributes

  *   `analyzedText` (*type:* `GoogleApi.ContentWarehouse.V1.Model.NlxDataSchemaScaleSet.t`, *default:* `nil`) - All the text in this article, separated into Sections and Paragraphs. See nlp_sciencelit.ScaleSetExtensions for the extensions to ScaleSet used.
  *   `articleId` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.NlpSciencelitArticleId.t)`, *default:* `nil`) - 
  *   `citation` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.NlpSciencelitCitationData.t)`, *default:* `nil`) - All references from this article (Bibliography).
  *   `earliestPubDate` (*type:* `String.t`, *default:* `nil`) - The result of selecting the earliest date from various metadata (PMC, PubMed Metadata, scholar citations).
  *   `metadata` (*type:* `GoogleApi.ContentWarehouse.V1.Model.NlpSciencelitArticleMetadata.t`, *default:* `nil`) - 
  *   `nonAbstractWordCount` (*type:* `String.t`, *default:* `nil`) - 
  *   `parsedFrom` (*type:* `String.t`, *default:* `nil`) - Path of the source document from which this was parsed.
  *   `pubDate` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.NlpSciencelitPubDate.t)`, *default:* `nil`) - All dates from the PMC article metadata Year/Mon/Day.
  *   `referencedBlock` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.NlpSciencelitReferencedBlock.t)`, *default:* `nil`) - All figure captions within this article.
  *   `scholarCitation` (*type:* `GoogleApi.ContentWarehouse.V1.Model.ScienceCitation.t`, *default:* `nil`) - Citation for this article.
  *   `scholarDocument` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.CompositeDoc.t)`, *default:* `nil`) - DocJoins with full text article.
  *   `scholarSignal` (*type:* `GoogleApi.ContentWarehouse.V1.Model.ScienceIndexSignal.t`, *default:* `nil`) - May also add the Scholar index signal information:
  *   `source` (*type:* `String.t`, *default:* `nil`) - Source of this article data (e.g., PubMed, scholar index, other source.).
  *   `title` (*type:* `String.t`, *default:* `nil`) - 
  *   `wordCount` (*type:* `String.t`, *default:* `nil`) - Number of words in the entire article and everywhere outside of abstract sections.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :analyzedText => GoogleApi.ContentWarehouse.V1.Model.NlxDataSchemaScaleSet.t() | nil,
          :articleId =>
            list(GoogleApi.ContentWarehouse.V1.Model.NlpSciencelitArticleId.t()) | nil,
          :citation =>
            list(GoogleApi.ContentWarehouse.V1.Model.NlpSciencelitCitationData.t()) | nil,
          :earliestPubDate => String.t() | nil,
          :metadata => GoogleApi.ContentWarehouse.V1.Model.NlpSciencelitArticleMetadata.t() | nil,
          :nonAbstractWordCount => String.t() | nil,
          :parsedFrom => String.t() | nil,
          :pubDate => list(GoogleApi.ContentWarehouse.V1.Model.NlpSciencelitPubDate.t()) | nil,
          :referencedBlock =>
            list(GoogleApi.ContentWarehouse.V1.Model.NlpSciencelitReferencedBlock.t()) | nil,
          :scholarCitation => GoogleApi.ContentWarehouse.V1.Model.ScienceCitation.t() | nil,
          :scholarDocument => list(GoogleApi.ContentWarehouse.V1.Model.CompositeDoc.t()) | nil,
          :scholarSignal => GoogleApi.ContentWarehouse.V1.Model.ScienceIndexSignal.t() | nil,
          :source => String.t() | nil,
          :title => String.t() | nil,
          :wordCount => String.t() | nil
        }

  field(:analyzedText, as: GoogleApi.ContentWarehouse.V1.Model.NlxDataSchemaScaleSet)
  field(:articleId, as: GoogleApi.ContentWarehouse.V1.Model.NlpSciencelitArticleId, type: :list)
  field(:citation, as: GoogleApi.ContentWarehouse.V1.Model.NlpSciencelitCitationData, type: :list)
  field(:earliestPubDate)
  field(:metadata, as: GoogleApi.ContentWarehouse.V1.Model.NlpSciencelitArticleMetadata)
  field(:nonAbstractWordCount)
  field(:parsedFrom)
  field(:pubDate, as: GoogleApi.ContentWarehouse.V1.Model.NlpSciencelitPubDate, type: :list)

  field(:referencedBlock,
    as: GoogleApi.ContentWarehouse.V1.Model.NlpSciencelitReferencedBlock,
    type: :list
  )

  field(:scholarCitation, as: GoogleApi.ContentWarehouse.V1.Model.ScienceCitation)
  field(:scholarDocument, as: GoogleApi.ContentWarehouse.V1.Model.CompositeDoc, type: :list)
  field(:scholarSignal, as: GoogleApi.ContentWarehouse.V1.Model.ScienceIndexSignal)
  field(:source)
  field(:title)
  field(:wordCount)
end

defimpl Poison.Decoder, for: GoogleApi.ContentWarehouse.V1.Model.NlpSciencelitArticleData do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.NlpSciencelitArticleData.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContentWarehouse.V1.Model.NlpSciencelitArticleData do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
