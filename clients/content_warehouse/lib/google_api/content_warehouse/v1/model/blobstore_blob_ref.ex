# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.BlobstoreBlobRef do
  @moduledoc """
  A BlobRef is used to refer to a blob in BlobStore. Clients may only manipulate blobs through BlobRefs. BlobRefs should not be sent in the clear outside of Google (for example, encoded in URLs, stored in a client cookie, or referred to in Javascript); for efficiency, the IDs expose internal details of the blobstore (such as machine IPs or cluster names). If clients need to store BlobRefs outside of Google, they must encrypt the BlobRef securely or use an alternative insecure identifier with an id->BlobRef mapping inside our network. 

  ## Attributes

  *   `BlobID` (*type:* `String.t`, *default:* `nil`) - 
  *   `Options` (*type:* `String.t`, *default:* `nil`) - 
  *   `RefID` (*type:* `String.t`, *default:* `nil`) - 
  *   `ShardBin` (*type:* `integer()`, *default:* `nil`) - 
  *   `Size` (*type:* `String.t`, *default:* `nil`) - Size of the complete blob, in bytes.
  *   `SourceV2BlobID` (*type:* `String.t`, *default:* `nil`) - The ID of the V2 blob this blob has
  *   `V2ReadBlobToken` (*type:* `String.t`, *default:* `nil`) - Deprecated.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :BlobID => String.t() | nil,
          :Options => String.t() | nil,
          :RefID => String.t() | nil,
          :ShardBin => integer() | nil,
          :Size => String.t() | nil,
          :SourceV2BlobID => String.t() | nil,
          :V2ReadBlobToken => String.t() | nil
        }

  field(:BlobID)
  field(:Options)
  field(:RefID)
  field(:ShardBin)
  field(:Size)
  field(:SourceV2BlobID)
  field(:V2ReadBlobToken)
end

defimpl Poison.Decoder, for: GoogleApi.ContentWarehouse.V1.Model.BlobstoreBlobRef do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.BlobstoreBlobRef.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContentWarehouse.V1.Model.BlobstoreBlobRef do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
