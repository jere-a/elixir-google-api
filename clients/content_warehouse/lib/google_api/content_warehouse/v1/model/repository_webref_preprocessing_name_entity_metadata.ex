# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.RepositoryWebrefPreprocessingNameEntityMetadata do
  @moduledoc """
  Metadata about a name. There are two metadata protos, whose content is meant to be similar but their usage different: NameEntityMetadata for readability and ConceptNameMetadata for size / decoding speed. NameEntityMetadata is propagated to GlobalNameInfo and EntityJoin tables, while ConceptNameMetadata is propagated from EntityJoins to the name matching tables and later to the Webref's/QRef's output. To add a new metadata field in the Names pipeline, and propagate it to EntityJoins and Names matching tables, it is necessary to: (1) Add the field to NameEntityMetadata, and a corresponding data representation in ConceptNameMetadata. (2) Populate the field in NameVariantSignals.name_metadata, from any source. This can be done in a corresponding NameProcessor. (3) Update the library name-metadata.h/cc to make sure that the metadata field is: a) merged correctly when merging two NameSignals; and b) transformed to the corresponding field in ConceptNameMetadata proto. Next available tag: 22.

  ## Attributes

  *   `isBypassedName` (*type:* `boolean()`, *default:* `nil`) - There is a limit of entities per name for which we can keep name signals and score. This flag is set to true for names that by-passed per-name-scoring, as there were too many entities for the name.
  *   `isCompoundName` (*type:* `boolean()`, *default:* `nil`) - This name is a generated compound name to pass primary pruning.
  *   `isCompoundRetrievalKey` (*type:* `boolean()`, *default:* `nil`) - Indicates special compound retrieval keys, like "Compound $mid1 $mid2"
  *   `isDictionaryTerm` (*type:* `boolean()`, *default:* `nil`) - This is set to true if the entity corresponds to a dictionary term.
  *   `isEventRetrievalKey` (*type:* `boolean()`, *default:* `nil`) - If true, this name is an event retrieval key.
  *   `isGeneratedName` (*type:* `boolean()`, *default:* `nil`) - This name is generated from other names.
  *   `isGeneratedStreetname` (*type:* `boolean()`, *default:* `nil`) - This name is a generated street name.
  *   `isHierarchyPropagated` (*type:* `boolean()`, *default:* `nil`) - This name is added by name propagation in hierarchy.
  *   `isIsbn` (*type:* `boolean()`, *default:* `nil`) - This name is an ISBN.
  *   `isLyricsContent` (*type:* `boolean()`, *default:* `nil`) - This name comes from recording lyrics content.
  *   `isPhoneNumber` (*type:* `boolean()`, *default:* `nil`) - This name is a phone number.
  *   `isRefconName` (*type:* `boolean()`, *default:* `nil`) - This name is used for refcon.
  *   `isReferenceName` (*type:* `boolean()`, *default:* `nil`) - This name is a reference name, only for internal usage, this name should not go into matching table without support of other signals.
  *   `isRefpageUrl` (*type:* `boolean()`, *default:* `nil`) - This name is the URL of a reference page.
  *   `isReverseUniquePropertyName` (*type:* `boolean()`, *default:* `nil`) - This name is generated from a reverse unique property of the entity.
  *   `isStrongIdentifier` (*type:* `boolean()`, *default:* `nil`) - This name is a strong identifier for this entity.
  *   `isSynonymOrFuzzyMatch` (*type:* `boolean()`, *default:* `nil`) - Set if the name is coming from synonyms.
  *   `isTrustedAllcapsName` (*type:* `boolean()`, *default:* `nil`) - If true, this name is a trusted name if it is in ALLCAPS.
  *   `isUnnormalizedName` (*type:* `boolean()`, *default:* `nil`) - If true, do not do tokenization when compute fprint hash for this name.
  *   `notGeneratedName` (*type:* `boolean()`, *default:* `nil`) - This name is clearly not generated(aka. at least one source of this name is not generated). This field is added for simplifying generated name tag while merging. Do not use this metadata directly.
  *   `originalNames` (*type:* `GoogleApi.ContentWarehouse.V1.Model.RepositoryWebrefPreprocessingOriginalNames.t`, *default:* `nil`) - Original versions of the name (before normalization). Used as query for the entity by Explicit Entity Search.
  *   `suppressTokenization` (*type:* `boolean()`, *default:* `nil`) - Whether or not to suppress tokenization on this name.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :isBypassedName => boolean() | nil,
          :isCompoundName => boolean() | nil,
          :isCompoundRetrievalKey => boolean() | nil,
          :isDictionaryTerm => boolean() | nil,
          :isEventRetrievalKey => boolean() | nil,
          :isGeneratedName => boolean() | nil,
          :isGeneratedStreetname => boolean() | nil,
          :isHierarchyPropagated => boolean() | nil,
          :isIsbn => boolean() | nil,
          :isLyricsContent => boolean() | nil,
          :isPhoneNumber => boolean() | nil,
          :isRefconName => boolean() | nil,
          :isReferenceName => boolean() | nil,
          :isRefpageUrl => boolean() | nil,
          :isReverseUniquePropertyName => boolean() | nil,
          :isStrongIdentifier => boolean() | nil,
          :isSynonymOrFuzzyMatch => boolean() | nil,
          :isTrustedAllcapsName => boolean() | nil,
          :isUnnormalizedName => boolean() | nil,
          :notGeneratedName => boolean() | nil,
          :originalNames =>
            GoogleApi.ContentWarehouse.V1.Model.RepositoryWebrefPreprocessingOriginalNames.t()
            | nil,
          :suppressTokenization => boolean() | nil
        }

  field(:isBypassedName)
  field(:isCompoundName)
  field(:isCompoundRetrievalKey)
  field(:isDictionaryTerm)
  field(:isEventRetrievalKey)
  field(:isGeneratedName)
  field(:isGeneratedStreetname)
  field(:isHierarchyPropagated)
  field(:isIsbn)
  field(:isLyricsContent)
  field(:isPhoneNumber)
  field(:isRefconName)
  field(:isReferenceName)
  field(:isRefpageUrl)
  field(:isReverseUniquePropertyName)
  field(:isStrongIdentifier)
  field(:isSynonymOrFuzzyMatch)
  field(:isTrustedAllcapsName)
  field(:isUnnormalizedName)
  field(:notGeneratedName)

  field(:originalNames,
    as: GoogleApi.ContentWarehouse.V1.Model.RepositoryWebrefPreprocessingOriginalNames
  )

  field(:suppressTokenization)
end

defimpl Poison.Decoder,
  for: GoogleApi.ContentWarehouse.V1.Model.RepositoryWebrefPreprocessingNameEntityMetadata do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.RepositoryWebrefPreprocessingNameEntityMetadata.decode(
      value,
      options
    )
  end
end

defimpl Poison.Encoder,
  for: GoogleApi.ContentWarehouse.V1.Model.RepositoryWebrefPreprocessingNameEntityMetadata do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
