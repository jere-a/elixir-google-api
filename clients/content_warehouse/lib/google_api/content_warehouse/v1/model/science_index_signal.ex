# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.ScienceIndexSignal do
  @moduledoc """


  ## Attributes

  *   `HtmlTitleFp` (*type:* `String.t`, *default:* `nil`) - Fingerprint of the html title of the page. This is useful for checking if we have the same version of the page as websearch.
  *   `IndexSelectionScore` (*type:* `number()`, *default:* `nil`) - Index selection score for websearch, bigger is better: (0.5,1.0] - prefer selection into the base index, (0.0,0.5] - prefer selection into the supplemental index.
  *   `NumBackwardLinks` (*type:* `integer()`, *default:* `nil`) - Summary statistics.
  *   `NumRelated` (*type:* `integer()`, *default:* `nil`) - 
  *   `NumVersions` (*type:* `integer()`, *default:* `nil`) - 
  *   `PublicationDay` (*type:* `integer()`, *default:* `nil`) - 
  *   `PublicationMonth` (*type:* `integer()`, *default:* `nil`) - 
  *   `PublicationYear` (*type:* `integer()`, *default:* `nil`) - Publication date.
  *   `RemoveLink` (*type:* `boolean()`, *default:* `nil`) - Remove this URL from the index - error page, broken landing page, etc. DEPRECATED, was never used or even filled correctly.
  *   `ScholarId` (*type:* `String.t`, *default:* `nil`) - For links from websearch to scholar.
  *   `Title` (*type:* `String.t`, *default:* `nil`) - Title of the article. Its only filled in when the html title of the page isn't good.
  *   `VisiblePrefixTerms` (*type:* `integer()`, *default:* `nil`) - Length of document prefix that most users are likely to see. Only filled in when we index subscription fulltext but most users see abstracts. This is a conservative guesstimate - e.g., ACM shows fulltext to university/company subscribers (including Google employees) based on user's IP address, but we don't know subscriber IPs, so ACM's PDF pages would have ~500 in this field (estimated length of abstract).
  *   `author` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.ScienceIndexSignalAuthor.t)`, *default:* `nil`) - 
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :HtmlTitleFp => String.t() | nil,
          :IndexSelectionScore => number() | nil,
          :NumBackwardLinks => integer() | nil,
          :NumRelated => integer() | nil,
          :NumVersions => integer() | nil,
          :PublicationDay => integer() | nil,
          :PublicationMonth => integer() | nil,
          :PublicationYear => integer() | nil,
          :RemoveLink => boolean() | nil,
          :ScholarId => String.t() | nil,
          :Title => String.t() | nil,
          :VisiblePrefixTerms => integer() | nil,
          :author => list(GoogleApi.ContentWarehouse.V1.Model.ScienceIndexSignalAuthor.t()) | nil
        }

  field(:HtmlTitleFp)
  field(:IndexSelectionScore)
  field(:NumBackwardLinks)
  field(:NumRelated)
  field(:NumVersions)
  field(:PublicationDay)
  field(:PublicationMonth)
  field(:PublicationYear)
  field(:RemoveLink)
  field(:ScholarId)
  field(:Title)
  field(:VisiblePrefixTerms)
  field(:author, as: GoogleApi.ContentWarehouse.V1.Model.ScienceIndexSignalAuthor, type: :list)
end

defimpl Poison.Decoder, for: GoogleApi.ContentWarehouse.V1.Model.ScienceIndexSignal do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.ScienceIndexSignal.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContentWarehouse.V1.Model.ScienceIndexSignal do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
