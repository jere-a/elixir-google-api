# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.AssistantApiCoreTypesImage do
  @moduledoc """
  An image represents the data about an image or a photo. NextId: 13

  ## Attributes

  *   `accessibilityText` (*type:* `String.t`, *default:* `nil`) - A text description of the image to be used for accessibility, e.g. screen readers.
  *   `appIconIdentifier` (*type:* `String.t`, *default:* `nil`) - App identifier. This field is specific to mobile surfaces and stands for app package name for Android surface, and app bundle identifier for iOS. In case identifier is specified but invalid, some default icon will be used, e.g. PackageManager.getDefaultActivityIcon() for Android. If you want to show image for AGSA versions which don't support this field, you can specify source_url as backup.
  *   `badgeImage` (*type:* `GoogleApi.ContentWarehouse.V1.Model.AssistantApiCoreTypesImage.t`, *default:* `nil`) - This is the image that is displayed as the badge on the main image.
  *   `content` (*type:* `String.t`, *default:* `nil`) - Content of the image in bytes.
  *   `height` (*type:* `integer()`, *default:* `nil`) - 
  *   `imageSource` (*type:* `String.t`, *default:* `nil`) - Indicate the data source where the image is fetched.
  *   `jsonContent` (*type:* `String.t`, *default:* `nil`) - Content of image in form of JSON representation.
  *   `letterDrawableText` (*type:* `String.t`, *default:* `nil`) - Text used to generate a letter drawable (a letter icon with color). It will be the default icon if the source_url is empty or cannot be rendered.
  *   `providerUrl` (*type:* `String.t`, *default:* `nil`) - Url of the image provider, which is the website containing the image. For example, https://www.agentx.com.
  *   `sourceUrl` (*type:* `String.t`, *default:* `nil`) - The source url of the image. For example, https://www.agentx.com/logo.png
  *   `sourceUrlType` (*type:* `String.t`, *default:* `nil`) - Type of the source url.
  *   `width` (*type:* `integer()`, *default:* `nil`) - The width and height of the image in pixels.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :accessibilityText => String.t() | nil,
          :appIconIdentifier => String.t() | nil,
          :badgeImage => GoogleApi.ContentWarehouse.V1.Model.AssistantApiCoreTypesImage.t() | nil,
          :content => String.t() | nil,
          :height => integer() | nil,
          :imageSource => String.t() | nil,
          :jsonContent => String.t() | nil,
          :letterDrawableText => String.t() | nil,
          :providerUrl => String.t() | nil,
          :sourceUrl => String.t() | nil,
          :sourceUrlType => String.t() | nil,
          :width => integer() | nil
        }

  field(:accessibilityText)
  field(:appIconIdentifier)
  field(:badgeImage, as: GoogleApi.ContentWarehouse.V1.Model.AssistantApiCoreTypesImage)
  field(:content)
  field(:height)
  field(:imageSource)
  field(:jsonContent)
  field(:letterDrawableText)
  field(:providerUrl)
  field(:sourceUrl)
  field(:sourceUrlType)
  field(:width)
end

defimpl Poison.Decoder, for: GoogleApi.ContentWarehouse.V1.Model.AssistantApiCoreTypesImage do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.AssistantApiCoreTypesImage.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContentWarehouse.V1.Model.AssistantApiCoreTypesImage do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
