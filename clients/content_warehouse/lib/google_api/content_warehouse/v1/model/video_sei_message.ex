# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.VideoSEIMessage do
  @moduledoc """
  This SEI message only takes the payload type and the sum of the payload sizes for all SEI messages of this type. More informations, such as timestamp, payload, may be added in the future.

  ## Attributes

  *   `count` (*type:* `integer()`, *default:* `nil`) - message count of each payloadtype
  *   `cumulativeSize` (*type:* `String.t`, *default:* `nil`) - If the video stream has multiple SEI messages with the same payload type, this is the sum of all these payloads' sizes.
  *   `payloadtype` (*type:* `integer()`, *default:* `nil`) - use int type in case there are payload types that are not included in the SEIPayloadType enum below. The enum can be used for lookup
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :count => integer() | nil,
          :cumulativeSize => String.t() | nil,
          :payloadtype => integer() | nil
        }

  field(:count)
  field(:cumulativeSize)
  field(:payloadtype)
end

defimpl Poison.Decoder, for: GoogleApi.ContentWarehouse.V1.Model.VideoSEIMessage do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.VideoSEIMessage.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContentWarehouse.V1.Model.VideoSEIMessage do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
