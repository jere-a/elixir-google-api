# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingModelsCommunicationRecipient do
  @moduledoc """
  It can be a contact (person name), a business name, an email address or a phone number. NOTE: Unfortunately the name of this message is not generic enough. Contact would be a better name.

  ## Attributes

  *   `calendarEvent` (*type:* `GoogleApi.ContentWarehouse.V1.Model.AssistantApiCoreTypesCalendarEvent.t`, *default:* `nil`) - 
  *   `calendarEventWrapper` (*type:* `GoogleApi.ContentWarehouse.V1.Model.AssistantApiCoreTypesCalendarEventWrapper.t`, *default:* `nil`) - 
  *   `contact` (*type:* `GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingModelsPersonPerson.t`, *default:* `nil`) - Contact details (e.g. gaia_id, phone, etc). Replaces 'focus_name' above.
  *   `evalData` (*type:* `GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingAnnotationEvalData.t`, *default:* `nil`) - Required, but should only be used inside Aqua and must not be used by outside clients!!
  *   `isAnnotatedFromText` (*type:* `boolean()`, *default:* `nil`) - 
  *   `nameAnnotationSource` (*type:* `String.t`, *default:* `nil`) - Deprecated in favor of recipient.contact.name_annotation_source.
  *   `numberAnnotationSource` (*type:* `String.t`, *default:* `nil`) - 
  *   `rawText` (*type:* `String.t`, *default:* `nil`) - NOTE: for CONTACT recipient, this is *NOT* the real raw text of the recipient span of historical reasons. Major differences includes: - stripping possessive suffix, e.g. "John's" -> "John" - stripping prefix/suffix/title, e.g. "Mr. John" -> "John" - uninflect name for languages like Russian, e.g. "Андрею" -> "Андрей" Currently this is the same as .contact.name, and is used as the string shown to the user on clientside UI. If you're looking for real raw text, use .contact.raw_text
  *   `recipientType` (*type:* `String.t`, *default:* `nil`) - 
  *   `relationship` (*type:* `GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingModelsCommunicationRelationshipArgument.t`, *default:* `nil`) - A reference to a person by relationship name. eg. my father.
  *   `sensitiveNumBytes` (*type:* `integer()`, *default:* `nil`) - 
  *   `sensitiveStartByte` (*type:* `integer()`, *default:* `nil`) - The beginning and end of the recipient name that should be removed before logging.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :calendarEvent =>
            GoogleApi.ContentWarehouse.V1.Model.AssistantApiCoreTypesCalendarEvent.t() | nil,
          :calendarEventWrapper =>
            GoogleApi.ContentWarehouse.V1.Model.AssistantApiCoreTypesCalendarEventWrapper.t()
            | nil,
          :contact =>
            GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingModelsPersonPerson.t() | nil,
          :evalData =>
            GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingAnnotationEvalData.t() | nil,
          :isAnnotatedFromText => boolean() | nil,
          :nameAnnotationSource => String.t() | nil,
          :numberAnnotationSource => String.t() | nil,
          :rawText => String.t() | nil,
          :recipientType => String.t() | nil,
          :relationship =>
            GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingModelsCommunicationRelationshipArgument.t()
            | nil,
          :sensitiveNumBytes => integer() | nil,
          :sensitiveStartByte => integer() | nil
        }

  field(:calendarEvent, as: GoogleApi.ContentWarehouse.V1.Model.AssistantApiCoreTypesCalendarEvent)

  field(:calendarEventWrapper,
    as: GoogleApi.ContentWarehouse.V1.Model.AssistantApiCoreTypesCalendarEventWrapper
  )

  field(:contact, as: GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingModelsPersonPerson)
  field(:evalData, as: GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingAnnotationEvalData)
  field(:isAnnotatedFromText)
  field(:nameAnnotationSource)
  field(:numberAnnotationSource)
  field(:rawText)
  field(:recipientType)

  field(:relationship,
    as:
      GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingModelsCommunicationRelationshipArgument
  )

  field(:sensitiveNumBytes)
  field(:sensitiveStartByte)
end

defimpl Poison.Decoder,
  for: GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingModelsCommunicationRecipient do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingModelsCommunicationRecipient.decode(
      value,
      options
    )
  end
end

defimpl Poison.Encoder,
  for: GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingModelsCommunicationRecipient do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
