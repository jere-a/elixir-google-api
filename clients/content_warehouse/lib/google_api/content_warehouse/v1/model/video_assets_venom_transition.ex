# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.VideoAssetsVenomTransition do
  @moduledoc """
  As video mutations are reconciled by Venom, we can tell if the ingredient did or did not reach certain objectives. When processing has completed, all objectives will have a corresponding transition. All transitions are reset for every mutation, but will take into account assets outside of that mutation. For example, if Asset X fails, and was part of "OBJECTIVE_PRIMARY_ASSETS_DONE", a rerun of Asset Y is destined to result in OUTCOME_FAILED, regardless of the fate of Asset Y. Some phenonema have effects on most or all Objectives. For example, a bad input file will result on OUTCOME_INFEASIBLE across the board (eventually, for now it's just GO_LIVE and DO_ALL, work in progress), and a failure to produce Format 18 will cause OUTCOME_FAILED across most Objectives.

  ## Attributes

  *   `objective` (*type:* `String.t`, *default:* `nil`) - The objective this transition is about. REQUIRED.
  *   `outcome` (*type:* `String.t`, *default:* `nil`) - Whether the objective is reached or not. REQUIRED.
  *   `reason` (*type:* `String.t`, *default:* `nil`) - An optional debug string indicating the reason for this transition. This is typically omitted for OUTCOME_SUCCESS. e.g. "The video's content is invalid due to failed blobstore cloning."
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :objective => String.t() | nil,
          :outcome => String.t() | nil,
          :reason => String.t() | nil
        }

  field(:objective)
  field(:outcome)
  field(:reason)
end

defimpl Poison.Decoder, for: GoogleApi.ContentWarehouse.V1.Model.VideoAssetsVenomTransition do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.VideoAssetsVenomTransition.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContentWarehouse.V1.Model.VideoAssetsVenomTransition do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
