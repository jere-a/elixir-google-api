# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.RepositoryWebrefSimplifiedCompositeDoc do
  @moduledoc """
  Represents an information which is very close to composite doc, but compresses how the anchors are represented to save space. Next available tag: 18.

  ## Attributes

  *   `anchors` (*type:* `GoogleApi.ContentWarehouse.V1.Model.RepositoryWebrefSimplifiedAnchors.t`, *default:* `nil`) - The composite doc anchors trimmed and transformed in a smaller data structure and aggregated (if they have the exact same text).
  *   `cdocContainer` (*type:* `GoogleApi.ContentWarehouse.V1.Model.Proto2BridgeMessageSet.t`, *default:* `nil`) - IMPORTANT: do not access this field directly, use the simplified-cdoc-access library functions to get the composite doc out of this proto.
  *   `documentMentionSpans` (*type:* `GoogleApi.ContentWarehouse.V1.Model.RepositoryWebrefRefconDocumentMentionSpans.t`, *default:* `nil`) - The composite doc spans which were annotated with entities by Webref.
  *   `forwardingDups` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.RepositoryWebrefSimplifiedForwardingDup.t)`, *default:* `nil`) - Forwarding dups generated by merging existing forwarding dups within cdoc_container and URLs from ReferencePageCandidateList. Populated only before writing to online CDocs Spanner table and used for keeping an index on non canonical URLs in table. [!] Do not use unless fetching CDocs from Enricher's online Spanner CDocs database knowledge-enricher-cdocs-spanner.
  *   `matchingMetadata` (*type:* `GoogleApi.ContentWarehouse.V1.Model.RepositoryWebrefPreprocessingUrlMatchingMetadata.t`, *default:* `nil`) - Metadata related to why this doc was matched to its owning entity.
  *   `pageContent` (*type:* `list(String.t)`, *default:* `nil`) - 
  *   `refconDocumentMetadata` (*type:* `GoogleApi.ContentWarehouse.V1.Model.RepositoryWebrefRefconRefconDocumentMetadata.t`, *default:* `nil`) - Additional document metadata needed by Refcon.
  *   `sourceSnapshotType` (*type:* `String.t`, *default:* `nil`) - 
  *   `url` (*type:* `String.t`, *default:* `nil`) - The URL, populated independently of whether we have a CompositeDoc proto. If the cdoc exists, the url is the same as CompositeDoc.doc.url.
  *   `webrefOutlinkInfos` (*type:* `GoogleApi.ContentWarehouse.V1.Model.RepositoryWebrefWebrefOutlinkInfos.t`, *default:* `nil`) - 
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :anchors =>
            GoogleApi.ContentWarehouse.V1.Model.RepositoryWebrefSimplifiedAnchors.t() | nil,
          :cdocContainer => GoogleApi.ContentWarehouse.V1.Model.Proto2BridgeMessageSet.t() | nil,
          :documentMentionSpans =>
            GoogleApi.ContentWarehouse.V1.Model.RepositoryWebrefRefconDocumentMentionSpans.t()
            | nil,
          :forwardingDups =>
            list(GoogleApi.ContentWarehouse.V1.Model.RepositoryWebrefSimplifiedForwardingDup.t())
            | nil,
          :matchingMetadata =>
            GoogleApi.ContentWarehouse.V1.Model.RepositoryWebrefPreprocessingUrlMatchingMetadata.t()
            | nil,
          :pageContent => list(String.t()) | nil,
          :refconDocumentMetadata =>
            GoogleApi.ContentWarehouse.V1.Model.RepositoryWebrefRefconRefconDocumentMetadata.t()
            | nil,
          :sourceSnapshotType => String.t() | nil,
          :url => String.t() | nil,
          :webrefOutlinkInfos =>
            GoogleApi.ContentWarehouse.V1.Model.RepositoryWebrefWebrefOutlinkInfos.t() | nil
        }

  field(:anchors, as: GoogleApi.ContentWarehouse.V1.Model.RepositoryWebrefSimplifiedAnchors)
  field(:cdocContainer, as: GoogleApi.ContentWarehouse.V1.Model.Proto2BridgeMessageSet)

  field(:documentMentionSpans,
    as: GoogleApi.ContentWarehouse.V1.Model.RepositoryWebrefRefconDocumentMentionSpans
  )

  field(:forwardingDups,
    as: GoogleApi.ContentWarehouse.V1.Model.RepositoryWebrefSimplifiedForwardingDup,
    type: :list
  )

  field(:matchingMetadata,
    as: GoogleApi.ContentWarehouse.V1.Model.RepositoryWebrefPreprocessingUrlMatchingMetadata
  )

  field(:pageContent, type: :list)

  field(:refconDocumentMetadata,
    as: GoogleApi.ContentWarehouse.V1.Model.RepositoryWebrefRefconRefconDocumentMetadata
  )

  field(:sourceSnapshotType)
  field(:url)

  field(:webrefOutlinkInfos,
    as: GoogleApi.ContentWarehouse.V1.Model.RepositoryWebrefWebrefOutlinkInfos
  )
end

defimpl Poison.Decoder,
  for: GoogleApi.ContentWarehouse.V1.Model.RepositoryWebrefSimplifiedCompositeDoc do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.RepositoryWebrefSimplifiedCompositeDoc.decode(
      value,
      options
    )
  end
end

defimpl Poison.Encoder,
  for: GoogleApi.ContentWarehouse.V1.Model.RepositoryWebrefSimplifiedCompositeDoc do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
