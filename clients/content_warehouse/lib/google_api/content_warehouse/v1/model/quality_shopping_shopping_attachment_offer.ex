# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.QualityShoppingShoppingAttachmentOffer do
  @moduledoc """


  ## Attributes

  *   `condition` (*type:* `String.t`, *default:* `nil`) - 
  *   `controlType` (*type:* `String.t`, *default:* `nil`) - 
  *   `fingerprintOfOfferUrls` (*type:* `list(String.t)`, *default:* `nil`) - fingerprint of original offer item_urland mobile_offer_url (if present) to be able to understand if offer data came from different url.
  *   `gtinValue` (*type:* `list(String.t)`, *default:* `nil`) - Global trade item number (GTIN).
  *   `imageId` (*type:* `list(String.t)`, *default:* `nil`) - image_id is sorted and distinct for efficient search during serving.
  *   `inferredImages` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.ShoppingWebentityShoppingAnnotationInferredImage.t)`, *default:* `nil`) - inferred_images are sorted by inferred_image_id for efficient search during serving.
  *   `isLensBuildable` (*type:* `boolean()`, *default:* `nil`) - Is the offer Lens buildable. The corresponding field in Shopping Annotation is SurfaceSelection.
  *   `matchingType` (*type:* `String.t`, *default:* `nil`) - information about methods used to match offer with indexed url. See shopping_annotation.proto
  *   `merchantAccountId` (*type:* `String.t`, *default:* `nil`) - account_id of the merchant in shopping systems.
  *   `merchantItemId` (*type:* `String.t`, *default:* `nil`) - merchant_item_id is meaningless without the merchant_account_id.
  *   `nonDisplayableBrandMerchantRelationship` (*type:* `String.t`, *default:* `nil`) - direct to consumer brand merchant relationship
  *   `nonDisplayableCurrency` (*type:* `String.t`, *default:* `nil`) - 
  *   `nonDisplayableOrganicScoreMillis` (*type:* `integer()`, *default:* `nil`) - Normalized riskiness score for Organic destinations. It's in range [1,1000] with 1 being the worst score and 1000 being the best.
  *   `nonDisplayableStaleAvailability` (*type:* `GoogleApi.ContentWarehouse.V1.Model.ShoppingWebentityShoppingAnnotationOfferAvailabilityInfo.t`, *default:* `nil`) - This is experimental, not filled in yet and not intended to be used. Please contact buyable-corpus@ before considering using this field.
  *   `offerDocid` (*type:* `String.t`, *default:* `nil`) - 
  *   `refType` (*type:* `String.t`, *default:* `nil`) - 
  *   `soriVersionId` (*type:* `GoogleApi.ContentWarehouse.V1.Model.ShoppingWebentityShoppingAnnotationSoriVersionId.t`, *default:* `nil`) - 
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :condition => String.t() | nil,
          :controlType => String.t() | nil,
          :fingerprintOfOfferUrls => list(String.t()) | nil,
          :gtinValue => list(String.t()) | nil,
          :imageId => list(String.t()) | nil,
          :inferredImages =>
            list(
              GoogleApi.ContentWarehouse.V1.Model.ShoppingWebentityShoppingAnnotationInferredImage.t()
            )
            | nil,
          :isLensBuildable => boolean() | nil,
          :matchingType => String.t() | nil,
          :merchantAccountId => String.t() | nil,
          :merchantItemId => String.t() | nil,
          :nonDisplayableBrandMerchantRelationship => String.t() | nil,
          :nonDisplayableCurrency => String.t() | nil,
          :nonDisplayableOrganicScoreMillis => integer() | nil,
          :nonDisplayableStaleAvailability =>
            GoogleApi.ContentWarehouse.V1.Model.ShoppingWebentityShoppingAnnotationOfferAvailabilityInfo.t()
            | nil,
          :offerDocid => String.t() | nil,
          :refType => String.t() | nil,
          :soriVersionId =>
            GoogleApi.ContentWarehouse.V1.Model.ShoppingWebentityShoppingAnnotationSoriVersionId.t()
            | nil
        }

  field(:condition)
  field(:controlType)
  field(:fingerprintOfOfferUrls, type: :list)
  field(:gtinValue, type: :list)
  field(:imageId, type: :list)

  field(:inferredImages,
    as: GoogleApi.ContentWarehouse.V1.Model.ShoppingWebentityShoppingAnnotationInferredImage,
    type: :list
  )

  field(:isLensBuildable)
  field(:matchingType)
  field(:merchantAccountId)
  field(:merchantItemId)
  field(:nonDisplayableBrandMerchantRelationship)
  field(:nonDisplayableCurrency)
  field(:nonDisplayableOrganicScoreMillis)

  field(:nonDisplayableStaleAvailability,
    as:
      GoogleApi.ContentWarehouse.V1.Model.ShoppingWebentityShoppingAnnotationOfferAvailabilityInfo
  )

  field(:offerDocid)
  field(:refType)

  field(:soriVersionId,
    as: GoogleApi.ContentWarehouse.V1.Model.ShoppingWebentityShoppingAnnotationSoriVersionId
  )
end

defimpl Poison.Decoder,
  for: GoogleApi.ContentWarehouse.V1.Model.QualityShoppingShoppingAttachmentOffer do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.QualityShoppingShoppingAttachmentOffer.decode(
      value,
      options
    )
  end
end

defimpl Poison.Encoder,
  for: GoogleApi.ContentWarehouse.V1.Model.QualityShoppingShoppingAttachmentOffer do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
