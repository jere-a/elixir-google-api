# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingDatetimeDateTimeProperty do
  @moduledoc """
  DateTimeProperty contains various metadata about the DateTime interpretation. Next field: 13

  ## Attributes

  *   `dateFormat` (*type:* `String.t`, *default:* `nil`) - 
  *   `expandYearToCurrent` (*type:* `boolean()`, *default:* `nil`) - 
  *   `hourStatus` (*type:* `String.t`, *default:* `nil`) - 
  *   `inferredDateValue` (*type:* `String.t`, *default:* `nil`) - 
  *   `metadata` (*type:* `String.t`, *default:* `nil`) - Note: this may be changed to a repeated field in the future.
  *   `personalReferenceMetadata` (*type:* `GoogleApi.ContentWarehouse.V1.Model.CopleyPersonalReferenceMetadata.t`, *default:* `nil`) - Metadata about the personal reference if the date was generated from a personal reference.
  *   `relationToReference` (*type:* `String.t`, *default:* `nil`) - 
  *   `relative` (*type:* `GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingDatetimeRelativeDateTime.t`, *default:* `nil`) - Expresses the relative DateTime query that gave rise to these grounded semantics.
  *   `sourceCalendar` (*type:* `String.t`, *default:* `nil`) - 
  *   `sourceTypeList` (*type:* `GoogleApi.ContentWarehouse.V1.Model.CopleySourceTypeList.t`, *default:* `nil`) - If the annotation was created by using personal data, we record the provenance for that data here.
  *   `timeFormat` (*type:* `list(String.t)`, *default:* `nil`) - 
  *   `timezoneIsExplicit` (*type:* `boolean()`, *default:* `nil`) - True iff the timezone value in AbsoluteDateTime is explicit in the annotated text or not. In the following examples the timezone is explicit: Query Timezone -------------------------- -------- 10pst Pacific Standard Time 10 utc UTC 10 sydney time Australia Eastern Time
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :dateFormat => String.t() | nil,
          :expandYearToCurrent => boolean() | nil,
          :hourStatus => String.t() | nil,
          :inferredDateValue => String.t() | nil,
          :metadata => String.t() | nil,
          :personalReferenceMetadata =>
            GoogleApi.ContentWarehouse.V1.Model.CopleyPersonalReferenceMetadata.t() | nil,
          :relationToReference => String.t() | nil,
          :relative =>
            GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingDatetimeRelativeDateTime.t()
            | nil,
          :sourceCalendar => String.t() | nil,
          :sourceTypeList => GoogleApi.ContentWarehouse.V1.Model.CopleySourceTypeList.t() | nil,
          :timeFormat => list(String.t()) | nil,
          :timezoneIsExplicit => boolean() | nil
        }

  field(:dateFormat)
  field(:expandYearToCurrent)
  field(:hourStatus)
  field(:inferredDateValue)
  field(:metadata)

  field(:personalReferenceMetadata,
    as: GoogleApi.ContentWarehouse.V1.Model.CopleyPersonalReferenceMetadata
  )

  field(:relationToReference)

  field(:relative,
    as: GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingDatetimeRelativeDateTime
  )

  field(:sourceCalendar)
  field(:sourceTypeList, as: GoogleApi.ContentWarehouse.V1.Model.CopleySourceTypeList)
  field(:timeFormat, type: :list)
  field(:timezoneIsExplicit)
end

defimpl Poison.Decoder,
  for: GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingDatetimeDateTimeProperty do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingDatetimeDateTimeProperty.decode(
      value,
      options
    )
  end
end

defimpl Poison.Encoder,
  for: GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingDatetimeDateTimeProperty do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
