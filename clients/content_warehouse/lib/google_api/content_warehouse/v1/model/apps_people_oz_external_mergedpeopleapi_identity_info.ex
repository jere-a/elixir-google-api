# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.AppsPeopleOzExternalMergedpeopleapiIdentityInfo do
  @moduledoc """


  ## Attributes

  *   `originalLookupToken` (*type:* `list(String.t)`, *default:* `nil`) - Original lookup token from the request that resulted in this person or one of its containers.
  *   `previousPersonId` (*type:* `list(String.t)`, *default:* `nil`) - Any former IDs this person may have had, in the case that their ID may have changed. Populated only for sync requests. Examples of such changes include adding an edge to a contact that links to a profile. The ID will change from being contact-oriented to being profile-oriented. To be used to clear out old versions of a person.
  *   `sourceIds` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.AppsPeopleOzExternalMergedpeopleapiSourceIdentity.t)`, *default:* `nil`) - A list of sources contributing to the merged person, including profiles (with gaia-id), contacts and synthetic-contacts.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :originalLookupToken => list(String.t()) | nil,
          :previousPersonId => list(String.t()) | nil,
          :sourceIds =>
            list(
              GoogleApi.ContentWarehouse.V1.Model.AppsPeopleOzExternalMergedpeopleapiSourceIdentity.t()
            )
            | nil
        }

  field(:originalLookupToken, type: :list)
  field(:previousPersonId, type: :list)

  field(:sourceIds,
    as: GoogleApi.ContentWarehouse.V1.Model.AppsPeopleOzExternalMergedpeopleapiSourceIdentity,
    type: :list
  )
end

defimpl Poison.Decoder,
  for: GoogleApi.ContentWarehouse.V1.Model.AppsPeopleOzExternalMergedpeopleapiIdentityInfo do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.AppsPeopleOzExternalMergedpeopleapiIdentityInfo.decode(
      value,
      options
    )
  end
end

defimpl Poison.Encoder,
  for: GoogleApi.ContentWarehouse.V1.Model.AppsPeopleOzExternalMergedpeopleapiIdentityInfo do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
