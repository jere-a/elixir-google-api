# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.HomeGraphCommonRoute do
  @moduledoc """


  ## Attributes

  *   `agentDeviceId` (*type:* `String.t`, *default:* `nil`) - The device ID defined by the agent.
  *   `agentId` (*type:* `String.t`, *default:* `nil`) - The agent's ID. Generally it is the agent's Google cloud project id.
  *   `chipEndpoint` (*type:* `list(integer())`, *default:* `nil`) - chip endpoint index (if the target is CHIP). Set packed = true to handle error caused by b/32953375 when exporting this data. Note that we should never change this to non-repeated: a packed field will not work properly if you change the field to non-repeated later.
  *   `targetType` (*type:* `String.t`, *default:* `nil`) - Execution routing target.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :agentDeviceId => String.t() | nil,
          :agentId => String.t() | nil,
          :chipEndpoint => list(integer()) | nil,
          :targetType => String.t() | nil
        }

  field(:agentDeviceId)
  field(:agentId)
  field(:chipEndpoint, type: :list)
  field(:targetType)
end

defimpl Poison.Decoder, for: GoogleApi.ContentWarehouse.V1.Model.HomeGraphCommonRoute do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.HomeGraphCommonRoute.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContentWarehouse.V1.Model.HomeGraphCommonRoute do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
