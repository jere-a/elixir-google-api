# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.VideoThumbnailsThumbnailScore do
  @moduledoc """
  LINT.IfChange Score calculated from a thumbnail. NextID: 16

  ## Attributes

  *   `checksum` (*type:* `String.t`, *default:* `nil`) - Checksum of the thumbnail bytes used to identify which image the score belongs to. Only filled when thumbnail version is 0.
  *   `colorSampling` (*type:* `integer()`, *default:* `nil`) - Color sampling score encoded as uint32. Encode/Decode using youtube::color::RgbToUint / UIntToRgb. Field is only relevant for TYPE_COLOR_SAMPLING.
  *   `denseFeatures` (*type:* `list(number())`, *default:* `nil`) - Thumbnail dense features.
  *   `denseGeneralExtraFeatures` (*type:* `GoogleApi.ContentWarehouse.V1.Model.DrishtiFeatureExtra.t`, *default:* `nil`) - FeatureExtra extension for dense features.
  *   `externalImageId` (*type:* `String.t`, *default:* `nil`) - A unique identifier for the image that is independent of the resolution. The Image ID accompanies the image bytes through its lifecycle, from creation till vanishing. Image ID is not based on image content; it is different than checksum (e.g. two different images with the same bytes may not have the same image ID). This ID is used as a unique identifier for clients such as T&S and classifiers. For more info refer to go/thumbnail-id-ts-ab-testing Note: Image ID's are still in development and are currently not exposed externally (may be done in the future). Please contact yt-thumbnails-core@ before using it. Do not use externally or in logs before contacting yt-thumbnails-core@
  *   `isAssigned` (*type:* `boolean()`, *default:* `nil`) - If true, score is manually assigned.
  *   `isInstant` (*type:* `boolean()`, *default:* `nil`) - If true, score will be instantly indexed by YouTube search indexer.
  *   `modelVersion` (*type:* `String.t`, *default:* `nil`) - 
  *   `overwriteReason` (*type:* `String.t`, *default:* `nil`) - 
  *   `quantizedFeatures` (*type:* `String.t`, *default:* `nil`) - Thumbnail quantized dense features, available in TYPE_STARBURST_COMPRESSED
  *   `score` (*type:* `float()`, *default:* `nil`) - 
  *   `sparseFeatures` (*type:* `GoogleApi.ContentWarehouse.V1.Model.DrishtiSparseFeatureData.t`, *default:* `nil`) - Thumbnail sparse features, available in TYPE_STARBURST
  *   `thumbnailSet` (*type:* `String.t`, *default:* `nil`) - 
  *   `thumbnailVersion` (*type:* `String.t`, *default:* `nil`) - Version number of the thumbnail. Should be consistent with the version number in the ytimg_content column family.
  *   `type` (*type:* `String.t`, *default:* `nil`) - 
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :checksum => String.t() | nil,
          :colorSampling => integer() | nil,
          :denseFeatures => list(number()) | nil,
          :denseGeneralExtraFeatures =>
            GoogleApi.ContentWarehouse.V1.Model.DrishtiFeatureExtra.t() | nil,
          :externalImageId => String.t() | nil,
          :isAssigned => boolean() | nil,
          :isInstant => boolean() | nil,
          :modelVersion => String.t() | nil,
          :overwriteReason => String.t() | nil,
          :quantizedFeatures => String.t() | nil,
          :score => float() | nil,
          :sparseFeatures =>
            GoogleApi.ContentWarehouse.V1.Model.DrishtiSparseFeatureData.t() | nil,
          :thumbnailSet => String.t() | nil,
          :thumbnailVersion => String.t() | nil,
          :type => String.t() | nil
        }

  field(:checksum)
  field(:colorSampling)
  field(:denseFeatures, type: :list)
  field(:denseGeneralExtraFeatures, as: GoogleApi.ContentWarehouse.V1.Model.DrishtiFeatureExtra)
  field(:externalImageId)
  field(:isAssigned)
  field(:isInstant)
  field(:modelVersion)
  field(:overwriteReason)
  field(:quantizedFeatures)
  field(:score)
  field(:sparseFeatures, as: GoogleApi.ContentWarehouse.V1.Model.DrishtiSparseFeatureData)
  field(:thumbnailSet)
  field(:thumbnailVersion)
  field(:type)
end

defimpl Poison.Decoder, for: GoogleApi.ContentWarehouse.V1.Model.VideoThumbnailsThumbnailScore do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.VideoThumbnailsThumbnailScore.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContentWarehouse.V1.Model.VideoThumbnailsThumbnailScore do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
