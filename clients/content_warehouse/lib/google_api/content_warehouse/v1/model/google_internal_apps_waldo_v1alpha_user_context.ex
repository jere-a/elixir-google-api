# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.GoogleInternalAppsWaldoV1alphaUserContext do
  @moduledoc """
  Additional context about the user's current and/or future availability to give a better understanding of the status ("Working from Zurich").

  ## Attributes

  *   `localTime` (*type:* `GoogleApi.ContentWarehouse.V1.Model.GoogleInternalAppsWaldoV1alphaLocalTimeContext.t`, *default:* `nil`) - Helps to determine the user's local time by providing their current time zone.
  *   `upcomingCommitmentContext` (*type:* `GoogleApi.ContentWarehouse.V1.Model.GoogleInternalAppsWaldoV1alphaUpcomingCommitmentContext.t`, *default:* `nil`) - Information about upcoming events.
  *   `upcomingOoo` (*type:* `GoogleApi.ContentWarehouse.V1.Model.GoogleInternalAppsWaldoV1alphaUpcomingOooContext.t`, *default:* `nil`) - Set if user has upcoming OOO.
  *   `workingElsewhere` (*type:* `GoogleApi.ContentWarehouse.V1.Model.GoogleInternalAppsWaldoV1alphaWorkingElsewhereContext.t`, *default:* `nil`) - Set if the user has a working location. Not just elsewhere (legacy name).
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :localTime =>
            GoogleApi.ContentWarehouse.V1.Model.GoogleInternalAppsWaldoV1alphaLocalTimeContext.t()
            | nil,
          :upcomingCommitmentContext =>
            GoogleApi.ContentWarehouse.V1.Model.GoogleInternalAppsWaldoV1alphaUpcomingCommitmentContext.t()
            | nil,
          :upcomingOoo =>
            GoogleApi.ContentWarehouse.V1.Model.GoogleInternalAppsWaldoV1alphaUpcomingOooContext.t()
            | nil,
          :workingElsewhere =>
            GoogleApi.ContentWarehouse.V1.Model.GoogleInternalAppsWaldoV1alphaWorkingElsewhereContext.t()
            | nil
        }

  field(:localTime,
    as: GoogleApi.ContentWarehouse.V1.Model.GoogleInternalAppsWaldoV1alphaLocalTimeContext
  )

  field(:upcomingCommitmentContext,
    as:
      GoogleApi.ContentWarehouse.V1.Model.GoogleInternalAppsWaldoV1alphaUpcomingCommitmentContext
  )

  field(:upcomingOoo,
    as: GoogleApi.ContentWarehouse.V1.Model.GoogleInternalAppsWaldoV1alphaUpcomingOooContext
  )

  field(:workingElsewhere,
    as: GoogleApi.ContentWarehouse.V1.Model.GoogleInternalAppsWaldoV1alphaWorkingElsewhereContext
  )
end

defimpl Poison.Decoder,
  for: GoogleApi.ContentWarehouse.V1.Model.GoogleInternalAppsWaldoV1alphaUserContext do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.GoogleInternalAppsWaldoV1alphaUserContext.decode(
      value,
      options
    )
  end
end

defimpl Poison.Encoder,
  for: GoogleApi.ContentWarehouse.V1.Model.GoogleInternalAppsWaldoV1alphaUserContext do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
