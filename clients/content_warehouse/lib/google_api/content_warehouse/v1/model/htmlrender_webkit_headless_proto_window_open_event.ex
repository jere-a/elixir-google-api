# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.HtmlrenderWebkitHeadlessProtoWindowOpenEvent do
  @moduledoc """
  Corresponds to a call to window.open(). Note that a WindowOpenEvent will be present whether or not the call was successful.

  ## Attributes

  *   `allowed` (*type:* `boolean()`, *default:* `nil`) - Whether or not the window was allowed to be opened by the popup blocker. Unless user events are created with a render extension this should be false.
  *   `url` (*type:* `String.t`, *default:* `nil`) - The URL for the new window. Note that this is the URL after it has been processed by WebKit, so, for example, relative links passed to window.create() will have been made absolute.
  *   `windowFeatures` (*type:* `String.t`, *default:* `nil`) - Window features passed to window.open().
  *   `windowName` (*type:* `String.t`, *default:* `nil`) - Window name passed to window.open(). If no name is provided this defaults to "_blank".
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :allowed => boolean() | nil,
          :url => String.t() | nil,
          :windowFeatures => String.t() | nil,
          :windowName => String.t() | nil
        }

  field(:allowed)
  field(:url)
  field(:windowFeatures)
  field(:windowName)
end

defimpl Poison.Decoder,
  for: GoogleApi.ContentWarehouse.V1.Model.HtmlrenderWebkitHeadlessProtoWindowOpenEvent do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.HtmlrenderWebkitHeadlessProtoWindowOpenEvent.decode(
      value,
      options
    )
  end
end

defimpl Poison.Encoder,
  for: GoogleApi.ContentWarehouse.V1.Model.HtmlrenderWebkitHeadlessProtoWindowOpenEvent do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
