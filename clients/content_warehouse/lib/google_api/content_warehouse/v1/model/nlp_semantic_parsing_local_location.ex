# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingLocalLocation do
  @moduledoc """
  There are a few types of locations: - Basic locations are sequences of location elements which can be either actual locations or modifiers. E.g., "Mountain View CA 94040" may be the sequence "Mountain View" (an actual location), "CA" (an actual location, and "94040" (a numeric modifier). - Compound locations: these are two locations combined by a joiner. E.g., "Target in Mountain View CA 94040" has the joiner "in" and two basic locations ("Target", and "Mountain View CA 94040"). Note that the definition is recursive, e.g., "Parking garage near Target in Mountain View". - Vicinity location: indicates an area around a certain location. The area can be defined by time or space. E.g., "within 1 hour of Palo Alto", "10 blocks from Union Square", "a few miles from here". Next ID: 14 LINT.IfChange()

  ## Attributes

  *   `basicLocation` (*type:* `GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingLocalBasicLocation.t`, *default:* `nil`) - Exactly one of the location types should be populated.
  *   `compoundLocation` (*type:* `GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingLocalCompoundLocation.t`, *default:* `nil`) - 
  *   `contactLocation` (*type:* `GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingLocalContactLocation.t`, *default:* `nil`) - DEPRECATED. Instead, use LocationElement.contact_location.
  *   `isMerged` (*type:* `boolean()`, *default:* `nil`) - True if the location is merged, for example by CombineLocationsFn.
  *   `locationConstraint` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingLocalLocationConstraint.t)`, *default:* `nil`) - The constraint includes various constraints on the location such as amenities, price range, ratings, or attributes such as new, cheap, etc. These constraints are a part of the location but are not modeled as location elements and are not included in the location text. The (debatable) motivation is that they do not stand on their own and are not an intrinsic part of the location. Note on texts and spans. For a location such as "kid friendly hotels with an indoor pool" we expect to get a basic location with a single location element and two constraints: - For the location element: - Both text and span match "hotels" - For the first constraint: - Both text and span match "kid friendly" - For the second constraint: - Both text and span match "indoor pool" - For the full location: - text: "hotels" - span covers "kid friendly hotels with an indoor pool"
  *   `numBytes` (*type:* `integer()`, *default:* `nil`) - 
  *   `resolvedLocalResult` (*type:* `GoogleApi.ContentWarehouse.V1.Model.QualityDialogManagerLocalResult.t`, *default:* `nil`) - A LocalResult corresponding to the location the user specified, populated by local dialog (generally following a search). This field will only be set if the location is unambiguous, possibly following a series of disambiguation turns of dialog.
  *   `startByte` (*type:* `integer()`, *default:* `nil`) - The span, in the raw input, which corresponds to this location, expressed as a byte offset and byte size. This allows the extraction of the location string as it appears in the raw text.
  *   `text` (*type:* `String.t`, *default:* `nil`) - A string representation of the location. Depending on the annotators and the location itself the string may represent the raw query, the pre-processed query, or something else. As a non-trivial example, for [target address mountain view] we will generate the text "target mountain view" without "address". We make a best-effort to come up with a good string, but make no formal guarantees. You should never present this text directly to outside users.
  *   `userSpecifiedLocation` (*type:* `GoogleApi.ContentWarehouse.V1.Model.KnowledgeVerticalsWeatherProtoUserSpecifiedLocation.t`, *default:* `nil`) - A location info including featureId and lat/lng that uniquely identifies the location the user specified.
  *   `vicinityLocation` (*type:* `GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingLocalVicinityLocation.t`, *default:* `nil`) - 
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :basicLocation =>
            GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingLocalBasicLocation.t() | nil,
          :compoundLocation =>
            GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingLocalCompoundLocation.t() | nil,
          :contactLocation =>
            GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingLocalContactLocation.t() | nil,
          :isMerged => boolean() | nil,
          :locationConstraint =>
            list(
              GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingLocalLocationConstraint.t()
            )
            | nil,
          :numBytes => integer() | nil,
          :resolvedLocalResult =>
            GoogleApi.ContentWarehouse.V1.Model.QualityDialogManagerLocalResult.t() | nil,
          :startByte => integer() | nil,
          :text => String.t() | nil,
          :userSpecifiedLocation =>
            GoogleApi.ContentWarehouse.V1.Model.KnowledgeVerticalsWeatherProtoUserSpecifiedLocation.t()
            | nil,
          :vicinityLocation =>
            GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingLocalVicinityLocation.t() | nil
        }

  field(:basicLocation,
    as: GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingLocalBasicLocation
  )

  field(:compoundLocation,
    as: GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingLocalCompoundLocation
  )

  field(:contactLocation,
    as: GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingLocalContactLocation
  )

  field(:isMerged)

  field(:locationConstraint,
    as: GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingLocalLocationConstraint,
    type: :list
  )

  field(:numBytes)

  field(:resolvedLocalResult,
    as: GoogleApi.ContentWarehouse.V1.Model.QualityDialogManagerLocalResult
  )

  field(:startByte)
  field(:text)

  field(:userSpecifiedLocation,
    as: GoogleApi.ContentWarehouse.V1.Model.KnowledgeVerticalsWeatherProtoUserSpecifiedLocation
  )

  field(:vicinityLocation,
    as: GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingLocalVicinityLocation
  )
end

defimpl Poison.Decoder, for: GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingLocalLocation do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingLocalLocation.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingLocalLocation do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
