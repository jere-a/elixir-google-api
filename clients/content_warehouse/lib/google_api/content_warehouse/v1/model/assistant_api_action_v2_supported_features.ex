# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.AssistantApiActionV2SupportedFeatures do
  @moduledoc """
  The features supported by the ActionV2 protocol. Note that after we move on to ConversationProto for all surfaces we can remove this message.

  ## Attributes

  *   `expressUrlInSettingsResponseSupported` (*type:* `boolean()`, *default:* `nil`) - This flag is used to work around a bug in AGSA 6.8 that got away. The bug prevents users from accessing their shopping list if the URL of the shopping list is not a keep.google.com URL. This will happen when switch the backend that stores the shopping list from Keep to a backend maintained by the Google Shopping Express team.
  *   `reconnectClientInputSupported` (*type:* `boolean()`, *default:* `nil`) - Whether client supports reconnect client input in action v2 payload. This capability is needed to determine if client supports parsing client input payload from actionv2 proto for workflow purposes. See go/personal-workflow. OWNER:nyzstar,vvvemuri.
  *   `simpleActionV2PuntSupported` (*type:* `boolean()`, *default:* `nil`) - Whether or not the surface supports a simple UnsupportedAction instead of a ModalState punt card for rendering. For ActionV2 punt cards, the ModalState extension on the ResourceSet is the canonical way of building punt cards. However, while most all devices support the ActionV2 protocol, not all devices handle the ModalState rendering as part of the ActionV2. For these devices, we want to build a modified ActionV2 for punt cards which omits this ModalState. At present, this is only Android Wear and should not be used for other devices if they support ModalState or Conversation protocol.
  *   `supportedActionType` (*type:* `list(String.t)`, *default:* `nil`) - A list of all the action types supported by the client. These should be the string representation of majel.ActionTypes within "quality/majel/api/proto/action_v2.proto".
  *   `takeScreenshotSupported` (*type:* `boolean()`, *default:* `nil`) - Checks if screenshots can be taken on the client. This field is set on the client from AGSA 7.2 onwards.
  *   `voiceDelightImmersiveUiSupported` (*type:* `boolean()`, *default:* `nil`) - If IMMERSIVE_ACTIONS UiType is supported by the client.
  *   `voiceDelightStickersSupported` (*type:* `boolean()`, *default:* `nil`) - If Voice Delight Stickers are supported by the client. In order to support Voice Delight stickers, the client should know how to extract sticker_url from VoiceDelightSystemInteractionSegment.
  *   `voiceDelightSuggestionsSupported` (*type:* `boolean()`, *default:* `nil`) - If Voice Delight Suggestion Chips are supported by the client. In order to support Voice Delight Suggestion Chips, the client should know how to extract suggestions form VoiceDelightSystemInteraction.ResourceSet.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :expressUrlInSettingsResponseSupported => boolean() | nil,
          :reconnectClientInputSupported => boolean() | nil,
          :simpleActionV2PuntSupported => boolean() | nil,
          :supportedActionType => list(String.t()) | nil,
          :takeScreenshotSupported => boolean() | nil,
          :voiceDelightImmersiveUiSupported => boolean() | nil,
          :voiceDelightStickersSupported => boolean() | nil,
          :voiceDelightSuggestionsSupported => boolean() | nil
        }

  field(:expressUrlInSettingsResponseSupported)
  field(:reconnectClientInputSupported)
  field(:simpleActionV2PuntSupported)
  field(:supportedActionType, type: :list)
  field(:takeScreenshotSupported)
  field(:voiceDelightImmersiveUiSupported)
  field(:voiceDelightStickersSupported)
  field(:voiceDelightSuggestionsSupported)
end

defimpl Poison.Decoder,
  for: GoogleApi.ContentWarehouse.V1.Model.AssistantApiActionV2SupportedFeatures do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.AssistantApiActionV2SupportedFeatures.decode(
      value,
      options
    )
  end
end

defimpl Poison.Encoder,
  for: GoogleApi.ContentWarehouse.V1.Model.AssistantApiActionV2SupportedFeatures do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
