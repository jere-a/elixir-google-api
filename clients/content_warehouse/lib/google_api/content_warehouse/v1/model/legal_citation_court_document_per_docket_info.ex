# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.LegalCitationCourtDocumentPerDocketInfo do
  @moduledoc """
  Information associated with a docket. Note that multiple dockets can be combined and argued as one and produce a single opinion

  ## Attributes

  *   `DocketID` (*type:* `String.t`, *default:* `nil`) - An alpha-numeric (usually, mostly numeric) string used to identify the case by the court
  *   `Petitioner` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.LegalPerson.t)`, *default:* `nil`) - Who is bringing the action? (X in X vs. Y)
  *   `PetitionerCounsel` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.LegalPerson.t)`, *default:* `nil`) - Who represents the petitioner?
  *   `Respondent` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.LegalPerson.t)`, *default:* `nil`) - Who is responding to the action? (Y in X vs. Y)
  *   `RespondentCounsel` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.LegalPerson.t)`, *default:* `nil`) - Who represents the respondent?
  *   `Topic` (*type:* `String.t`, *default:* `nil`) - The "in re" or "matter of" field.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :DocketID => String.t() | nil,
          :Petitioner => list(GoogleApi.ContentWarehouse.V1.Model.LegalPerson.t()) | nil,
          :PetitionerCounsel => list(GoogleApi.ContentWarehouse.V1.Model.LegalPerson.t()) | nil,
          :Respondent => list(GoogleApi.ContentWarehouse.V1.Model.LegalPerson.t()) | nil,
          :RespondentCounsel => list(GoogleApi.ContentWarehouse.V1.Model.LegalPerson.t()) | nil,
          :Topic => String.t() | nil
        }

  field(:DocketID)
  field(:Petitioner, as: GoogleApi.ContentWarehouse.V1.Model.LegalPerson, type: :list)
  field(:PetitionerCounsel, as: GoogleApi.ContentWarehouse.V1.Model.LegalPerson, type: :list)
  field(:Respondent, as: GoogleApi.ContentWarehouse.V1.Model.LegalPerson, type: :list)
  field(:RespondentCounsel, as: GoogleApi.ContentWarehouse.V1.Model.LegalPerson, type: :list)
  field(:Topic)
end

defimpl Poison.Decoder,
  for: GoogleApi.ContentWarehouse.V1.Model.LegalCitationCourtDocumentPerDocketInfo do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.LegalCitationCourtDocumentPerDocketInfo.decode(
      value,
      options
    )
  end
end

defimpl Poison.Encoder,
  for: GoogleApi.ContentWarehouse.V1.Model.LegalCitationCourtDocumentPerDocketInfo do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
