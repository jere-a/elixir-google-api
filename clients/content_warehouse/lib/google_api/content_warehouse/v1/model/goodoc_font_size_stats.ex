# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.GoodocFontSizeStats do
  @moduledoc """
  Statistics about a particular font size (from CharLabel.FontSize) aggregated over a range of symbols

  ## Attributes

  *   `fontId` (*type:* `integer()`, *default:* `nil`) - CharLabel.FontId and FontSize
  *   `fontSize` (*type:* `integer()`, *default:* `nil`) - 
  *   `medianHeight` (*type:* `integer()`, *default:* `nil`) - The measurements are in pixels
  *   `medianLineHeight` (*type:* `integer()`, *default:* `nil`) - top to bottom
  *   `medianLineSpace` (*type:* `integer()`, *default:* `nil`) - bottom to next top in para
  *   `medianLineSpan` (*type:* `integer()`, *default:* `nil`) - top to next top in para
  *   `medianWidth` (*type:* `integer()`, *default:* `nil`) - 
  *   `numLineSpaces` (*type:* `integer()`, *default:* `nil`) - Lines (out of num_lines) that have a successor line within their para
  *   `numLines` (*type:* `integer()`, *default:* `nil`) - Line stats for this font. "top" corresponds to the highest ascender and "bottom" to the lowest descender. num_lines = # lines with > 50% symbols having this font
  *   `numSymbols` (*type:* `integer()`, *default:* `nil`) - 
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :fontId => integer() | nil,
          :fontSize => integer() | nil,
          :medianHeight => integer() | nil,
          :medianLineHeight => integer() | nil,
          :medianLineSpace => integer() | nil,
          :medianLineSpan => integer() | nil,
          :medianWidth => integer() | nil,
          :numLineSpaces => integer() | nil,
          :numLines => integer() | nil,
          :numSymbols => integer() | nil
        }

  field(:fontId)
  field(:fontSize)
  field(:medianHeight)
  field(:medianLineHeight)
  field(:medianLineSpace)
  field(:medianLineSpan)
  field(:medianWidth)
  field(:numLineSpaces)
  field(:numLines)
  field(:numSymbols)
end

defimpl Poison.Decoder, for: GoogleApi.ContentWarehouse.V1.Model.GoodocFontSizeStats do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.GoodocFontSizeStats.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContentWarehouse.V1.Model.GoodocFontSizeStats do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
