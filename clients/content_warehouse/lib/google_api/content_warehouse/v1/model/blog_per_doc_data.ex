# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.BlogPerDocData do
  @moduledoc """
  Additional data for Blog/Posts

  ## Attributes

  *   `blogurlFp` (*type:* `String.t`, *default:* `nil`) - used for blogurl crowding.
  *   `clientSpamminess` (*type:* `integer()`, *default:* `nil`) - This score captures how spammy the client is that the micropost was created with. The higher the score the worse.
  *   `convTree` (*type:* `GoogleApi.ContentWarehouse.V1.Model.BlogsearchConversationTree.t`, *default:* `nil`) - For the threaded conversation view. Only populated in docs with provider type SYNTHETIC_CONVERSATION_DOC.
  *   `copycatScore` (*type:* `integer()`, *default:* `nil`) - 
  *   `docQualityScore` (*type:* `integer()`, *default:* `nil`) - 
  *   `isSyntacticReshare` (*type:* `boolean()`, *default:* `nil`) - A syntactic reshare is a document that is * created from an original and shared with friends and * we detect this resharing property by syntactically parsing the doc. . For example, a retweet is an example of a syntactic_reshare because we can detect that it's a reshare by grepping for "RT @".
  *   `microblogQualityExptData` (*type:* `GoogleApi.ContentWarehouse.V1.Model.Proto2BridgeMessageSet.t`, *default:* `nil`) - Experimental data for quality experiments. This will NOT be populated in prod, but we will use this for experiments.
  *   `numMentions` (*type:* `integer()`, *default:* `nil`) - For replies/reshares. num_mentions = number of times the pattern @foo appears in the document.
  *   `outlinks` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.BlogPerDocDataOutlinks.t)`, *default:* `nil`) - 
  *   `postContentFingerprint` (*type:* `integer()`, *default:* `nil`) - The fingerprint for the body text of the microblog post. It is copied from MicroBlogPost.post_content_fingerprint.
  *   `qualityScore` (*type:* `integer()`, *default:* `nil`) - 
  *   `spamScore` (*type:* `integer()`, *default:* `nil`) - Blog scoring signals.
  *   `universalWhitelisted` (*type:* `boolean()`, *default:* `nil`) - 
  *   `userQualityScore` (*type:* `integer()`, *default:* `nil`) - User and doc quality scores for updates (aka microposts).
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :blogurlFp => String.t() | nil,
          :clientSpamminess => integer() | nil,
          :convTree => GoogleApi.ContentWarehouse.V1.Model.BlogsearchConversationTree.t() | nil,
          :copycatScore => integer() | nil,
          :docQualityScore => integer() | nil,
          :isSyntacticReshare => boolean() | nil,
          :microblogQualityExptData =>
            GoogleApi.ContentWarehouse.V1.Model.Proto2BridgeMessageSet.t() | nil,
          :numMentions => integer() | nil,
          :outlinks => list(GoogleApi.ContentWarehouse.V1.Model.BlogPerDocDataOutlinks.t()) | nil,
          :postContentFingerprint => integer() | nil,
          :qualityScore => integer() | nil,
          :spamScore => integer() | nil,
          :universalWhitelisted => boolean() | nil,
          :userQualityScore => integer() | nil
        }

  field(:blogurlFp)
  field(:clientSpamminess)
  field(:convTree, as: GoogleApi.ContentWarehouse.V1.Model.BlogsearchConversationTree)
  field(:copycatScore)
  field(:docQualityScore)
  field(:isSyntacticReshare)
  field(:microblogQualityExptData, as: GoogleApi.ContentWarehouse.V1.Model.Proto2BridgeMessageSet)
  field(:numMentions)
  field(:outlinks, as: GoogleApi.ContentWarehouse.V1.Model.BlogPerDocDataOutlinks, type: :list)
  field(:postContentFingerprint)
  field(:qualityScore)
  field(:spamScore)
  field(:universalWhitelisted)
  field(:userQualityScore)
end

defimpl Poison.Decoder, for: GoogleApi.ContentWarehouse.V1.Model.BlogPerDocData do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.BlogPerDocData.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContentWarehouse.V1.Model.BlogPerDocData do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
