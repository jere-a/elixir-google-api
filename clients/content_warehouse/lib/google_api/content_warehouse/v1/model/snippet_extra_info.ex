# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.SnippetExtraInfo do
  @moduledoc """


  ## Attributes

  *   `candidateInfo` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.SnippetExtraInfoSnippetCandidateInfo.t)`, *default:* `nil`) - Candidates are ordered by their id.
  *   `containUserQuotes` (*type:* `boolean()`, *default:* `nil`) - Indicates that the snippet candidates all contain uesr quotes.
  *   `containVulgarCandidates` (*type:* `boolean()`, *default:* `nil`) - Indicates if there are any vulgar snippet candidates.
  *   `disableNg3Scoring` (*type:* `boolean()`, *default:* `nil`) - Indicates that SR side should disable the ng3 scoring and soly rely on the SnippetBrain scoring for selecting the final candidate. E.g. this can happen when the offline snippet generation routine is triggered.
  *   `disableQueryFeatures` (*type:* `boolean()`, *default:* `nil`) - Indicates whether the query relevance features is disabled or not in Muppet scoring.
  *   `forceLeadingTextOrMeta` (*type:* `boolean()`, *default:* `nil`) - Indicates to not add any new candidates in SnippetFlow.
  *   `snippetBrainSelectedCandidateIndex` (*type:* `integer()`, *default:* `nil`) - Snippet candidate index selected by snippet brain model. This field will get populated in SnippetFlow in superroot. go/snippets-brain
  *   `snippetsbrainModelInfo` (*type:* `GoogleApi.ContentWarehouse.V1.Model.SnippetExtraInfoSnippetsBrainModelInfo.t`, *default:* `nil`) - SnippetsBrain model information for snippets popup debug.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :candidateInfo =>
            list(GoogleApi.ContentWarehouse.V1.Model.SnippetExtraInfoSnippetCandidateInfo.t())
            | nil,
          :containUserQuotes => boolean() | nil,
          :containVulgarCandidates => boolean() | nil,
          :disableNg3Scoring => boolean() | nil,
          :disableQueryFeatures => boolean() | nil,
          :forceLeadingTextOrMeta => boolean() | nil,
          :snippetBrainSelectedCandidateIndex => integer() | nil,
          :snippetsbrainModelInfo =>
            GoogleApi.ContentWarehouse.V1.Model.SnippetExtraInfoSnippetsBrainModelInfo.t() | nil
        }

  field(:candidateInfo,
    as: GoogleApi.ContentWarehouse.V1.Model.SnippetExtraInfoSnippetCandidateInfo,
    type: :list
  )

  field(:containUserQuotes)
  field(:containVulgarCandidates)
  field(:disableNg3Scoring)
  field(:disableQueryFeatures)
  field(:forceLeadingTextOrMeta)
  field(:snippetBrainSelectedCandidateIndex)

  field(:snippetsbrainModelInfo,
    as: GoogleApi.ContentWarehouse.V1.Model.SnippetExtraInfoSnippetsBrainModelInfo
  )
end

defimpl Poison.Decoder, for: GoogleApi.ContentWarehouse.V1.Model.SnippetExtraInfo do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.SnippetExtraInfo.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContentWarehouse.V1.Model.SnippetExtraInfo do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
