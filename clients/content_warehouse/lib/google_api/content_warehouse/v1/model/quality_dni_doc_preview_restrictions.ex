# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.QualityDniDocPreviewRestrictions do
  @moduledoc """
  Set of per-document markup restrictions based on go/eucd-indexing-design. Used for EUCD and global preview compliance. Next ID: 20

  ## Attributes

  *   `bylineDateSecs` (*type:* `String.t`, *default:* `nil`) - Publish date set by webmaster. See detailed description here: http://shortn/_1eC0zzjR7k. Note that this will currently only be set for canonical documents where byline date could be extracted.
  *   `crawlTsUsec` (*type:* `String.t`, *default:* `nil`) - The time that the info in this attachment was computed during crawl, in microseconds.
  *   `extendedNewsPreviewsDomain` (*type:* `GoogleApi.ContentWarehouse.V1.Model.QualityDniExtendedNewsPreviews.t`, *default:* `nil`) - Whether this document comes from a domain that is affected by Extended News Previews (ENP) and its status (approved/rejected).
  *   `faviconDisplay` (*type:* `String.t`, *default:* `nil`) - Whether the favicon for a given domain should be displayed. FAVICON_DISPLAY_UNSPECIFIED - Display the favicon DISABLE_FAVICON - the favicon should not be rendered by the feature
  *   `firstseenDateSecs` (*type:* `integer()`, *default:* `nil`) - Firstseen date populated by indexing. It works as fallback to byline_date if it doesn't exist. Note that this will currently only be set for canonical documents where firstseen date could be populated.
  *   `isAmp` (*type:* `boolean()`, *default:* `nil`) - Only be true when the page itself is an AMP page. For paired AMP, the canonical page will have this bit as false.
  *   `isEucdDomain` (*type:* `boolean()`, *default:* `nil`) - 
  *   `maxSnippetLength` (*type:* `integer()`, *default:* `nil`) - The max number of snippet characters allowed. Based on document markup. No limit if value is less than 0, Google could use any length of snippets. Default value 0 is the strictest restriction, to avoid violating mistakenly If not set, there is no snippet length policy to enforce. Features must first check has_max_snippet_length to avoid applying an overly strict policy.
  *   `maxSnippetLengthFromPublisher` (*type:* `integer()`, *default:* `nil`) - Same as the max_snippet_length, max_thumbnail_size, max_video_preview_secs listed above. But values are based on publisher's preferences from Search Console's robots meta tag tool.
  *   `maxSnippetLengthPublisherDefault` (*type:* `integer()`, *default:* `nil`) - 
  *   `maxThumbnailSize` (*type:* `String.t`, *default:* `nil`) - The max thumbnail size allowed. Based on document markup Default value NONE is the strictest restriction, to avoid violating mistakenly. If not set, there is no thumbnail policy to enforce.
  *   `maxThumbnailSizeFromPublisher` (*type:* `String.t`, *default:* `nil`) - 
  *   `maxThumbnailSizePublisherDefault` (*type:* `integer()`, *default:* `nil`) - 
  *   `maxVideoPreviewSecs` (*type:* `integer()`, *default:* `nil`) - The max seconds of video preview allowed. Based on document markup. No limit if value is less than 0, Google could show any seconds of video. Default value 0 is the strictest restriction, to avoid violating mistakenly If not set, there is no preview length policy to enforce. Features must first check has_max_video_preview_secs to avoid applying an overly strict policy.
  *   `maxVideoPreviewSecsFromPublisher` (*type:* `integer()`, *default:* `nil`) - 
  *   `maxVideoPreviewSecsPublisherDefault` (*type:* `integer()`, *default:* `nil`) - 
  *   `snippetLengthSource` (*type:* `String.t`, *default:* `nil`) - Source of snippet length.
  *   `thumbnailSizeSource` (*type:* `String.t`, *default:* `nil`) - Source of thumbnail size.
  *   `videoPreviewSecsSource` (*type:* `String.t`, *default:* `nil`) - Source of video preview seconds.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :bylineDateSecs => String.t() | nil,
          :crawlTsUsec => String.t() | nil,
          :extendedNewsPreviewsDomain =>
            GoogleApi.ContentWarehouse.V1.Model.QualityDniExtendedNewsPreviews.t() | nil,
          :faviconDisplay => String.t() | nil,
          :firstseenDateSecs => integer() | nil,
          :isAmp => boolean() | nil,
          :isEucdDomain => boolean() | nil,
          :maxSnippetLength => integer() | nil,
          :maxSnippetLengthFromPublisher => integer() | nil,
          :maxSnippetLengthPublisherDefault => integer() | nil,
          :maxThumbnailSize => String.t() | nil,
          :maxThumbnailSizeFromPublisher => String.t() | nil,
          :maxThumbnailSizePublisherDefault => integer() | nil,
          :maxVideoPreviewSecs => integer() | nil,
          :maxVideoPreviewSecsFromPublisher => integer() | nil,
          :maxVideoPreviewSecsPublisherDefault => integer() | nil,
          :snippetLengthSource => String.t() | nil,
          :thumbnailSizeSource => String.t() | nil,
          :videoPreviewSecsSource => String.t() | nil
        }

  field(:bylineDateSecs)
  field(:crawlTsUsec)

  field(:extendedNewsPreviewsDomain,
    as: GoogleApi.ContentWarehouse.V1.Model.QualityDniExtendedNewsPreviews
  )

  field(:faviconDisplay)
  field(:firstseenDateSecs)
  field(:isAmp)
  field(:isEucdDomain)
  field(:maxSnippetLength)
  field(:maxSnippetLengthFromPublisher)
  field(:maxSnippetLengthPublisherDefault)
  field(:maxThumbnailSize)
  field(:maxThumbnailSizeFromPublisher)
  field(:maxThumbnailSizePublisherDefault)
  field(:maxVideoPreviewSecs)
  field(:maxVideoPreviewSecsFromPublisher)
  field(:maxVideoPreviewSecsPublisherDefault)
  field(:snippetLengthSource)
  field(:thumbnailSizeSource)
  field(:videoPreviewSecsSource)
end

defimpl Poison.Decoder, for: GoogleApi.ContentWarehouse.V1.Model.QualityDniDocPreviewRestrictions do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.QualityDniDocPreviewRestrictions.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContentWarehouse.V1.Model.QualityDniDocPreviewRestrictions do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
