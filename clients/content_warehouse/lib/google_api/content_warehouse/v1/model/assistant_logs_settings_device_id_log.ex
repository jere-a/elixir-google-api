# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.AssistantLogsSettingsDeviceIdLog do
  @moduledoc """
  The logging-version of DeviceId proto, which identifies a device. This mirrors cs/google3/assistant/api/core_types/device_type.proto?q=symbol:DeviceId Next ID: 9

  ## Attributes

  *   `agsaClientInstanceId` (*type:* `String.t`, *default:* `nil`) - The client_instance_id on devices with GSA. See 'client_instance_field' in go/androidids.
  *   `alloDeviceId` (*type:* `String.t`, *default:* `nil`) - Allo Id. Corresponds to the GBotRequest.Sender.sender. This ID type should be deprecated by now, yet we've observed it serving prod traffic in GB.
  *   `canonicalDeviceId` (*type:* `String.t`, *default:* `nil`) - A unique device ID for Assistant devices as proposed by go/ocelot-team.
  *   `castDeviceId` (*type:* `String.t`, *default:* `nil`) - If set, indicates that the device is a cast device, and contains the UUID of the cast device. Corresponds to the device_id field of the CastDevice proto.
  *   `clientInstanceId` (*type:* `String.t`, *default:* `nil`) - DUSI (go/dusi) is used as the identifier here. This identifier is unique to the user and device. This will help identify which device or application the user's request originated from. This is not to be confused with the client_instance_id that android devices provide. This is currently used by surfaces that use the assistant-legacy-nexus and assistant-legacy-clockwork pipelines. DUSI is created and set in S3. This field is only filled for GAIA requests.
  *   `deviceConfigId` (*type:* `String.t`, *default:* `nil`) - The unique DeviceConfig to the specific third party device. It is also used by Android Auto Embedded first party device. See go/opa-ids.
  *   `homeGraphDeviceId` (*type:* `String.t`, *default:* `nil`) - The unique device ID for HomeGraph devices. This is the HomeGraph ID, created when the device is registered into HomeGraph. It is immutable for the same device unless it is completely deleted and recreated. See go/home-graph for details. }
  *   `libassistantDeviceId` (*type:* `String.t`, *default:* `nil`) - The unique ID for libassistant based devices.
  *   `opaIosDeviceId` (*type:* `String.t`, *default:* `nil`) - The unique device ID for the Assistant App on iOS. See go/opa-ios-design for details.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :agsaClientInstanceId => String.t() | nil,
          :alloDeviceId => String.t() | nil,
          :canonicalDeviceId => String.t() | nil,
          :castDeviceId => String.t() | nil,
          :clientInstanceId => String.t() | nil,
          :deviceConfigId => String.t() | nil,
          :homeGraphDeviceId => String.t() | nil,
          :libassistantDeviceId => String.t() | nil,
          :opaIosDeviceId => String.t() | nil
        }

  field(:agsaClientInstanceId)
  field(:alloDeviceId)
  field(:canonicalDeviceId)
  field(:castDeviceId)
  field(:clientInstanceId)
  field(:deviceConfigId)
  field(:homeGraphDeviceId)
  field(:libassistantDeviceId)
  field(:opaIosDeviceId)
end

defimpl Poison.Decoder, for: GoogleApi.ContentWarehouse.V1.Model.AssistantLogsSettingsDeviceIdLog do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.AssistantLogsSettingsDeviceIdLog.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContentWarehouse.V1.Model.AssistantLogsSettingsDeviceIdLog do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
