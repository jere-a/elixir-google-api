# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.ImageRepositoryS3LangIdSignals do
  @moduledoc """
  Next Tag: 10

  ## Attributes

  *   `containsSpeech` (*type:* `boolean()`, *default:* `nil`) - Whether this audio chunk has speech or not.
  *   `debuggingInfo` (*type:* `GoogleApi.ContentWarehouse.V1.Model.ImageRepositoryS3LangIdDebuggingInfo.t`, *default:* `nil`) - 
  *   `endSec` (*type:* `String.t`, *default:* `nil`) - 
  *   `langidResult` (*type:* `GoogleApi.ContentWarehouse.V1.Model.SpeechS3LanguageIdentificationResult.t`, *default:* `nil`) - S3 langID result. We keep langid_result even if contains_speech = false.
  *   `languageIdentification` (*type:* `GoogleApi.ContentWarehouse.V1.Model.VideoTimedtextS4ALIResults.t`, *default:* `nil`) - Converted version of the langid_result field, so that we have the YT compatible version of the langID result.
  *   `modelVersion` (*type:* `String.t`, *default:* `nil`) - The version of the model used for S3 LangID service.
  *   `speechFrameCount` (*type:* `integer()`, *default:* `nil`) - 
  *   `startSec` (*type:* `String.t`, *default:* `nil`) - The audio chunk which corresponds to this langID result expressed as a start_sec and end_sec.
  *   `totalFrameCount` (*type:* `integer()`, *default:* `nil`) - Count the number of total frames in the audio chunk as well as the number of speech frames.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :containsSpeech => boolean() | nil,
          :debuggingInfo =>
            GoogleApi.ContentWarehouse.V1.Model.ImageRepositoryS3LangIdDebuggingInfo.t() | nil,
          :endSec => String.t() | nil,
          :langidResult =>
            GoogleApi.ContentWarehouse.V1.Model.SpeechS3LanguageIdentificationResult.t() | nil,
          :languageIdentification =>
            GoogleApi.ContentWarehouse.V1.Model.VideoTimedtextS4ALIResults.t() | nil,
          :modelVersion => String.t() | nil,
          :speechFrameCount => integer() | nil,
          :startSec => String.t() | nil,
          :totalFrameCount => integer() | nil
        }

  field(:containsSpeech)

  field(:debuggingInfo,
    as: GoogleApi.ContentWarehouse.V1.Model.ImageRepositoryS3LangIdDebuggingInfo
  )

  field(:endSec)

  field(:langidResult,
    as: GoogleApi.ContentWarehouse.V1.Model.SpeechS3LanguageIdentificationResult
  )

  field(:languageIdentification,
    as: GoogleApi.ContentWarehouse.V1.Model.VideoTimedtextS4ALIResults
  )

  field(:modelVersion)
  field(:speechFrameCount)
  field(:startSec)
  field(:totalFrameCount)
end

defimpl Poison.Decoder, for: GoogleApi.ContentWarehouse.V1.Model.ImageRepositoryS3LangIdSignals do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.ImageRepositoryS3LangIdSignals.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContentWarehouse.V1.Model.ImageRepositoryS3LangIdSignals do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
