# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.KnowledgeAnswersIntentQueryImpliedEntity do
  @moduledoc """
  Signals for $QRefImpliedEntities that are merged into entity arguments during parsing.

  ## Attributes

  *   `annotatedSpan` (*type:* `String.t`, *default:* `nil`) - A copy of the span of canonical (raw) parser input text corresponding to this annotation. Copied from QRefAnnotation.annotated_span.
  *   `evalData` (*type:* `GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingAnnotationEvalData.t`, *default:* `nil`) - This field is used inside Aqua for evaluation purposes.
  *   `isUngroundedValue` (*type:* `boolean()`, *default:* `nil`) - TODO (b/143536264): Create a new ImpliedTokens message and remove this. Whether the implied entity is ungrounded value, set to true when the entity doesn't have a KG mid.
  *   `mid` (*type:* `String.t`, *default:* `nil`) - The KG mid of the implied entity.
  *   `qrefConfidenceScore` (*type:* `number()`, *default:* `nil`) - The QRef confidence (in [0, 1]) of the entity being correctly annotated.
  *   `shoppingIds` (*type:* `GoogleApi.ContentWarehouse.V1.Model.KnowledgeAnswersIntentQueryShoppingIds.t`, *default:* `nil`) - All ShoppingIds for this implied entity that need to be copied to IntentQuery (FunctionCall) if this implied entity is used in intent generation. See go/iql-shopping-ids for details.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :annotatedSpan => String.t() | nil,
          :evalData =>
            GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingAnnotationEvalData.t() | nil,
          :isUngroundedValue => boolean() | nil,
          :mid => String.t() | nil,
          :qrefConfidenceScore => number() | nil,
          :shoppingIds =>
            GoogleApi.ContentWarehouse.V1.Model.KnowledgeAnswersIntentQueryShoppingIds.t() | nil
        }

  field(:annotatedSpan)
  field(:evalData, as: GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingAnnotationEvalData)
  field(:isUngroundedValue)
  field(:mid)
  field(:qrefConfidenceScore)

  field(:shoppingIds,
    as: GoogleApi.ContentWarehouse.V1.Model.KnowledgeAnswersIntentQueryShoppingIds
  )
end

defimpl Poison.Decoder,
  for: GoogleApi.ContentWarehouse.V1.Model.KnowledgeAnswersIntentQueryImpliedEntity do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.KnowledgeAnswersIntentQueryImpliedEntity.decode(
      value,
      options
    )
  end
end

defimpl Poison.Encoder,
  for: GoogleApi.ContentWarehouse.V1.Model.KnowledgeAnswersIntentQueryImpliedEntity do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
