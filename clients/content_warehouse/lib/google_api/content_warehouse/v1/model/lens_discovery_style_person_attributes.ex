# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.LensDiscoveryStylePersonAttributes do
  @moduledoc """
  This message holds person attributes from the Person Interpreter model (go/person-interpreter) and the Style AI Iconic Person Scorer (go/styleai-indexing-g3doc#iconic-person-scorer) for the most iconic person in a style image. Discretization of float values is recommended by CDS for cheaper and more efficient storage. Next ID: 11

  ## Attributes

  *   `discretizedFaceVisibilityScore` (*type:* `integer()`, *default:* `nil`) - The visibility of the face of the most iconic person in the image discretized into range [0, 100].
  *   `discretizedFemaleConfidence` (*type:* `integer()`, *default:* `nil`) - 
  *   `discretizedMaleConfidence` (*type:* `integer()`, *default:* `nil`) - Male and female confidence scores are discretized into the [0, 100] range.
  *   `discretizedPredictedAge` (*type:* `integer()`, *default:* `nil`) - Age prediction is rounded to the first decimal place and multiplied by 10 (e.g. 12.3 -> 123). *** Not populated in Amarna for legal reasons. ***
  *   `discretizedVisualSaliencyScore` (*type:* `integer()`, *default:* `nil`) - The area ratio of the most iconic person to the whole image discretized into range [0, 100].
  *   `personBoundingBox` (*type:* `GoogleApi.ContentWarehouse.V1.Model.LensDiscoveryStyleBoundingBox.t`, *default:* `nil`) - Bounding box of the most iconic person in the image.
  *   `personVisibilityScores` (*type:* `GoogleApi.ContentWarehouse.V1.Model.LensDiscoveryStylePersonAttributesPersonVisibilityScores.t`, *default:* `nil`) - 
  *   `predictedAgeBucket` (*type:* `String.t`, *default:* `nil`) - Bucketed version of the predicted age.
  *   `version` (*type:* `String.t`, *default:* `nil`) - 
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :discretizedFaceVisibilityScore => integer() | nil,
          :discretizedFemaleConfidence => integer() | nil,
          :discretizedMaleConfidence => integer() | nil,
          :discretizedPredictedAge => integer() | nil,
          :discretizedVisualSaliencyScore => integer() | nil,
          :personBoundingBox =>
            GoogleApi.ContentWarehouse.V1.Model.LensDiscoveryStyleBoundingBox.t() | nil,
          :personVisibilityScores =>
            GoogleApi.ContentWarehouse.V1.Model.LensDiscoveryStylePersonAttributesPersonVisibilityScores.t()
            | nil,
          :predictedAgeBucket => String.t() | nil,
          :version => String.t() | nil
        }

  field(:discretizedFaceVisibilityScore)
  field(:discretizedFemaleConfidence)
  field(:discretizedMaleConfidence)
  field(:discretizedPredictedAge)
  field(:discretizedVisualSaliencyScore)
  field(:personBoundingBox, as: GoogleApi.ContentWarehouse.V1.Model.LensDiscoveryStyleBoundingBox)

  field(:personVisibilityScores,
    as:
      GoogleApi.ContentWarehouse.V1.Model.LensDiscoveryStylePersonAttributesPersonVisibilityScores
  )

  field(:predictedAgeBucket)
  field(:version)
end

defimpl Poison.Decoder,
  for: GoogleApi.ContentWarehouse.V1.Model.LensDiscoveryStylePersonAttributes do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.LensDiscoveryStylePersonAttributes.decode(value, options)
  end
end

defimpl Poison.Encoder,
  for: GoogleApi.ContentWarehouse.V1.Model.LensDiscoveryStylePersonAttributes do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
