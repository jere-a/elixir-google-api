# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingQRefAnnotation do
  @moduledoc """
  The QRefAnnotator annotates spans of input with freebase-ids and collection-information. NEXT ID TO USE: 41

  ## Attributes

  *   `globalProductClusterId` (*type:* `list(String.t)`, *default:* `nil`) - The shopping global product cluster id(s) of the annotated entity (in KG, the key(s) of type /business/variant_cluster).
  *   `gaiaId` (*type:* `String.t`, *default:* `nil`) - The Gaia ID for this entity. This is populated generally for people and businesses.
  *   `sourceTypeList` (*type:* `GoogleApi.ContentWarehouse.V1.Model.CopleySourceTypeList.t`, *default:* `nil`) - If the annotation was created by using personal data, we record the provenance for that data here.
  *   `confidenceScore` (*type:* `float()`, *default:* `nil`) - The confidence (in [0, 1]) of the entity being correctly annotated.
  *   `subCluster` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingQRefAnnotationSubCluster.t)`, *default:* `nil`) - 
  *   `referenceScore` (*type:* `number()`, *default:* `nil`) - The confidence (in [0, 1]) that the annotation is reference that implies another entity. (eg "my hotel" in "navigate to my hotel" is reference to explicit hotel from user hotel reservation).
  *   `displayName` (*type:* `String.t`, *default:* `nil`) - Copy the display info. This can be used by annotators to give grammars a canonical name for an entity. For instance, the media grammar could use it to output the same canonical name for "rock music" and "rock".
  *   `entitySourceData` (*type:* `GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingEntitySourceData.t`, *default:* `nil`) - Holds information about the backends which contributed to this entity.
  *   `mdvcVerticals` (*type:* `list(String.t)`, *default:* `nil`) - The set of verticals this summary node belongs to.
  *   `deprecatedEquivalentMids` (*type:* `list(String.t)`, *default:* `nil`) - DEPRECATED: Equivalent ids (e.g. de-duped mids) for this entity.
  *   `clusterId` (*type:* `String.t`, *default:* `nil`) - The ID of the cluster (set entity) this entity belongs to.
  *   `deprecatedMdvcSupportingMid` (*type:* `list(String.t)`, *default:* `nil`) - DEPRECATED: Higher level id's that support the given id. This field has been deprecated in favor of related_entity. b/27363861
  *   `productLineId` (*type:* `list(String.t)`, *default:* `nil`) - The shopping product line id(s) of the annotated /business/shopping_product_line entity.
  *   `locationType` (*type:* `integer()`, *default:* `nil`) - The location type of the entity, as an int32 representing a TypeCategory enum value. For example, this could be TYPE_LOCALITY (37) or TYPE_COUNTRY (33). We store this type as an int because including FeatureProto would cause java/com/google/ads/adh/pipeline/bigquery:ProtoCatalog to become too large, resulting in OOM errors.
  *   `mergedImpliedEntity` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingQRefAnnotation.t)`, *default:* `nil`) - A list of any implied entities merged into this annotation during parsing. Order is derivation-dependent.
  *   `isMdvcDimension` (*type:* `boolean()`, *default:* `nil`) - True if this entity is an mdvc dimension of some other annotated entity. Only included if the QRefAnnotator is initialised with include_annotated_relationships.
  *   `clusterSiblingMid` (*type:* `list(String.t)`, *default:* `nil`) - The set of mids that are members of the same cluster.
  *   `relatedEntity` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingRelatedEntity.t)`, *default:* `nil`) - Mids related to the given entity
  *   `lowConfidence` (*type:* `boolean()`, *default:* `nil`) - Whether this entity is low confidence. Not used. Currently whitelisted entities below min_confidence threshold are marked as low confidence and maybe not trusted by downstreams.
  *   `addedByCloseAnswers` (*type:* `boolean()`, *default:* `nil`) - Whether this qref annotation was created by CloseAnswers on Postref. Annotations of this type don't correspond to a particular mention of the entity on the query but rather to an interpretation of the full query.
  *   `location` (*type:* `GoogleApi.ContentWarehouse.V1.Model.GeostorePointProto.t`, *default:* `nil`) - The center point of this location. This is either directly provided by the FeatureProto.center field or the centroid using the points of the polygon in the FeatureProto.
  *   `collectionMembership` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingQRefAnnotationCollectionMembership.t)`, *default:* `nil`) - 
  *   `otherMetadata` (*type:* `GoogleApi.ContentWarehouse.V1.Model.Proto2BridgeMessageSet.t`, *default:* `nil`) - Metadata to be passed through from the AnnotationContext API.
  *   `merlotCategory` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingQRefAnnotationMerlotCategoryData.t)`, *default:* `nil`) - 
  *   `resolutionScore` (*type:* `number()`, *default:* `nil`) - The confidence (in [0, 1]) that the annotation was created on an implicit mention (eg my hotel) as opposed to an explicit mention (eg: the westin copley square)
  *   `isNimbleAnnotation` (*type:* `boolean()`, *default:* `nil`) - Whether this annotation originates from nimble. (go/nimble-annotator)
  *   `entityNumber` (*type:* `integer()`, *default:* `nil`) - The index of the entity from which this annotation is obtained, within the WebrefEntities message in the interpretation defined by interpretation_number, above.
  *   `personalSummaryNodeChild` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingQRefAnnotation.t)`, *default:* `nil`) - Personal summary nodes are compound entities made up of entities and their attributes, where the entities can be compound too. E.g., "my father's mother" can have a summary node annotation of "Mother(Father(Myself))".
  *   `mdvcChild` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingQRefAnnotation.t)`, *default:* `nil`) - Nested annotations that represent subparts of the given mdvc full annotation. An MDVC full annotation is outputted as the summary node as the root node, and all the children of it as leaves (mdvc_child). QRef outputs a graph of relationships between the mdvc enties, and for mdvc full the aquatator nests the relevant children inside the summary node's proto.
  *   `entityRelationship` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingQRefAnnotationEntityRelationship.t)`, *default:* `nil`) - The relationship information from QRef. Only included if the QRefAnnotator is initialised with include_annotated_relationships.
  *   `annotatedSpan` (*type:* `String.t`, *default:* `nil`) - A copy of the span of canonical (raw) parser input text corresponding to this annotation.
  *   `interpretationNumber` (*type:* `integer()`, *default:* `nil`) - The index of the QueryJoin interpretation from which this annotation was obtained. This field is not used for entities coming from low-confidence annotations, since such entities are not included in any interpretation.
  *   `freebaseMid` (*type:* `String.t`, *default:* `nil`) - The mid of the entity in freebase associated with this span.
  *   `attributeId` (*type:* `String.t`, *default:* `nil`) - Attribute ID of a personal_summary_node_child.
  *   `clusterSetScore` (*type:* `float()`, *default:* `nil`) - Cluster set qref confidence score.
  *   `oysterId` (*type:* `GoogleApi.ContentWarehouse.V1.Model.GeostoreFeatureIdProto.t`, *default:* `nil`) - The geo oyster_id of the entity, relevant only for locations. Only included if the QRefAnnotator is initialised with include_oyster_id.
  *   `matchedLightweightToken` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.RepositoryWebrefLightweightTokensMatchedLightweightToken.t)`, *default:* `nil`) - 
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :globalProductClusterId => list(String.t()) | nil,
          :gaiaId => String.t() | nil,
          :sourceTypeList => GoogleApi.ContentWarehouse.V1.Model.CopleySourceTypeList.t() | nil,
          :confidenceScore => float() | nil,
          :subCluster =>
            list(
              GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingQRefAnnotationSubCluster.t()
            )
            | nil,
          :referenceScore => number() | nil,
          :displayName => String.t() | nil,
          :entitySourceData =>
            GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingEntitySourceData.t() | nil,
          :mdvcVerticals => list(String.t()) | nil,
          :deprecatedEquivalentMids => list(String.t()) | nil,
          :clusterId => String.t() | nil,
          :deprecatedMdvcSupportingMid => list(String.t()) | nil,
          :productLineId => list(String.t()) | nil,
          :locationType => integer() | nil,
          :mergedImpliedEntity =>
            list(GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingQRefAnnotation.t()) | nil,
          :isMdvcDimension => boolean() | nil,
          :clusterSiblingMid => list(String.t()) | nil,
          :relatedEntity =>
            list(GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingRelatedEntity.t()) | nil,
          :lowConfidence => boolean() | nil,
          :addedByCloseAnswers => boolean() | nil,
          :location => GoogleApi.ContentWarehouse.V1.Model.GeostorePointProto.t() | nil,
          :collectionMembership =>
            list(
              GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingQRefAnnotationCollectionMembership.t()
            )
            | nil,
          :otherMetadata => GoogleApi.ContentWarehouse.V1.Model.Proto2BridgeMessageSet.t() | nil,
          :merlotCategory =>
            list(
              GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingQRefAnnotationMerlotCategoryData.t()
            )
            | nil,
          :resolutionScore => number() | nil,
          :isNimbleAnnotation => boolean() | nil,
          :entityNumber => integer() | nil,
          :personalSummaryNodeChild =>
            list(GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingQRefAnnotation.t()) | nil,
          :mdvcChild =>
            list(GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingQRefAnnotation.t()) | nil,
          :entityRelationship =>
            list(
              GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingQRefAnnotationEntityRelationship.t()
            )
            | nil,
          :annotatedSpan => String.t() | nil,
          :interpretationNumber => integer() | nil,
          :freebaseMid => String.t() | nil,
          :attributeId => String.t() | nil,
          :clusterSetScore => float() | nil,
          :oysterId => GoogleApi.ContentWarehouse.V1.Model.GeostoreFeatureIdProto.t() | nil,
          :matchedLightweightToken =>
            list(
              GoogleApi.ContentWarehouse.V1.Model.RepositoryWebrefLightweightTokensMatchedLightweightToken.t()
            )
            | nil
        }

  field(:globalProductClusterId, type: :list)
  field(:gaiaId)
  field(:sourceTypeList, as: GoogleApi.ContentWarehouse.V1.Model.CopleySourceTypeList)
  field(:confidenceScore)

  field(:subCluster,
    as: GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingQRefAnnotationSubCluster,
    type: :list
  )

  field(:referenceScore)
  field(:displayName)

  field(:entitySourceData,
    as: GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingEntitySourceData
  )

  field(:mdvcVerticals, type: :list)
  field(:deprecatedEquivalentMids, type: :list)
  field(:clusterId)
  field(:deprecatedMdvcSupportingMid, type: :list)
  field(:productLineId, type: :list)
  field(:locationType)

  field(:mergedImpliedEntity,
    as: GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingQRefAnnotation,
    type: :list
  )

  field(:isMdvcDimension)
  field(:clusterSiblingMid, type: :list)

  field(:relatedEntity,
    as: GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingRelatedEntity,
    type: :list
  )

  field(:lowConfidence)
  field(:addedByCloseAnswers)
  field(:location, as: GoogleApi.ContentWarehouse.V1.Model.GeostorePointProto)

  field(:collectionMembership,
    as: GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingQRefAnnotationCollectionMembership,
    type: :list
  )

  field(:otherMetadata, as: GoogleApi.ContentWarehouse.V1.Model.Proto2BridgeMessageSet)

  field(:merlotCategory,
    as: GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingQRefAnnotationMerlotCategoryData,
    type: :list
  )

  field(:resolutionScore)
  field(:isNimbleAnnotation)
  field(:entityNumber)

  field(:personalSummaryNodeChild,
    as: GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingQRefAnnotation,
    type: :list
  )

  field(:mdvcChild,
    as: GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingQRefAnnotation,
    type: :list
  )

  field(:entityRelationship,
    as: GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingQRefAnnotationEntityRelationship,
    type: :list
  )

  field(:annotatedSpan)
  field(:interpretationNumber)
  field(:freebaseMid)
  field(:attributeId)
  field(:clusterSetScore)
  field(:oysterId, as: GoogleApi.ContentWarehouse.V1.Model.GeostoreFeatureIdProto)

  field(:matchedLightweightToken,
    as:
      GoogleApi.ContentWarehouse.V1.Model.RepositoryWebrefLightweightTokensMatchedLightweightToken,
    type: :list
  )
end

defimpl Poison.Decoder, for: GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingQRefAnnotation do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingQRefAnnotation.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingQRefAnnotation do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
