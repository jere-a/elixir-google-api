# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.NlxDataSchemaTokenDependencyEdge do
  @moduledoc """
  DEPRECATED: PLEASE USE dependency_head AND dependency_label FIELDS. One edge of the dependency parse.

  ## Attributes

  *   `deprel` (*type:* `String.t`, *default:* `nil`) - Relation label for this dependency. Generally this should be using the Universal Dependencies label format, using fine- grained labels like nsubj:pass.
  *   `head` (*type:* `GoogleApi.ContentWarehouse.V1.Model.MultiscalePointerIndex.t`, *default:* `nil`) - The head of this token. By default, the root of the sentence is its own head; it should also have deprel as 'root'.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :deprel => String.t() | nil,
          :head => GoogleApi.ContentWarehouse.V1.Model.MultiscalePointerIndex.t() | nil
        }

  field(:deprel)
  field(:head, as: GoogleApi.ContentWarehouse.V1.Model.MultiscalePointerIndex)
end

defimpl Poison.Decoder, for: GoogleApi.ContentWarehouse.V1.Model.NlxDataSchemaTokenDependencyEdge do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.NlxDataSchemaTokenDependencyEdge.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContentWarehouse.V1.Model.NlxDataSchemaTokenDependencyEdge do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
