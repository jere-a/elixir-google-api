# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.GeostoreOntologyRawGConceptInstanceProto do
  @moduledoc """
  A RawGConceptInstanceProto contains all data required by both internal and external clients. We store the 'public' data in a GConceptInstanceProto and the 'private' data inside of RawGConceptInstanceProto. NOTE: this doesn't really match the design we want anymore. Please talk to the Geo Schema team if you are planning to make use of the "private" fields below.

  ## Attributes

  *   `instance` (*type:* `GoogleApi.ContentWarehouse.V1.Model.GeostoreGConceptInstanceProto.t`, *default:* `nil`) - This is the 'public' section of the GConceptInstance.
  *   `isAddedByEdit` (*type:* `boolean()`, *default:* `nil`) - ** DEPRECATED ** Was this GConcept explicitly added by an edit? Examples of gconcepts not added by edits include those inferred through geo ontology and those mapped from legacy category forms by the feature updater. Note that it is possible for both is_added_by_edit and is_inferred to be true - it means this gconcept is added by an edit and there is also another more fine-grained gconcept added by an edit.
  *   `isInferred` (*type:* `boolean()`, *default:* `nil`) - RESERVED
  *   `provider` (*type:* `String.t`, *default:* `nil`) - ** DEPRECATED ** These two fields combined describe the source of a GConceptInstance. They are based on geostore/base/proto/datasourceprovider.proto. Their use has been deprecated. Use the FieldMetadataProto inside instance instead.
  *   `sourceDataset` (*type:* `String.t`, *default:* `nil`) - 
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :instance =>
            GoogleApi.ContentWarehouse.V1.Model.GeostoreGConceptInstanceProto.t() | nil,
          :isAddedByEdit => boolean() | nil,
          :isInferred => boolean() | nil,
          :provider => String.t() | nil,
          :sourceDataset => String.t() | nil
        }

  field(:instance, as: GoogleApi.ContentWarehouse.V1.Model.GeostoreGConceptInstanceProto)
  field(:isAddedByEdit)
  field(:isInferred)
  field(:provider)
  field(:sourceDataset)
end

defimpl Poison.Decoder,
  for: GoogleApi.ContentWarehouse.V1.Model.GeostoreOntologyRawGConceptInstanceProto do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.GeostoreOntologyRawGConceptInstanceProto.decode(
      value,
      options
    )
  end
end

defimpl Poison.Encoder,
  for: GoogleApi.ContentWarehouse.V1.Model.GeostoreOntologyRawGConceptInstanceProto do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
