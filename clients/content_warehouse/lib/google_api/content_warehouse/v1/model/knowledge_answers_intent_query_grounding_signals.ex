# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.KnowledgeAnswersIntentQueryGroundingSignals do
  @moduledoc """
  Grounding-related signals to be propagated down stream. Next ID: 14

  ## Attributes

  *   `addedByGrounding` (*type:* `boolean()`, *default:* `nil`) - 
  *   `groundabilityScore` (*type:* `float()`, *default:* `nil`) - Score indicating how grounded the intent is, populated by the Grounding Box, used by the pre-fulfillment ranker, see http://go/prefulfillment-ranker.
  *   `numConstraints` (*type:* `float()`, *default:* `nil`) - Sum of the number of constraints used by the Grounding Box to ground each variable.
  *   `numConstraintsSatisfied` (*type:* `float()`, *default:* `nil`) - Sum of the number of constraints satisfied for each variable. Depending on the match score for a constraint, this number can be fractional and is in the range [0, num_constraints].
  *   `numGroundableArgs` (*type:* `float()`, *default:* `nil`) - Number of groundable arguments in the parsed intent.
  *   `numGroundedArgs` (*type:* `float()`, *default:* `nil`) - Number of arguments that got actually grounded.
  *   `numVariables` (*type:* `float()`, *default:* `nil`) - Number of arguments, possibly nested, that the Grounding Box tried to ground.
  *   `numVariablesGrounded` (*type:* `float()`, *default:* `nil`) - Number of arguments, possibly nested, that the Grounding Box was able to ground. This includes ambiguously grounded arguments.
  *   `pgrpOutputFormat` (*type:* `String.t`, *default:* `nil`) - PGRP outputs PROD_INTENT_FACTORY intent format by default. See go/intent-conversion-locations-in-sage. Experimental flags can change or make PGRP output additional intents formatted for PORTMON_FULFILLMENT (e.g. with RDs). This is used by the PortMon/ARM dark launch (go/arm-dark-launch-infra). Longer term, this will be replaced by DGS system-internal transformations (go/if-dgs).
  *   `provenance` (*type:* `String.t`, *default:* `nil`) - 
  *   `sentiment` (*type:* `String.t`, *default:* `nil`) - 
  *   `usesGroundingBox` (*type:* `boolean()`, *default:* `nil`) - If true, then GroundingBox and PGRP are used in AnswersRewriter to process the intent. Other post-processing steps, including IGDP, are adjusted accordingly. Note this will be removed once GroundingBox is fully launched and all prod traffic goes through it. Before that happens, each IG that needs to go through GB and PGRP (post GB ranking pruning) will need to explicitly set this field to true. See http://go/gb-impl and http://go/gb-post-ranker-pruner for details.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :addedByGrounding => boolean() | nil,
          :groundabilityScore => float() | nil,
          :numConstraints => float() | nil,
          :numConstraintsSatisfied => float() | nil,
          :numGroundableArgs => float() | nil,
          :numGroundedArgs => float() | nil,
          :numVariables => float() | nil,
          :numVariablesGrounded => float() | nil,
          :pgrpOutputFormat => String.t() | nil,
          :provenance => String.t() | nil,
          :sentiment => String.t() | nil,
          :usesGroundingBox => boolean() | nil
        }

  field(:addedByGrounding)
  field(:groundabilityScore)
  field(:numConstraints)
  field(:numConstraintsSatisfied)
  field(:numGroundableArgs)
  field(:numGroundedArgs)
  field(:numVariables)
  field(:numVariablesGrounded)
  field(:pgrpOutputFormat)
  field(:provenance)
  field(:sentiment)
  field(:usesGroundingBox)
end

defimpl Poison.Decoder,
  for: GoogleApi.ContentWarehouse.V1.Model.KnowledgeAnswersIntentQueryGroundingSignals do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.KnowledgeAnswersIntentQueryGroundingSignals.decode(
      value,
      options
    )
  end
end

defimpl Poison.Encoder,
  for: GoogleApi.ContentWarehouse.V1.Model.KnowledgeAnswersIntentQueryGroundingSignals do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
