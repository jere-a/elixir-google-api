# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.PeoplestackFlexorgsProtoInternalExternal do
  @moduledoc """


  ## Attributes

  *   `application` (*type:* `String.t`, *default:* `nil`) - All evaluations are done within the context of a given application, e.g., "Gmail" and should not be reused in other apps.
  *   `stateStatus` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.PeoplestackFlexorgsProtoInternalExternalStateStatus.t)`, *default:* `nil`) - * There can be multiple states based on the context: 1. AUTOCOMPLETE + Gmail - context 1 2. AUTOCOMPLETE + Chat/Dynamite - context 2 3. "SOME OTHER ACTION" + Gmail - context 3 A client should identify whether a patrticular context is present in the list and only if one is found - use the state that goes alogn with the context, otherwise the client should default to whatever is the safe assumption about "internality/externality" the application should be making (likely, consider everything not explicitly "internal" as "external").
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :application => String.t() | nil,
          :stateStatus =>
            list(
              GoogleApi.ContentWarehouse.V1.Model.PeoplestackFlexorgsProtoInternalExternalStateStatus.t()
            )
            | nil
        }

  field(:application)

  field(:stateStatus,
    as: GoogleApi.ContentWarehouse.V1.Model.PeoplestackFlexorgsProtoInternalExternalStateStatus,
    type: :list
  )
end

defimpl Poison.Decoder,
  for: GoogleApi.ContentWarehouse.V1.Model.PeoplestackFlexorgsProtoInternalExternal do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.PeoplestackFlexorgsProtoInternalExternal.decode(
      value,
      options
    )
  end
end

defimpl Poison.Encoder,
  for: GoogleApi.ContentWarehouse.V1.Model.PeoplestackFlexorgsProtoInternalExternal do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
