# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.Sitemap do
  @moduledoc """
  Note: If you are going to populate any new field in this proto, you probably need to go through the go/dj-new-field and go/index-changes process.

  ## Attributes

  *   `DEPRECATEDSourceTitle` (*type:* `String.t`, *default:* `nil`) - DEPRECATED DEPRECATED DEPRECATED In case you didn't realize, these fields are (and have been for some time) deprecated. We'll stop pushing their data to production soon (probably Feb/09) and after a few weeks we'll probably remove them.
  *   `TargetGroups` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.QualitySitemapTargetGroup.t)`, *default:* `nil`) - One Sitemap can contain multiple TargetGroups, but only one of them will be displayed to the user - this decision will be made at displaying time and can take into account various factors, such as the users' language and country, currently running experiments, etc.
  *   `deprecatedTarget` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.SitemapDEPRECATED_Target.t)`, *default:* `nil`) - 
  *   `pageAnchorsDocInfo` (*type:* `GoogleApi.ContentWarehouse.V1.Model.SdrPageAnchorsDocInfo.t`, *default:* `nil`) - This field is populated in the Sitemap MDU subpopulator from cdoc data. This is used to store page anchors information for TopicTagsScrolltoFlow.
  *   `searchInSite` (*type:* `boolean()`, *default:* `nil`) - Enable site search.
  *   `sitemapType` (*type:* `String.t`, *default:* `nil`) - 
  *   `sourceOrgfp` (*type:* `String.t`, *default:* `nil`) - prevents cross-domain forwarding
  *   `sourceUrl` (*type:* `String.t`, *default:* `nil`) - 
  *   `subresultList` (*type:* `GoogleApi.ContentWarehouse.V1.Model.QualitySitemapSubresultList.t`, *default:* `nil`) - This field is populated in the Sitemap MDU subpopulator from cdoc data. It's not set in the cdoc Sitemap.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :DEPRECATEDSourceTitle => String.t() | nil,
          :TargetGroups =>
            list(GoogleApi.ContentWarehouse.V1.Model.QualitySitemapTargetGroup.t()) | nil,
          :deprecatedTarget =>
            list(GoogleApi.ContentWarehouse.V1.Model.SitemapDEPRECATED_Target.t()) | nil,
          :pageAnchorsDocInfo =>
            GoogleApi.ContentWarehouse.V1.Model.SdrPageAnchorsDocInfo.t() | nil,
          :searchInSite => boolean() | nil,
          :sitemapType => String.t() | nil,
          :sourceOrgfp => String.t() | nil,
          :sourceUrl => String.t() | nil,
          :subresultList =>
            GoogleApi.ContentWarehouse.V1.Model.QualitySitemapSubresultList.t() | nil
        }

  field(:DEPRECATEDSourceTitle)

  field(:TargetGroups,
    as: GoogleApi.ContentWarehouse.V1.Model.QualitySitemapTargetGroup,
    type: :list
  )

  field(:deprecatedTarget,
    as: GoogleApi.ContentWarehouse.V1.Model.SitemapDEPRECATED_Target,
    type: :list
  )

  field(:pageAnchorsDocInfo, as: GoogleApi.ContentWarehouse.V1.Model.SdrPageAnchorsDocInfo)
  field(:searchInSite)
  field(:sitemapType)
  field(:sourceOrgfp)
  field(:sourceUrl)
  field(:subresultList, as: GoogleApi.ContentWarehouse.V1.Model.QualitySitemapSubresultList)
end

defimpl Poison.Decoder, for: GoogleApi.ContentWarehouse.V1.Model.Sitemap do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.Sitemap.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContentWarehouse.V1.Model.Sitemap do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
