# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.BookCitationPerDocData do
  @moduledoc """
  Per-doc data for the web page about the cited book Approximate size is on average ~10bytes

  ## Attributes

  *   `bookId` (*type:* `String.t`, *default:* `nil`) - the book id for the main citation
  *   `discretizedCitationScore` (*type:* `integer()`, *default:* `nil`) - the discretized citation score for the main book. we map the raw score 1.0-20.0 to 0 - 127
  *   `previewable` (*type:* `boolean()`, *default:* `nil`) - Is there a preview or excerpt of the book on this document?
  *   `secondBookId` (*type:* `String.t`, *default:* `nil`) - book id for the second citation if we can't separate the two top citations (they are too close).
  *   `secondDiscretizedCitationScore` (*type:* `integer()`, *default:* `nil`) - the discretized score for the second citation
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :bookId => String.t() | nil,
          :discretizedCitationScore => integer() | nil,
          :previewable => boolean() | nil,
          :secondBookId => String.t() | nil,
          :secondDiscretizedCitationScore => integer() | nil
        }

  field(:bookId)
  field(:discretizedCitationScore)
  field(:previewable)
  field(:secondBookId)
  field(:secondDiscretizedCitationScore)
end

defimpl Poison.Decoder, for: GoogleApi.ContentWarehouse.V1.Model.BookCitationPerDocData do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.BookCitationPerDocData.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContentWarehouse.V1.Model.BookCitationPerDocData do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
