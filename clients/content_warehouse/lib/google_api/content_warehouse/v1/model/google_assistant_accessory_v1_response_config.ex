# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.GoogleAssistantAccessoryV1ResponseConfig do
  @moduledoc """
  Configuration for the response. Next Id: 11

  ## Attributes

  *   `audioOutConfig` (*type:* `GoogleApi.ContentWarehouse.V1.Model.GoogleAssistantAccessoryV1AudioOutConfig.t`, *default:* `nil`) - Specifies the current audio mode on the device.
  *   `deviceConfig` (*type:* `GoogleApi.ContentWarehouse.V1.Model.GoogleAssistantAccessoryV1DeviceConfig.t`, *default:* `nil`) - Configuration related to a specific device.
  *   `deviceInteraction` (*type:* `String.t`, *default:* `nil`) - The client interaction to be sent to Assistant. This is a assistant.embedded.v1.DeviceInteraction message in serialized binary proto format.
  *   `deviceState` (*type:* `GoogleApi.ContentWarehouse.V1.Model.GoogleAssistantAccessoryV1DeviceState.t`, *default:* `nil`) - Device state to pass to the Assistant server to use in calculating the response.
  *   `initialAudioBytes` (*type:* `integer()`, *default:* `nil`) - Specifies the initial bytes of TTS audio to send.
  *   `isNewConversation` (*type:* `boolean()`, *default:* `nil`) - If true, the server will treat the request as a new conversation and not use state from the prior request. Set this field to true when the conversation should be restarted, such as after a device reboot, or after a significant lapse of time since the prior query.
  *   `outputSampleRateHz` (*type:* `integer()`, *default:* `nil`) - Specifies the desired audio sample rate of the output TTS stream in Hz.
  *   `responseType` (*type:* `String.t`, *default:* `nil`) - Specifies the requested response type.
  *   `screenOutConfig` (*type:* `GoogleApi.ContentWarehouse.V1.Model.GoogleAssistantAccessoryV1ScreenOutConfig.t`, *default:* `nil`) - Specifies the desired format to use when server returns a visual screen response.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :audioOutConfig =>
            GoogleApi.ContentWarehouse.V1.Model.GoogleAssistantAccessoryV1AudioOutConfig.t() | nil,
          :deviceConfig =>
            GoogleApi.ContentWarehouse.V1.Model.GoogleAssistantAccessoryV1DeviceConfig.t() | nil,
          :deviceInteraction => String.t() | nil,
          :deviceState =>
            GoogleApi.ContentWarehouse.V1.Model.GoogleAssistantAccessoryV1DeviceState.t() | nil,
          :initialAudioBytes => integer() | nil,
          :isNewConversation => boolean() | nil,
          :outputSampleRateHz => integer() | nil,
          :responseType => String.t() | nil,
          :screenOutConfig =>
            GoogleApi.ContentWarehouse.V1.Model.GoogleAssistantAccessoryV1ScreenOutConfig.t()
            | nil
        }

  field(:audioOutConfig,
    as: GoogleApi.ContentWarehouse.V1.Model.GoogleAssistantAccessoryV1AudioOutConfig
  )

  field(:deviceConfig,
    as: GoogleApi.ContentWarehouse.V1.Model.GoogleAssistantAccessoryV1DeviceConfig
  )

  field(:deviceInteraction)

  field(:deviceState,
    as: GoogleApi.ContentWarehouse.V1.Model.GoogleAssistantAccessoryV1DeviceState
  )

  field(:initialAudioBytes)
  field(:isNewConversation)
  field(:outputSampleRateHz)
  field(:responseType)

  field(:screenOutConfig,
    as: GoogleApi.ContentWarehouse.V1.Model.GoogleAssistantAccessoryV1ScreenOutConfig
  )
end

defimpl Poison.Decoder,
  for: GoogleApi.ContentWarehouse.V1.Model.GoogleAssistantAccessoryV1ResponseConfig do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.GoogleAssistantAccessoryV1ResponseConfig.decode(
      value,
      options
    )
  end
end

defimpl Poison.Encoder,
  for: GoogleApi.ContentWarehouse.V1.Model.GoogleAssistantAccessoryV1ResponseConfig do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
