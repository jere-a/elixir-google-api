# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.GeostoreBuildingProto do
  @moduledoc """
  This protocol buffer holds the building-specific attributes for features of type TYPE_COMPOUND_BUILDING.

  ## Attributes

  *   `baseHeightMetersAgl` (*type:* `number()`, *default:* `nil`) - The height of the base of this building, in meters above ground-level, if known.
  *   `defaultDisplayLevel` (*type:* `GoogleApi.ContentWarehouse.V1.Model.GeostoreFeatureIdProto.t`, *default:* `nil`) - The level in this building that should get displayed by default. If present, the default display level must be one of this building's levels that are listed in the level[] field, and if a level is set as a default level of one building, all buildings sharing the level should have that same level as their default level. If not present, clients should not display any level by default for that building.
  *   `floors` (*type:* `integer()`, *default:* `nil`) - The number of floors above the base of the building, if known. For example a regular 1-story building would set this to "1". Use a value of GeostoreConstants::kDefaultHeightPerFloor when converting "floors" to "height_meters".
  *   `floorsMetadata` (*type:* `GoogleApi.ContentWarehouse.V1.Model.GeostoreFieldMetadataProto.t`, *default:* `nil`) - 
  *   `heightMeters` (*type:* `number()`, *default:* `nil`) - The height of the building above its base, in meters, if known.
  *   `heightMetersMetadata` (*type:* `GoogleApi.ContentWarehouse.V1.Model.GeostoreFieldMetadataProto.t`, *default:* `nil`) - 
  *   `level` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.GeostoreFeatureIdProto.t)`, *default:* `nil`) - The levels in this building, in no particular order. These levels refer back to the building via another strong reference (the LevelProto.building field).
  *   `structure` (*type:* `String.t`, *default:* `nil`) - "Structure" denotes a physical architecture of the building that is readily visible. This attribute is useful in that rarer structures can make good landmarks.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :baseHeightMetersAgl => number() | nil,
          :defaultDisplayLevel =>
            GoogleApi.ContentWarehouse.V1.Model.GeostoreFeatureIdProto.t() | nil,
          :floors => integer() | nil,
          :floorsMetadata =>
            GoogleApi.ContentWarehouse.V1.Model.GeostoreFieldMetadataProto.t() | nil,
          :heightMeters => number() | nil,
          :heightMetersMetadata =>
            GoogleApi.ContentWarehouse.V1.Model.GeostoreFieldMetadataProto.t() | nil,
          :level => list(GoogleApi.ContentWarehouse.V1.Model.GeostoreFeatureIdProto.t()) | nil,
          :structure => String.t() | nil
        }

  field(:baseHeightMetersAgl)
  field(:defaultDisplayLevel, as: GoogleApi.ContentWarehouse.V1.Model.GeostoreFeatureIdProto)
  field(:floors)
  field(:floorsMetadata, as: GoogleApi.ContentWarehouse.V1.Model.GeostoreFieldMetadataProto)
  field(:heightMeters)
  field(:heightMetersMetadata, as: GoogleApi.ContentWarehouse.V1.Model.GeostoreFieldMetadataProto)
  field(:level, as: GoogleApi.ContentWarehouse.V1.Model.GeostoreFeatureIdProto, type: :list)
  field(:structure)
end

defimpl Poison.Decoder, for: GoogleApi.ContentWarehouse.V1.Model.GeostoreBuildingProto do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.GeostoreBuildingProto.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContentWarehouse.V1.Model.GeostoreBuildingProto do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
