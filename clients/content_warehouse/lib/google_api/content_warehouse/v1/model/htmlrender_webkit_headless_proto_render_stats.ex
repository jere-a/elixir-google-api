# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.HtmlrenderWebkitHeadlessProtoRenderStats do
  @moduledoc """
  Next id: 17.

  ## Attributes

  *   `anonRenderFineTimingStats` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.HtmlrenderWebkitHeadlessProtoAnonTimingStatPair.t)`, *default:* `nil`) - Deliberately non-named fine timing stats. These are all related to each other and unrelated to other timing stats in this message.
  *   `consoleLogEntry` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.HtmlrenderWebkitHeadlessProtoConsoleLogEntry.t)`, *default:* `nil`) - Any messages logged by the renderer to the console. Note that we capture a subset of the messages logged by the renderer here to avoid explosion.
  *   `counter` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.HtmlrenderWebkitHeadlessProtoRenderStatsCounter.t)`, *default:* `nil`) - 
  *   `documentBuildTimeMsec` (*type:* `integer()`, *default:* `nil`) - Time to build document and render tree response data.
  *   `droppedLogEntryCount` (*type:* `integer()`, *default:* `nil`) - Number of dropped log messages. Since we capture only a subset of the messages in console_log_entry this field is included just so that the consumers can get an idea of how many actual attempts were made by the renderer.
  *   `imageEncodingTimeMsec` (*type:* `integer()`, *default:* `nil`) - Image encoding (e.g. raw -> PNG) time.
  *   `imageScalingTimeMsec` (*type:* `integer()`, *default:* `nil`) - Image scaling time.
  *   `layoutTimeMsec` (*type:* `integer()`, *default:* `nil`) - Time from starting render to document finished loading. This includes all fetches, parsing, decoding, running JavaScript, etc.
  *   `paintTimeMsec` (*type:* `integer()`, *default:* `nil`) - Time required to paint a document into our buffer.
  *   `renderCostMgcu` (*type:* `integer()`, *default:* `nil`) - Total cost this render spent running and RPC cost in milliGCUs.
  *   `renderEngine` (*type:* `String.t`, *default:* `nil`) - Render engine used to render this document.
  *   `renderRunningTimeMsec` (*type:* `integer()`, *default:* `nil`) - Total CPU time this render spent running in milliseconds.
  *   `renderServerBaselineCl` (*type:* `String.t`, *default:* `nil`) - The CL from which the render engine was built.
  *   `renderTimeMsec` (*type:* `integer()`, *default:* `nil`) - Total wall time taken to render a document in milliseconds.
  *   `sandboxRenderTimeMsec` (*type:* `integer()`, *default:* `nil`) - Total time spent in the sandbox in milliseconds. This time includes all phases measured individually below.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :anonRenderFineTimingStats =>
            list(
              GoogleApi.ContentWarehouse.V1.Model.HtmlrenderWebkitHeadlessProtoAnonTimingStatPair.t()
            )
            | nil,
          :consoleLogEntry =>
            list(
              GoogleApi.ContentWarehouse.V1.Model.HtmlrenderWebkitHeadlessProtoConsoleLogEntry.t()
            )
            | nil,
          :counter =>
            list(
              GoogleApi.ContentWarehouse.V1.Model.HtmlrenderWebkitHeadlessProtoRenderStatsCounter.t()
            )
            | nil,
          :documentBuildTimeMsec => integer() | nil,
          :droppedLogEntryCount => integer() | nil,
          :imageEncodingTimeMsec => integer() | nil,
          :imageScalingTimeMsec => integer() | nil,
          :layoutTimeMsec => integer() | nil,
          :paintTimeMsec => integer() | nil,
          :renderCostMgcu => integer() | nil,
          :renderEngine => String.t() | nil,
          :renderRunningTimeMsec => integer() | nil,
          :renderServerBaselineCl => String.t() | nil,
          :renderTimeMsec => integer() | nil,
          :sandboxRenderTimeMsec => integer() | nil
        }

  field(:anonRenderFineTimingStats,
    as: GoogleApi.ContentWarehouse.V1.Model.HtmlrenderWebkitHeadlessProtoAnonTimingStatPair,
    type: :list
  )

  field(:consoleLogEntry,
    as: GoogleApi.ContentWarehouse.V1.Model.HtmlrenderWebkitHeadlessProtoConsoleLogEntry,
    type: :list
  )

  field(:counter,
    as: GoogleApi.ContentWarehouse.V1.Model.HtmlrenderWebkitHeadlessProtoRenderStatsCounter,
    type: :list
  )

  field(:documentBuildTimeMsec)
  field(:droppedLogEntryCount)
  field(:imageEncodingTimeMsec)
  field(:imageScalingTimeMsec)
  field(:layoutTimeMsec)
  field(:paintTimeMsec)
  field(:renderCostMgcu)
  field(:renderEngine)
  field(:renderRunningTimeMsec)
  field(:renderServerBaselineCl)
  field(:renderTimeMsec)
  field(:sandboxRenderTimeMsec)
end

defimpl Poison.Decoder,
  for: GoogleApi.ContentWarehouse.V1.Model.HtmlrenderWebkitHeadlessProtoRenderStats do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.HtmlrenderWebkitHeadlessProtoRenderStats.decode(
      value,
      options
    )
  end
end

defimpl Poison.Encoder,
  for: GoogleApi.ContentWarehouse.V1.Model.HtmlrenderWebkitHeadlessProtoRenderStats do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
