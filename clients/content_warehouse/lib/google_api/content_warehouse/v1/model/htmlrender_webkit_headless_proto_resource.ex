# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.HtmlrenderWebkitHeadlessProtoResource do
  @moduledoc """
  Next id: 9.

  ## Attributes

  *   `content` (*type:* `String.t`, *default:* `nil`) - content contains a complete HTTP response message including the HTTP status line, headers and body. For example: HTTP/1.1 200 OK\\r\\n Content-Type: text/html\\r\\n \\r\\n ... content ... For inputs (RenderRequest.resource): Any HTTP content encoding (e.g. gzip) and transfer encoding (e.g. chunked) MUST be decoded. HTTP content and transfer encoding headers will be ignored if present. For outputs (RenderResponse.referenced_resource_content): The body will be decoded (no content or transfer encoding) however any content or transfer encoding headers present in the original fetch response will be passed through. Decoding this field requires a correct text encoding. The charset field of Document proto can be a good guess but is not guaranteed to be correct.
  *   `fetchSourceInfo` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.WirelessTranscoderFetchFetchSourceInfo.t)`, *default:* `nil`) - Where this resource comes from.
  *   `finalContentUrl` (*type:* `String.t`, *default:* `nil`) - The url that contributes the final content. Only existed when metadata contains FetchReplyData.
  *   `metadata` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.WirelessTranscoderFetchFetchMetadata.t)`, *default:* `nil`) - 
  *   `method` (*type:* `integer()`, *default:* `nil`) - The HTTP request method (GET, HEAD, POST, etc) used for this request. Values are taken from the HTTPHeaders::Protocol enum in webutil/http/httputils.h. If it's not set, we will infer GET or POST based on the presence of post_data.
  *   `postData` (*type:* `String.t`, *default:* `nil`) - 
  *   `requestHeader` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.HtmlrenderWebkitHeadlessProtoResourceHttpHeader.t)`, *default:* `nil`) - Only necessary headers are included in the resource key by default. See google3/htmlrender/webkit_headless/resource_key.cc
  *   `url` (*type:* `String.t`, *default:* `nil`) - 
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :content => String.t() | nil,
          :fetchSourceInfo =>
            list(GoogleApi.ContentWarehouse.V1.Model.WirelessTranscoderFetchFetchSourceInfo.t())
            | nil,
          :finalContentUrl => String.t() | nil,
          :metadata =>
            list(GoogleApi.ContentWarehouse.V1.Model.WirelessTranscoderFetchFetchMetadata.t())
            | nil,
          :method => integer() | nil,
          :postData => String.t() | nil,
          :requestHeader =>
            list(
              GoogleApi.ContentWarehouse.V1.Model.HtmlrenderWebkitHeadlessProtoResourceHttpHeader.t()
            )
            | nil,
          :url => String.t() | nil
        }

  field(:content)

  field(:fetchSourceInfo,
    as: GoogleApi.ContentWarehouse.V1.Model.WirelessTranscoderFetchFetchSourceInfo,
    type: :list
  )

  field(:finalContentUrl)

  field(:metadata,
    as: GoogleApi.ContentWarehouse.V1.Model.WirelessTranscoderFetchFetchMetadata,
    type: :list
  )

  field(:method)
  field(:postData)

  field(:requestHeader,
    as: GoogleApi.ContentWarehouse.V1.Model.HtmlrenderWebkitHeadlessProtoResourceHttpHeader,
    type: :list
  )

  field(:url)
end

defimpl Poison.Decoder,
  for: GoogleApi.ContentWarehouse.V1.Model.HtmlrenderWebkitHeadlessProtoResource do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.HtmlrenderWebkitHeadlessProtoResource.decode(
      value,
      options
    )
  end
end

defimpl Poison.Encoder,
  for: GoogleApi.ContentWarehouse.V1.Model.HtmlrenderWebkitHeadlessProtoResource do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
