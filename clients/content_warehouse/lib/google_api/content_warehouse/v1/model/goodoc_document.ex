# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.GoodocDocument do
  @moduledoc """
  Top-level representation of OCRed document

  ## Attributes

  *   `EditingHistory` (*type:* `list(String.t)`, *default:* `nil`) - Debug info, recording the history of any editing done through the interface in goodoc-editing.h. The strings look like "MoveParagraph(page_index = 0, source_block_index = 3, ...);
  *   `LogicalEntity` (*type:* `list(String.t)`, *default:* `nil`) - Logical entities are stored as blobs. Depending on the kind of thing this is a goodoc of, a separate .proto file is expected to define the logical entity structure. Hence we can still parse this as a goodoc for people who dont care about this, and people who care about this can parse it specifically. ocr/goodoc/logical-entity-utils.h has methods to read and write these. See Goodoc++ doc
  *   `LogicalEntityMessageName` (*type:* `list(String.t)`, *default:* `nil`) - The names of the proto messages serialized in LogicalEntity, one for each LogicalEntity. The repetitions should number 0 to leave this unspecified, or they should equal the number of LogicalEntity strings.
  *   `SubDocuments` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.GoodocDocument.t)`, *default:* `nil`) - For multi-goodoc documents
  *   `header` (*type:* `GoogleApi.ContentWarehouse.V1.Model.GoodocDocumentHeader.t`, *default:* `nil`) - 
  *   `page` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.GoodocDocumentPage.t)`, *default:* `nil`) - 
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :EditingHistory => list(String.t()) | nil,
          :LogicalEntity => list(String.t()) | nil,
          :LogicalEntityMessageName => list(String.t()) | nil,
          :SubDocuments => list(GoogleApi.ContentWarehouse.V1.Model.GoodocDocument.t()) | nil,
          :header => GoogleApi.ContentWarehouse.V1.Model.GoodocDocumentHeader.t() | nil,
          :page => list(GoogleApi.ContentWarehouse.V1.Model.GoodocDocumentPage.t()) | nil
        }

  field(:EditingHistory, type: :list)
  field(:LogicalEntity, type: :list)
  field(:LogicalEntityMessageName, type: :list)
  field(:SubDocuments, as: GoogleApi.ContentWarehouse.V1.Model.GoodocDocument, type: :list)
  field(:header, as: GoogleApi.ContentWarehouse.V1.Model.GoodocDocumentHeader)
  field(:page, as: GoogleApi.ContentWarehouse.V1.Model.GoodocDocumentPage, type: :list)
end

defimpl Poison.Decoder, for: GoogleApi.ContentWarehouse.V1.Model.GoodocDocument do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.GoodocDocument.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContentWarehouse.V1.Model.GoodocDocument do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
