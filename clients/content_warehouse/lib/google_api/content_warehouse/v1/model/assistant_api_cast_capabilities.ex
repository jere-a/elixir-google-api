# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.AssistantApiCastCapabilities do
  @moduledoc """
  These capabilities represent capabilities that have to do with casting that pertain to this device. Next ID: 9

  ## Attributes

  *   `cameraReceiverCapabilities` (*type:* `GoogleApi.ContentWarehouse.V1.Model.AssistantApiCameraReceiverCapabilities.t`, *default:* `nil`) - Whether the device has limited camera stream capability and if yes, which receivers are supported.
  *   `cameraStreamSupportedProtocols` (*type:* `list(String.t)`, *default:* `nil`) - The supported protocols for camera streaming. The value is used as string in go/smarthome-internal-api#camera-stream, so using a string for this field instead of an enum. Supported protocols: (align the definition in go/smarthome-camerastream-trait) - "hls": HTTP Live Streaming - "dash": Dynamic Adaptive Streaming over HTTP - "smooth_stream": Smooth Streaming - "progressive_mp4": Progressive MP4 (will likely only be used for Clips) - "webrtc": WebRTC (currently, only H.264 is supported) - "nexustalk": Internal-only protocol used for Nest
  *   `canReceiveCast` (*type:* `boolean()`, *default:* `nil`) - True if we can cast things to this device.
  *   `deviceId` (*type:* `GoogleApi.ContentWarehouse.V1.Model.AssistantApiCoreTypesDeviceId.t`, *default:* `nil`) - Optional for primarily cast devices (e.g., Chirp, Chromecast). For devices that are NOT primarily cast devices, but having a cast receiver as secondary functionality, this field SHOULD store the cast-device-id to be used to send remote casting commands to the device. Example: Android TV, which supports both Android-native actions as well as remote casting using its built-in cast receiver. Android TV device id contains a DUSI id, which is not a cast-device-id. When executing a cast command on the Android TV, this field is used to route the cast command (through CloudCastService) to the cast receiver on the device.
  *   `dynamicGroupsSupported` (*type:* `boolean()`, *default:* `nil`) - Whether this device supports dynamic groups or not. It implies if a Stream Control operation (transfer, expansion, and contraction) could be applied on this device since Stream Control is implemented as part of dynamic groups (ie, adding/removing devices from playback)
  *   `groupType` (*type:* `String.t`, *default:* `nil`) - 
  *   `overlayApplicationsSupported` (*type:* `boolean()`, *default:* `nil`) - Whether UI overlay applications are supported on this device. It's used by Chromecast only.
  *   `yetiGamingSupported` (*type:* `boolean()`, *default:* `nil`) - Whether the device supports playing games through Yeti. This is set by the cast device when the device is updated: Chromecast updates -> Chromecast registers its capabilities with CCS -> CCS passes the capabilities to the AssistantSettingsService -> AssistantSettingsService stores the device's capabilities. go/yeti-gaming-supported-cast-capability
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :cameraReceiverCapabilities =>
            GoogleApi.ContentWarehouse.V1.Model.AssistantApiCameraReceiverCapabilities.t() | nil,
          :cameraStreamSupportedProtocols => list(String.t()) | nil,
          :canReceiveCast => boolean() | nil,
          :deviceId =>
            GoogleApi.ContentWarehouse.V1.Model.AssistantApiCoreTypesDeviceId.t() | nil,
          :dynamicGroupsSupported => boolean() | nil,
          :groupType => String.t() | nil,
          :overlayApplicationsSupported => boolean() | nil,
          :yetiGamingSupported => boolean() | nil
        }

  field(:cameraReceiverCapabilities,
    as: GoogleApi.ContentWarehouse.V1.Model.AssistantApiCameraReceiverCapabilities
  )

  field(:cameraStreamSupportedProtocols, type: :list)
  field(:canReceiveCast)
  field(:deviceId, as: GoogleApi.ContentWarehouse.V1.Model.AssistantApiCoreTypesDeviceId)
  field(:dynamicGroupsSupported)
  field(:groupType)
  field(:overlayApplicationsSupported)
  field(:yetiGamingSupported)
end

defimpl Poison.Decoder, for: GoogleApi.ContentWarehouse.V1.Model.AssistantApiCastCapabilities do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.AssistantApiCastCapabilities.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContentWarehouse.V1.Model.AssistantApiCastCapabilities do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
