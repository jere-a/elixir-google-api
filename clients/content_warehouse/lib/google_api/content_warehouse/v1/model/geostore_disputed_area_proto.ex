# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.GeostoreDisputedAreaProto do
  @moduledoc """
  This protocol buffer is used to store information about disputed areas. E.g., the political power that administers a disputed area or the countries that claim it. It should only be used for features of TYPE_DISPUTED_AREA.

  ## Attributes

  *   `administeredBy` (*type:* `String.t`, *default:* `nil`) - If present this feature is administered by the power present in the field. In most cases this will be a two letter ISO-3166 region code, but may be a descriptive string if no region code is available.
  *   `claimant` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.GeostoreFeatureIdProto.t)`, *default:* `nil`) - Feature IDs (usually a country feature ID) of all parties who claim this feature. No claimants means the claim by the country that contains it (based on country polygon) is not disputed.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :administeredBy => String.t() | nil,
          :claimant => list(GoogleApi.ContentWarehouse.V1.Model.GeostoreFeatureIdProto.t()) | nil
        }

  field(:administeredBy)
  field(:claimant, as: GoogleApi.ContentWarehouse.V1.Model.GeostoreFeatureIdProto, type: :list)
end

defimpl Poison.Decoder, for: GoogleApi.ContentWarehouse.V1.Model.GeostoreDisputedAreaProto do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.GeostoreDisputedAreaProto.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContentWarehouse.V1.Model.GeostoreDisputedAreaProto do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
