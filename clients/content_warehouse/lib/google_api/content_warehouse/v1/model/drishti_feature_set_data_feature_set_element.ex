# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.DrishtiFeatureSetDataFeatureSetElement do
  @moduledoc """
  A FeatureSetElement stores the features coming from a single group.

  ## Attributes

  *   `compressed` (*type:* `GoogleApi.ContentWarehouse.V1.Model.DrishtiCompressedFeature.t`, *default:* `nil`) - 
  *   `dense` (*type:* `GoogleApi.ContentWarehouse.V1.Model.DrishtiDenseFeatureData.t`, *default:* `nil`) - 
  *   `indexed` (*type:* `GoogleApi.ContentWarehouse.V1.Model.DrishtiIndexedFeatureData.t`, *default:* `nil`) - 
  *   `name` (*type:* `String.t`, *default:* `nil`) - A name for the feature group: example "AUDIO", "VIDEO", "OCR", etc.
  *   `quantized` (*type:* `GoogleApi.ContentWarehouse.V1.Model.DrishtiQuantizedDenseFeatureData.t`, *default:* `nil`) - 
  *   `quantizedByteDense` (*type:* `GoogleApi.ContentWarehouse.V1.Model.DrishtiQuantizedByteDenseFeatureData.t`, *default:* `nil`) - 
  *   `quantizedByteIndexed` (*type:* `GoogleApi.ContentWarehouse.V1.Model.DrishtiQuantizedByteIndexedFeatureData.t`, *default:* `nil`) - 
  *   `sparse` (*type:* `GoogleApi.ContentWarehouse.V1.Model.DrishtiSparseFeatureData.t`, *default:* `nil`) - 
  *   `token` (*type:* `GoogleApi.ContentWarehouse.V1.Model.DrishtiDenseTokenData.t`, *default:* `nil`) - 
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :compressed => GoogleApi.ContentWarehouse.V1.Model.DrishtiCompressedFeature.t() | nil,
          :dense => GoogleApi.ContentWarehouse.V1.Model.DrishtiDenseFeatureData.t() | nil,
          :indexed => GoogleApi.ContentWarehouse.V1.Model.DrishtiIndexedFeatureData.t() | nil,
          :name => String.t() | nil,
          :quantized =>
            GoogleApi.ContentWarehouse.V1.Model.DrishtiQuantizedDenseFeatureData.t() | nil,
          :quantizedByteDense =>
            GoogleApi.ContentWarehouse.V1.Model.DrishtiQuantizedByteDenseFeatureData.t() | nil,
          :quantizedByteIndexed =>
            GoogleApi.ContentWarehouse.V1.Model.DrishtiQuantizedByteIndexedFeatureData.t() | nil,
          :sparse => GoogleApi.ContentWarehouse.V1.Model.DrishtiSparseFeatureData.t() | nil,
          :token => GoogleApi.ContentWarehouse.V1.Model.DrishtiDenseTokenData.t() | nil
        }

  field(:compressed, as: GoogleApi.ContentWarehouse.V1.Model.DrishtiCompressedFeature)
  field(:dense, as: GoogleApi.ContentWarehouse.V1.Model.DrishtiDenseFeatureData)
  field(:indexed, as: GoogleApi.ContentWarehouse.V1.Model.DrishtiIndexedFeatureData)
  field(:name)
  field(:quantized, as: GoogleApi.ContentWarehouse.V1.Model.DrishtiQuantizedDenseFeatureData)

  field(:quantizedByteDense,
    as: GoogleApi.ContentWarehouse.V1.Model.DrishtiQuantizedByteDenseFeatureData
  )

  field(:quantizedByteIndexed,
    as: GoogleApi.ContentWarehouse.V1.Model.DrishtiQuantizedByteIndexedFeatureData
  )

  field(:sparse, as: GoogleApi.ContentWarehouse.V1.Model.DrishtiSparseFeatureData)
  field(:token, as: GoogleApi.ContentWarehouse.V1.Model.DrishtiDenseTokenData)
end

defimpl Poison.Decoder,
  for: GoogleApi.ContentWarehouse.V1.Model.DrishtiFeatureSetDataFeatureSetElement do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.DrishtiFeatureSetDataFeatureSetElement.decode(
      value,
      options
    )
  end
end

defimpl Poison.Encoder,
  for: GoogleApi.ContentWarehouse.V1.Model.DrishtiFeatureSetDataFeatureSetElement do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
