# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.AssistantApiSuggestionsSupport do
  @moduledoc """
  Next ID: 18

  ## Attributes

  *   `clickImpersonationSupported` (*type:* `boolean()`, *default:* `nil`) - Whether client supports user impersonation on suggestion chip click. go/suggestion-click-impersonation
  *   `debugDataSupported` (*type:* `boolean()`, *default:* `nil`) - Whether client supports suggestions debug data to be displayed.
  *   `drlHistoryChipSupported` (*type:* `boolean()`, *default:* `nil`) - Whether DRL history chip is supported. Related bug: http://b/241837879, http://b/171854732 Design doc: http://go/panthera-history-chip-dd DRL history chip was originally rolled out to Panthera in http://google3/googledata/experiments/mobile/agsa/studies/agsa_nga/opa_panthera_one_input_ui_launch.gcl?l=55&rcl=384682900. We plan to roll it out to NGA and TNG. drl_history_chip_supported bit specifies whether the client support (and should have) DRL history chip.
  *   `escapeHatchSupported` (*type:* `String.t`, *default:* `nil`) - Whether client supports escape hatches aka post execution suggestions go/nga-escape-hatch-prd
  *   `executedTextSupported` (*type:* `boolean()`, *default:* `nil`) - Whether the client can rewrite suggestion query text into executed text, if the latter is present. If this feature is disabled, the rewrite happens in Assistant Server.
  *   `executionContextSupported` (*type:* `boolean()`, *default:* `nil`) - Whether the client supports passing back `execution_context` from |assistant.api.client_op.SuggestionProcessingParams| when the suggestion is clicked or spoken.
  *   `featureSpecificActionSupport` (*type:* `GoogleApi.ContentWarehouse.V1.Model.AssistantApiFeatureSpecificActionSupport.t`, *default:* `nil`) - Whether the client supports features in |SuggestionFeatureSpecificAction|.
  *   `featureSpecificAppActionsNotificationSupported` (*type:* `boolean()`, *default:* `nil`) - Whether the client supports handling App Actions' notification when the suggestion is clicked. This will allow the server to populate the `app_actions_notification_data` extension field from |SuggestionFeatureSpecificAction| proto message.
  *   `multiStepTrySayingSupported` (*type:* `boolean()`, *default:* `nil`) - Whether the multi-step try saying suggestion feature is supported. dd: go/tng-multi-step-simplified
  *   `ruleIdInExecutionContextSupported` (*type:* `boolean()`, *default:* `nil`) - Whether the rule_id field in the execution_context is supported. This is a temporary workaround to be able to identify clicks on Person entity suggestions on Sabrina and is expected to be eventually deprecated. TODO(b/185517153) : Deprecate (but do not delete) once click tracking is correctly sent up from the Katniss client.
  *   `showExecutedTextSupported` (*type:* `boolean()`, *default:* `nil`) - Whether the client can show executed_text after the click on the suggestion chip. Must be set to false on TNG. TNG disregards |SuggestionProcessingParams.show_executed_text| field and always treats it as if |show_executed_text=true|.
  *   `showTranslationSupported` (*type:* `boolean()`, *default:* `nil`) - Whether the client can show chip as (text | translation). go/lang-partner-doc
  *   `supportedDisplayTargets` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.AssistantApiSuggestionsSupportDisplayTargetSupport.t)`, *default:* `nil`) - A list of suggestions display targets supported by this client. If unset only DEFAULT SuggestionDisplayTarget is supported.
  *   `widgetDataSupported` (*type:* `boolean()`, *default:* `nil`) - Whether client supports widget suggestion chip to be displayed.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :clickImpersonationSupported => boolean() | nil,
          :debugDataSupported => boolean() | nil,
          :drlHistoryChipSupported => boolean() | nil,
          :escapeHatchSupported => String.t() | nil,
          :executedTextSupported => boolean() | nil,
          :executionContextSupported => boolean() | nil,
          :featureSpecificActionSupport =>
            GoogleApi.ContentWarehouse.V1.Model.AssistantApiFeatureSpecificActionSupport.t() | nil,
          :featureSpecificAppActionsNotificationSupported => boolean() | nil,
          :multiStepTrySayingSupported => boolean() | nil,
          :ruleIdInExecutionContextSupported => boolean() | nil,
          :showExecutedTextSupported => boolean() | nil,
          :showTranslationSupported => boolean() | nil,
          :supportedDisplayTargets =>
            list(
              GoogleApi.ContentWarehouse.V1.Model.AssistantApiSuggestionsSupportDisplayTargetSupport.t()
            )
            | nil,
          :widgetDataSupported => boolean() | nil
        }

  field(:clickImpersonationSupported)
  field(:debugDataSupported)
  field(:drlHistoryChipSupported)
  field(:escapeHatchSupported)
  field(:executedTextSupported)
  field(:executionContextSupported)

  field(:featureSpecificActionSupport,
    as: GoogleApi.ContentWarehouse.V1.Model.AssistantApiFeatureSpecificActionSupport
  )

  field(:featureSpecificAppActionsNotificationSupported)
  field(:multiStepTrySayingSupported)
  field(:ruleIdInExecutionContextSupported)
  field(:showExecutedTextSupported)
  field(:showTranslationSupported)

  field(:supportedDisplayTargets,
    as: GoogleApi.ContentWarehouse.V1.Model.AssistantApiSuggestionsSupportDisplayTargetSupport,
    type: :list
  )

  field(:widgetDataSupported)
end

defimpl Poison.Decoder, for: GoogleApi.ContentWarehouse.V1.Model.AssistantApiSuggestionsSupport do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.AssistantApiSuggestionsSupport.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContentWarehouse.V1.Model.AssistantApiSuggestionsSupport do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
