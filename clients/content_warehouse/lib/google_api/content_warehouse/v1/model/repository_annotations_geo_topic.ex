# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.RepositoryAnnotationsGeoTopic do
  @moduledoc """
  GeoTopicality of a document is a set of GeoTopics ordered by their normalized scores.

  ## Attributes

  *   `address` (*type:* `GoogleApi.ContentWarehouse.V1.Model.GeostoreAddressProto.t`, *default:* `nil`) - Stores parent/container information containing city, province & country.
  *   `componentScores` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.RepositoryAnnotationsGeoTopicalityScore.t)`, *default:* `nil`) - The raw scores used to calculate the normalized_score. Note that not all these scores may be exposed to the users.
  *   `confidence` (*type:* `number()`, *default:* `nil`) - A score [0, 1] indicating the confidence.
  *   `denseCity` (*type:* `boolean()`, *default:* `nil`) - Is this a dense city (e.g., population > 100k)?
  *   `establishmentType` (*type:* `integer()`, *default:* `nil`) - Sub type for POI types like ESTABLISHMENT_POI, ESTABLISHMENT_GROUNDS & ESTABLISHMENT_BUILDING
  *   `latE7` (*type:* `integer()`, *default:* `nil`) - Latitude and Longitude of the location.
  *   `lngE7` (*type:* `integer()`, *default:* `nil`) - 
  *   `locationName` (*type:* `String.t`, *default:* `nil`) - Name of the Geographic location. This is the normalized name.
  *   `normalizedScore` (*type:* `number()`, *default:* `nil`) - A score [0, 1] indicating the likelihood of the location being the GeoTopicality.
  *   `oysterId` (*type:* `GoogleApi.ContentWarehouse.V1.Model.GeostoreFeatureIdProto.t`, *default:* `nil`) - Oyster Feature ID of the location.
  *   `oysterType` (*type:* `integer()`, *default:* `nil`) - Oyster Feature Type
  *   `sumContainedPoiNormalizedScores` (*type:* `number()`, *default:* `nil`) - The sum of the normalized scores of POIs contained within a particular locality.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :address => GoogleApi.ContentWarehouse.V1.Model.GeostoreAddressProto.t() | nil,
          :componentScores =>
            list(GoogleApi.ContentWarehouse.V1.Model.RepositoryAnnotationsGeoTopicalityScore.t())
            | nil,
          :confidence => number() | nil,
          :denseCity => boolean() | nil,
          :establishmentType => integer() | nil,
          :latE7 => integer() | nil,
          :lngE7 => integer() | nil,
          :locationName => String.t() | nil,
          :normalizedScore => number() | nil,
          :oysterId => GoogleApi.ContentWarehouse.V1.Model.GeostoreFeatureIdProto.t() | nil,
          :oysterType => integer() | nil,
          :sumContainedPoiNormalizedScores => number() | nil
        }

  field(:address, as: GoogleApi.ContentWarehouse.V1.Model.GeostoreAddressProto)

  field(:componentScores,
    as: GoogleApi.ContentWarehouse.V1.Model.RepositoryAnnotationsGeoTopicalityScore,
    type: :list
  )

  field(:confidence)
  field(:denseCity)
  field(:establishmentType)
  field(:latE7)
  field(:lngE7)
  field(:locationName)
  field(:normalizedScore)
  field(:oysterId, as: GoogleApi.ContentWarehouse.V1.Model.GeostoreFeatureIdProto)
  field(:oysterType)
  field(:sumContainedPoiNormalizedScores)
end

defimpl Poison.Decoder, for: GoogleApi.ContentWarehouse.V1.Model.RepositoryAnnotationsGeoTopic do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.RepositoryAnnotationsGeoTopic.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContentWarehouse.V1.Model.RepositoryAnnotationsGeoTopic do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
