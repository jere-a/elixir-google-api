# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.GeostoreTextAffixProto do
  @moduledoc """
  Represents text (with an associated language) that is affixed to the beginning and/or end of a primary text.

  ## Attributes

  *   `language` (*type:* `String.t`, *default:* `nil`) - The external form of a Google International Identifiers Initiative (III) LanguageCode object. See google3/i18n/identifiers/languagecode.h for details. These strings should be treated as opaque blobs. You can use LanguageCodeConverter::FromOther to convert the string to a LanguageCode reference. You can then call methods on the LanguageCode class to extract language/script/region subtags (if any). See also http://g3doc/i18n/identifiers/g3doc/using-iii. We place extra restrictions on languages in addition to what the III library requires. See http://go/geo-schema-reference/feature-properties/languages.md
  *   `prefix` (*type:* `String.t`, *default:* `nil`) - Text to prepend to the primary text, including any necessary trailing whitespace. At least one of prefix or suffix is required.
  *   `suffix` (*type:* `String.t`, *default:* `nil`) - Text to append to the end of the primary text, including any necessary leading whitespace. At least one of prefix or suffix is required.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :language => String.t() | nil,
          :prefix => String.t() | nil,
          :suffix => String.t() | nil
        }

  field(:language)
  field(:prefix)
  field(:suffix)
end

defimpl Poison.Decoder, for: GoogleApi.ContentWarehouse.V1.Model.GeostoreTextAffixProto do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.GeostoreTextAffixProto.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContentWarehouse.V1.Model.GeostoreTextAffixProto do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
