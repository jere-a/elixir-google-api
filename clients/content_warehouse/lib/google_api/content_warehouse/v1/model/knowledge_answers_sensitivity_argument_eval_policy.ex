# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.KnowledgeAnswersSensitivityArgumentEvalPolicy do
  @moduledoc """
  Policy controlling argument level eval.

  ## Attributes

  *   `policyName` (*type:* `String.t`, *default:* `nil`) - Optional cannery policy name. If it presents then Intent Scrubber will use the corresponding Cannery rule for argument scrubbing and redaction instead. It should only be used for existing complex argment value types such as HomeAutomationDevice.
  *   `redactQuerySpan` (*type:* `boolean()`, *default:* `nil`) - Redact corresponding span of the string query.
  *   `replacement` (*type:* `String.t`, *default:* `nil`) - Customized replacement phrase, if missing ${ArgumentName}_REDACTED is used as default.
  *   `scrubArgumentValue` (*type:* `boolean()`, *default:* `nil`) - Scrub argument value and signals before saving to eval storage. If not set, 1) inherit the policy from the outer argument if there is one (for nested intents); 2) finally default to type based scrubbing: see go/argument-type-scrubbing.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :policyName => String.t() | nil,
          :redactQuerySpan => boolean() | nil,
          :replacement => String.t() | nil,
          :scrubArgumentValue => boolean() | nil
        }

  field(:policyName)
  field(:redactQuerySpan)
  field(:replacement)
  field(:scrubArgumentValue)
end

defimpl Poison.Decoder,
  for: GoogleApi.ContentWarehouse.V1.Model.KnowledgeAnswersSensitivityArgumentEvalPolicy do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.KnowledgeAnswersSensitivityArgumentEvalPolicy.decode(
      value,
      options
    )
  end
end

defimpl Poison.Encoder,
  for: GoogleApi.ContentWarehouse.V1.Model.KnowledgeAnswersSensitivityArgumentEvalPolicy do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
