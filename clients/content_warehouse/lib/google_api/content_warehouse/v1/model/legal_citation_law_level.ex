# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.LegalCitationLawLevel do
  @moduledoc """
  Law have tree-like sturcture (title, section, etc), but the levels and their names are not fixed. e.g., we could have: US Constitution -> Article 3 -> Section 4, OR, US Code -> Title 12 -> Chapter 6 -> Sub-chapter I -> Section 602, OR, US Code -> Title 10 -> Sub-title A -> Part 2 -> Chapter 32 -> Section 523. We use a repeated group to represent this structure. NOTE: Always insert higher levels before lower levels,

  ## Attributes

  *   `Depth` (*type:* `integer()`, *default:* `nil`) - A counter that specifies the depth of the level in the parse
  *   `LevelTypeNormalized` (*type:* `String.t`, *default:* `nil`) - "SECTION, TITLE, PART, etc."
  *   `LevelTypeSourceText` (*type:* `String.t`, *default:* `nil`) - "Section, Sect., ยง, etc"
  *   `LevelTypeString` (*type:* `String.t`, *default:* `nil`) - deprecated
  *   `Name` (*type:* `String.t`, *default:* `nil`) - The name of the chapter/section/etc.
  *   `Type` (*type:* `integer()`, *default:* `nil`) - deprecated
  *   `Value` (*type:* `String.t`, *default:* `nil`) - "3", "42(a)", etc
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :Depth => integer() | nil,
          :LevelTypeNormalized => String.t() | nil,
          :LevelTypeSourceText => String.t() | nil,
          :LevelTypeString => String.t() | nil,
          :Name => String.t() | nil,
          :Type => integer() | nil,
          :Value => String.t() | nil
        }

  field(:Depth)
  field(:LevelTypeNormalized)
  field(:LevelTypeSourceText)
  field(:LevelTypeString)
  field(:Name)
  field(:Type)
  field(:Value)
end

defimpl Poison.Decoder, for: GoogleApi.ContentWarehouse.V1.Model.LegalCitationLawLevel do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.LegalCitationLawLevel.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContentWarehouse.V1.Model.LegalCitationLawLevel do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
