# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.AppsPeopleOzExternalMergedpeopleapiName do
  @moduledoc """
  See go/people-api-howto:names for an overview of name usage in PeopleAPI. The `unstructured_name` field contains a free form name value. The `given_name`, `middle_name`, `family_name`, etc, fields contain the structured name. For CONTACT mutates, (i.e. when Name.metadata.container is CONTACT), it is recommended for clients to set either the `unstructured_name` or the set of structured name fields, not both. * When only the `unstructured_name` is set, it is parsed to produce a best-guess set of structured name values for the `given_name`, `family_name`, etc. * When only the structured name fields are set, the various values are combined to produce an `unstructured_name`. * When both are set, the `unstructured_name` is saved as-is and the structured name fields are saved as-is. This may be confusing as they might not "match". For PROFILE mutates, (i.e. when Name.metadata.container is PROFILE), it is _required_ for clients to use the structured name fields as the unstructured field value is ignored on write. The unstructured name fields are generated for convenience on read. For DEVICE_CONTACTS, see b/156020778.

  ## Attributes

  *   `displayName` (*type:* `String.t`, *default:* `nil`) - Read-only. A name synthesized based on `unstructured_name` and the structured name fields. Example: "John Smith" If a language code is passed in the side channel using http://cs/symbol:framework.rpc.DeprecatedPropagatedLanguageCode.value or http://cs/symbol:google.rpc.context.OriginContext.accept_language and the name does not have `honorific_prefix`, `middle_name`, or `honorific_suffix` set, the language code will be used to format `display_name`. If `include_account_locale` is set on the `MergePersonSourceOptions` and a language code is not passed in the side channel. The language code from go/uls will be used as the language code for formatting `display_name`.
  *   `displayNameLastFirst` (*type:* `String.t`, *default:* `nil`) - Read-only. A name synthesized based on `unstructured_name` and the structured name fields with the last name first. Example: "Smith, John"
  *   `displayNameSource` (*type:* `GoogleApi.ContentWarehouse.V1.Model.SocialGraphApiProtoDisplayNameSource.t`, *default:* `nil`) - Read-only. The source of the display name.
  *   `familyName` (*type:* `String.t`, *default:* `nil`) - 
  *   `formattedName` (*type:* `String.t`, *default:* `nil`) - DEPRECATED(b/70571931). Use `unstructured_name` instead.
  *   `givenName` (*type:* `String.t`, *default:* `nil`) - 
  *   `honorificPrefix` (*type:* `String.t`, *default:* `nil`) - 
  *   `honorificSuffix` (*type:* `String.t`, *default:* `nil`) - 
  *   `metadata` (*type:* `GoogleApi.ContentWarehouse.V1.Model.AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata.t`, *default:* `nil`) - 
  *   `middleName` (*type:* `String.t`, *default:* `nil`) - 
  *   `pronunciations` (*type:* `GoogleApi.ContentWarehouse.V1.Model.SocialGraphApiProtoPronunciations.t`, *default:* `nil`) - This field is stored in contact annotations and merged at read-time. It is available with CONTACT_ANNOTATION container type at read time.
  *   `shortDisplayName` (*type:* `String.t`, *default:* `nil`) - NOTE: this is currently NOT IMPLEMENTED due to changed priorities. Clients usually rely on "first name" instead, when a short name is needed. Read-only. A possibly shorter version of the user's name. - The purpose of this field is to address the needs of UIs where a full display name might be too large to fit. Instead of relying on `first_name`, which might not be present, `short_display_name` is preferred. - This is only available for PROFILE and DOMAIN_PROFILE container types. - About the actual content in this field: will be the first name when it's visible to the requester, or the same as `display_name`, otherwise. A sample scenario where the first name may not be visible is when the limited profile is returned. For more info, see: http://shortn/_9iV7TJ33la
  *   `unstructuredName` (*type:* `String.t`, *default:* `nil`) - The free form name value. For contact mutates it is recommended for clients to set either the `unstructured_name` or the set of structured name fields, not both.
  *   `yomiFamilyName` (*type:* `String.t`, *default:* `nil`) - 
  *   `yomiFullName` (*type:* `String.t`, *default:* `nil`) - 
  *   `yomiGivenName` (*type:* `String.t`, *default:* `nil`) - 
  *   `yomiHonorificPrefix` (*type:* `String.t`, *default:* `nil`) - 
  *   `yomiHonorificSuffix` (*type:* `String.t`, *default:* `nil`) - 
  *   `yomiMiddleName` (*type:* `String.t`, *default:* `nil`) - 
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :displayName => String.t() | nil,
          :displayNameLastFirst => String.t() | nil,
          :displayNameSource =>
            GoogleApi.ContentWarehouse.V1.Model.SocialGraphApiProtoDisplayNameSource.t() | nil,
          :familyName => String.t() | nil,
          :formattedName => String.t() | nil,
          :givenName => String.t() | nil,
          :honorificPrefix => String.t() | nil,
          :honorificSuffix => String.t() | nil,
          :metadata =>
            GoogleApi.ContentWarehouse.V1.Model.AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata.t()
            | nil,
          :middleName => String.t() | nil,
          :pronunciations =>
            GoogleApi.ContentWarehouse.V1.Model.SocialGraphApiProtoPronunciations.t() | nil,
          :shortDisplayName => String.t() | nil,
          :unstructuredName => String.t() | nil,
          :yomiFamilyName => String.t() | nil,
          :yomiFullName => String.t() | nil,
          :yomiGivenName => String.t() | nil,
          :yomiHonorificPrefix => String.t() | nil,
          :yomiHonorificSuffix => String.t() | nil,
          :yomiMiddleName => String.t() | nil
        }

  field(:displayName)
  field(:displayNameLastFirst)

  field(:displayNameSource,
    as: GoogleApi.ContentWarehouse.V1.Model.SocialGraphApiProtoDisplayNameSource
  )

  field(:familyName)
  field(:formattedName)
  field(:givenName)
  field(:honorificPrefix)
  field(:honorificSuffix)

  field(:metadata,
    as: GoogleApi.ContentWarehouse.V1.Model.AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata
  )

  field(:middleName)

  field(:pronunciations, as: GoogleApi.ContentWarehouse.V1.Model.SocialGraphApiProtoPronunciations)

  field(:shortDisplayName)
  field(:unstructuredName)
  field(:yomiFamilyName)
  field(:yomiFullName)
  field(:yomiGivenName)
  field(:yomiHonorificPrefix)
  field(:yomiHonorificSuffix)
  field(:yomiMiddleName)
end

defimpl Poison.Decoder,
  for: GoogleApi.ContentWarehouse.V1.Model.AppsPeopleOzExternalMergedpeopleapiName do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.AppsPeopleOzExternalMergedpeopleapiName.decode(
      value,
      options
    )
  end
end

defimpl Poison.Encoder,
  for: GoogleApi.ContentWarehouse.V1.Model.AppsPeopleOzExternalMergedpeopleapiName do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
