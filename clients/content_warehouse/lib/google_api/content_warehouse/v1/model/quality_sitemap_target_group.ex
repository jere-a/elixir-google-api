# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.QualitySitemapTargetGroup do
  @moduledoc """
  Represents a set of targets. The group may have a label field to uniquely identify this target group among others - for instance, if these targets' titles were generated using an alternative title algorithm, the label can be "newtitles". See "Note on adding new fields".

  ## Attributes

  *   `DEPRECATEDCountry` (*type:* `integer()`, *default:* `nil`) - 
  *   `Target` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.QualitySitemapTarget.t)`, *default:* `nil`) - 
  *   `allTargetsNamedAnchors` (*type:* `boolean()`, *default:* `nil`) - If all the targets in this group are named anchors on the source page.
  *   `allTargetsNamedTopictagsScrollto` (*type:* `boolean()`, *default:* `nil`) - If all the targets in this group are named topictags_scrollto on the source page.
  *   `breadcrumbTarget` (*type:* `GoogleApi.ContentWarehouse.V1.Model.QualitySitemapBreadcrumbTarget.t`, *default:* `nil`) - 
  *   `coClickTarget` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.QualitySitemapCoClickTarget.t)`, *default:* `nil`) - 
  *   `countryCode` (*type:* `String.t`, *default:* `nil`) - 
  *   `label` (*type:* `String.t`, *default:* `nil`) - 
  *   `language` (*type:* `integer()`, *default:* `nil`) - 
  *   `modifiedByHostcardHandler` (*type:* `boolean()`, *default:* `nil`) - 
  *   `scoringSignals` (*type:* `GoogleApi.ContentWarehouse.V1.Model.QualitySitemapScoringSignals.t`, *default:* `nil`) - 
  *   `topUrl` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.QualitySitemapTopURL.t)`, *default:* `nil`) - A list of top urls with highest two_level_score, i.e., chrome_trans_clicks.
  *   `twoLevelTarget` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.QualitySitemapTwoLevelTarget.t)`, *default:* `nil`) - 
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :DEPRECATEDCountry => integer() | nil,
          :Target => list(GoogleApi.ContentWarehouse.V1.Model.QualitySitemapTarget.t()) | nil,
          :allTargetsNamedAnchors => boolean() | nil,
          :allTargetsNamedTopictagsScrollto => boolean() | nil,
          :breadcrumbTarget =>
            GoogleApi.ContentWarehouse.V1.Model.QualitySitemapBreadcrumbTarget.t() | nil,
          :coClickTarget =>
            list(GoogleApi.ContentWarehouse.V1.Model.QualitySitemapCoClickTarget.t()) | nil,
          :countryCode => String.t() | nil,
          :label => String.t() | nil,
          :language => integer() | nil,
          :modifiedByHostcardHandler => boolean() | nil,
          :scoringSignals =>
            GoogleApi.ContentWarehouse.V1.Model.QualitySitemapScoringSignals.t() | nil,
          :topUrl => list(GoogleApi.ContentWarehouse.V1.Model.QualitySitemapTopURL.t()) | nil,
          :twoLevelTarget =>
            list(GoogleApi.ContentWarehouse.V1.Model.QualitySitemapTwoLevelTarget.t()) | nil
        }

  field(:DEPRECATEDCountry)
  field(:Target, as: GoogleApi.ContentWarehouse.V1.Model.QualitySitemapTarget, type: :list)
  field(:allTargetsNamedAnchors)
  field(:allTargetsNamedTopictagsScrollto)
  field(:breadcrumbTarget, as: GoogleApi.ContentWarehouse.V1.Model.QualitySitemapBreadcrumbTarget)

  field(:coClickTarget,
    as: GoogleApi.ContentWarehouse.V1.Model.QualitySitemapCoClickTarget,
    type: :list
  )

  field(:countryCode)
  field(:label)
  field(:language)
  field(:modifiedByHostcardHandler)
  field(:scoringSignals, as: GoogleApi.ContentWarehouse.V1.Model.QualitySitemapScoringSignals)
  field(:topUrl, as: GoogleApi.ContentWarehouse.V1.Model.QualitySitemapTopURL, type: :list)

  field(:twoLevelTarget,
    as: GoogleApi.ContentWarehouse.V1.Model.QualitySitemapTwoLevelTarget,
    type: :list
  )
end

defimpl Poison.Decoder, for: GoogleApi.ContentWarehouse.V1.Model.QualitySitemapTargetGroup do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.QualitySitemapTargetGroup.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContentWarehouse.V1.Model.QualitySitemapTargetGroup do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
