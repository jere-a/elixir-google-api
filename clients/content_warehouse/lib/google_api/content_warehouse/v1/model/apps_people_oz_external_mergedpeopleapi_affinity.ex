# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.AppsPeopleOzExternalMergedpeopleapiAffinity do
  @moduledoc """
  Similar to social.graph.storage.Affinity, but pared down to what the clients of the People API are interested in.

  ## Attributes

  *   `affinityMetadata` (*type:* `GoogleApi.ContentWarehouse.V1.Model.SocialGraphWireProtoPeopleapiAffinityMetadata.t`, *default:* `nil`) - Contains extra ranking information returned by DAS.
  *   `affinityType` (*type:* `String.t`, *default:* `nil`) - 
  *   `containerId` (*type:* `String.t`, *default:* `nil`) - The ID of the container
  *   `containerType` (*type:* `String.t`, *default:* `nil`) - The type of container to which this affinity applies
  *   `loggingId` (*type:* `String.t`, *default:* `nil`) - Used to log events for this affinity value, for disco diagnostic-purposes. See go/disco-diagnostics.
  *   `value` (*type:* `float()`, *default:* `nil`) - Affinity value. Frequently represented as an inverse ranking, sometimes with additional data encoded. If data_formats.affinity_formats.score_format is set to RAW_SCORE then the value will be the score returned by DAS.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :affinityMetadata =>
            GoogleApi.ContentWarehouse.V1.Model.SocialGraphWireProtoPeopleapiAffinityMetadata.t()
            | nil,
          :affinityType => String.t() | nil,
          :containerId => String.t() | nil,
          :containerType => String.t() | nil,
          :loggingId => String.t() | nil,
          :value => float() | nil
        }

  field(:affinityMetadata,
    as: GoogleApi.ContentWarehouse.V1.Model.SocialGraphWireProtoPeopleapiAffinityMetadata
  )

  field(:affinityType)
  field(:containerId)
  field(:containerType)
  field(:loggingId)
  field(:value)
end

defimpl Poison.Decoder,
  for: GoogleApi.ContentWarehouse.V1.Model.AppsPeopleOzExternalMergedpeopleapiAffinity do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.AppsPeopleOzExternalMergedpeopleapiAffinity.decode(
      value,
      options
    )
  end
end

defimpl Poison.Encoder,
  for: GoogleApi.ContentWarehouse.V1.Model.AppsPeopleOzExternalMergedpeopleapiAffinity do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
