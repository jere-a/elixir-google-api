# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.GoogleInternalAppsWaldoV1alphaUserStatus do
  @moduledoc """
  The actual status of the user. The message contains everything needed for visualisation of this status.

  ## Attributes

  *   `calendarBusy` (*type:* `GoogleApi.ContentWarehouse.V1.Model.GoogleInternalAppsWaldoV1alphaCalendarBusy.t`, *default:* `nil`) - Set if the user is temporarily busy and there is not a more specific status derived from calendar that applies (e.g., InMeeting or DoNotDisturb).
  *   `doNotDisturb` (*type:* `GoogleApi.ContentWarehouse.V1.Model.GoogleInternalAppsWaldoV1alphaDoNotDisturb.t`, *default:* `nil`) - Set if the user is in a Focus Time block. Note that this is different than Chat's Do not disturb status, but they may coincide, see: go/focus-time-dnd.
  *   `inMeeting` (*type:* `GoogleApi.ContentWarehouse.V1.Model.GoogleInternalAppsWaldoV1alphaInMeeting.t`, *default:* `nil`) - Set if the user is in a meeting.
  *   `inactive` (*type:* `GoogleApi.ContentWarehouse.V1.Model.GoogleInternalAppsWaldoV1alphaInactive.t`, *default:* `nil`) - Set if no other statuses apply.
  *   `outOfOffice` (*type:* `GoogleApi.ContentWarehouse.V1.Model.GoogleInternalAppsWaldoV1alphaOutOfOffice.t`, *default:* `nil`) - Set if the user is out of office.
  *   `outsideWorkingHours` (*type:* `GoogleApi.ContentWarehouse.V1.Model.GoogleInternalAppsWaldoV1alphaOutsideWorkingHours.t`, *default:* `nil`) - Set if the user doesn't work at this time.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :calendarBusy =>
            GoogleApi.ContentWarehouse.V1.Model.GoogleInternalAppsWaldoV1alphaCalendarBusy.t()
            | nil,
          :doNotDisturb =>
            GoogleApi.ContentWarehouse.V1.Model.GoogleInternalAppsWaldoV1alphaDoNotDisturb.t()
            | nil,
          :inMeeting =>
            GoogleApi.ContentWarehouse.V1.Model.GoogleInternalAppsWaldoV1alphaInMeeting.t() | nil,
          :inactive =>
            GoogleApi.ContentWarehouse.V1.Model.GoogleInternalAppsWaldoV1alphaInactive.t() | nil,
          :outOfOffice =>
            GoogleApi.ContentWarehouse.V1.Model.GoogleInternalAppsWaldoV1alphaOutOfOffice.t()
            | nil,
          :outsideWorkingHours =>
            GoogleApi.ContentWarehouse.V1.Model.GoogleInternalAppsWaldoV1alphaOutsideWorkingHours.t()
            | nil
        }

  field(:calendarBusy,
    as: GoogleApi.ContentWarehouse.V1.Model.GoogleInternalAppsWaldoV1alphaCalendarBusy
  )

  field(:doNotDisturb,
    as: GoogleApi.ContentWarehouse.V1.Model.GoogleInternalAppsWaldoV1alphaDoNotDisturb
  )

  field(:inMeeting,
    as: GoogleApi.ContentWarehouse.V1.Model.GoogleInternalAppsWaldoV1alphaInMeeting
  )

  field(:inactive, as: GoogleApi.ContentWarehouse.V1.Model.GoogleInternalAppsWaldoV1alphaInactive)

  field(:outOfOffice,
    as: GoogleApi.ContentWarehouse.V1.Model.GoogleInternalAppsWaldoV1alphaOutOfOffice
  )

  field(:outsideWorkingHours,
    as: GoogleApi.ContentWarehouse.V1.Model.GoogleInternalAppsWaldoV1alphaOutsideWorkingHours
  )
end

defimpl Poison.Decoder,
  for: GoogleApi.ContentWarehouse.V1.Model.GoogleInternalAppsWaldoV1alphaUserStatus do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.GoogleInternalAppsWaldoV1alphaUserStatus.decode(
      value,
      options
    )
  end
end

defimpl Poison.Encoder,
  for: GoogleApi.ContentWarehouse.V1.Model.GoogleInternalAppsWaldoV1alphaUserStatus do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
