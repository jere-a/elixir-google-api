# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.AssistantDevicesPlatformProtoTriggerCondition do
  @moduledoc """
  A TriggerCondition is described as a set of states which must be met by the device. It also includes instructions to the Assistant on what kind of response to execute when the condition is not met.

  ## Attributes

  *   `requiredStateValues` (*type:* `%{optional(String.t) => GoogleApi.ContentWarehouse.V1.Model.AssistantDevicesPlatformProtoArgSpec.t}`, *default:* `nil`) - The map of state keys along with their values which must be returned by the device, for example to start the dishwasher you may require states: {"door": "CLOSED", "detergent_status": "READY"}.
  *   `simpleTts` (*type:* `String.t`, *default:* `nil`) - A simple TTS to play.
  *   `status` (*type:* `String.t`, *default:* `nil`) - Refers to a defined ConditionalResult keyed by its status. It could be a built-in or custom ConditionalResult for this Intent. Note: the states provided by the device MUST contain all of the states required by the ConditionalResult.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :requiredStateValues =>
            %{
              optional(String.t()) =>
                GoogleApi.ContentWarehouse.V1.Model.AssistantDevicesPlatformProtoArgSpec.t()
            }
            | nil,
          :simpleTts => String.t() | nil,
          :status => String.t() | nil
        }

  field(:requiredStateValues,
    as: GoogleApi.ContentWarehouse.V1.Model.AssistantDevicesPlatformProtoArgSpec,
    type: :map
  )

  field(:simpleTts)
  field(:status)
end

defimpl Poison.Decoder,
  for: GoogleApi.ContentWarehouse.V1.Model.AssistantDevicesPlatformProtoTriggerCondition do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.AssistantDevicesPlatformProtoTriggerCondition.decode(
      value,
      options
    )
  end
end

defimpl Poison.Encoder,
  for: GoogleApi.ContentWarehouse.V1.Model.AssistantDevicesPlatformProtoTriggerCondition do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
