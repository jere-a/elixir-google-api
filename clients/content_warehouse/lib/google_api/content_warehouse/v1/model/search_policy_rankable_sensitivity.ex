# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.SearchPolicyRankableSensitivity do
  @moduledoc """
  Encapsulates sensitivity mode, source, and other metadata, used for ranking when there are multiple sensitivies set by default sources (eg, followon, query understanding, attentional entity).

  ## Attributes

  *   `accountProvenance` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.QualityQrewriteAccountProvenance.t)`, *default:* `nil`) - Propagated from knowledge.answers.sensitivity.Sensitivity account_provenance. Any ambiguity between the data here and dasher_user should be resolved by the conversion to pToken in http://source/search?q=symbol:CreatePTokenFromSensitivity
  *   `attentionalEntity` (*type:* `GoogleApi.ContentWarehouse.V1.Model.SearchPolicyRankableSensitivityAttentionalEntity.t`, *default:* `nil`) - 
  *   `dasherUser` (*type:* `boolean()`, *default:* `nil`) - True iff the query is from a Dasher user.
  *   `followon` (*type:* `GoogleApi.ContentWarehouse.V1.Model.SearchPolicyRankableSensitivityFollowOn.t`, *default:* `nil`) - 
  *   `groundingProvider` (*type:* `GoogleApi.ContentWarehouse.V1.Model.SearchPolicyRankableSensitivityGroundingProvider.t`, *default:* `nil`) - 
  *   `prefilter` (*type:* `GoogleApi.ContentWarehouse.V1.Model.SearchPolicyRankableSensitivityPrefilter.t`, *default:* `nil`) - 
  *   `qu` (*type:* `GoogleApi.ContentWarehouse.V1.Model.SearchPolicyRankableSensitivityQueryUnderstanding.t`, *default:* `nil`) - 
  *   `sensitivityMode` (*type:* `String.t`, *default:* `nil`) - Key of a sensitivity.
  *   `syntheticIntent` (*type:* `GoogleApi.ContentWarehouse.V1.Model.SearchPolicyRankableSensitivitySyntheticIntent.t`, *default:* `nil`) - 
  *   `winningFulfillment` (*type:* `GoogleApi.ContentWarehouse.V1.Model.SearchPolicyRankableSensitivityFulfillment.t`, *default:* `nil`) - 
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :accountProvenance =>
            list(GoogleApi.ContentWarehouse.V1.Model.QualityQrewriteAccountProvenance.t()) | nil,
          :attentionalEntity =>
            GoogleApi.ContentWarehouse.V1.Model.SearchPolicyRankableSensitivityAttentionalEntity.t()
            | nil,
          :dasherUser => boolean() | nil,
          :followon =>
            GoogleApi.ContentWarehouse.V1.Model.SearchPolicyRankableSensitivityFollowOn.t() | nil,
          :groundingProvider =>
            GoogleApi.ContentWarehouse.V1.Model.SearchPolicyRankableSensitivityGroundingProvider.t()
            | nil,
          :prefilter =>
            GoogleApi.ContentWarehouse.V1.Model.SearchPolicyRankableSensitivityPrefilter.t() | nil,
          :qu =>
            GoogleApi.ContentWarehouse.V1.Model.SearchPolicyRankableSensitivityQueryUnderstanding.t()
            | nil,
          :sensitivityMode => String.t() | nil,
          :syntheticIntent =>
            GoogleApi.ContentWarehouse.V1.Model.SearchPolicyRankableSensitivitySyntheticIntent.t()
            | nil,
          :winningFulfillment =>
            GoogleApi.ContentWarehouse.V1.Model.SearchPolicyRankableSensitivityFulfillment.t()
            | nil
        }

  field(:accountProvenance,
    as: GoogleApi.ContentWarehouse.V1.Model.QualityQrewriteAccountProvenance,
    type: :list
  )

  field(:attentionalEntity,
    as: GoogleApi.ContentWarehouse.V1.Model.SearchPolicyRankableSensitivityAttentionalEntity
  )

  field(:dasherUser)

  field(:followon, as: GoogleApi.ContentWarehouse.V1.Model.SearchPolicyRankableSensitivityFollowOn)

  field(:groundingProvider,
    as: GoogleApi.ContentWarehouse.V1.Model.SearchPolicyRankableSensitivityGroundingProvider
  )

  field(:prefilter,
    as: GoogleApi.ContentWarehouse.V1.Model.SearchPolicyRankableSensitivityPrefilter
  )

  field(:qu,
    as: GoogleApi.ContentWarehouse.V1.Model.SearchPolicyRankableSensitivityQueryUnderstanding
  )

  field(:sensitivityMode)

  field(:syntheticIntent,
    as: GoogleApi.ContentWarehouse.V1.Model.SearchPolicyRankableSensitivitySyntheticIntent
  )

  field(:winningFulfillment,
    as: GoogleApi.ContentWarehouse.V1.Model.SearchPolicyRankableSensitivityFulfillment
  )
end

defimpl Poison.Decoder, for: GoogleApi.ContentWarehouse.V1.Model.SearchPolicyRankableSensitivity do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.SearchPolicyRankableSensitivity.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContentWarehouse.V1.Model.SearchPolicyRankableSensitivity do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
