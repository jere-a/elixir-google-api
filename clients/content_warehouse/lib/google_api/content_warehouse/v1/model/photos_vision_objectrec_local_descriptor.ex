# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.PhotosVisionObjectrecLocalDescriptor do
  @moduledoc """
  LocalDescriptor holds interest point data and an optional local descriptor vector.

  ## Attributes

  *   `affineMatrix` (*type:* `GoogleApi.ContentWarehouse.V1.Model.PhotosVisionObjectrecMatrix2D.t`, *default:* `nil`) - Optional affine matrix. Supersedes scale and orientation if present. r' = affine_matrix.r + (x,y) defines an affine transform from the normalized image patch (in which the interest point is centered at the origin with scale 1) to the image. If the affine matrix is set, the following approximations are recommended: scale = sqrt(0.5 * (xx*xx + xy*xy + yx*yx + yy*yy)); orientation = atan2(yx - xy, xx + yy); If not present, the affine matrix can be computed from scale and orientation as: xx = scale * cos(orientation); xy = scale * -sin(orientation); yx = scale * sin(orientation); yy = scale * cos(orientation);
  *   `data` (*type:* `String.t`, *default:* `nil`) - 
  *   `dataFactor` (*type:* `number()`, *default:* `nil`) - data_factor and data represent the local descriptor vector in a compressed format, using only 8 bit per value. Each byte of the data string yields one component of the local descriptor by bit-casting it to an int8 and multiplying it by data_factor. Protocol buffers do not support int8 directly.
  *   `featureVector` (*type:* `GoogleApi.ContentWarehouse.V1.Model.PhotosVisionObjectrecFeatureVector.t`, *default:* `nil`) - Unquantized feature vector (float).
  *   `opaqueData` (*type:* `String.t`, *default:* `nil`) - Opaque descriptor data. May be used to pass through descriptor data from descriptor sources to processing modules, that is not already covered by data/data_factor and/or cannot be expressed as a vector of numbers. It is the responsibility of processing modules to verify that the data is in a compatible format.
  *   `orientation` (*type:* `number()`, *default:* `nil`) - Orientation is optional, as some interest point detectors don't compute it. The range of orientation is [-pi,pi).
  *   `scale` (*type:* `number()`, *default:* `nil`) - Each interest point must have a characteristic scale > 0.
  *   `strength` (*type:* `number()`, *default:* `nil`) - The strength or weight, indicating the relative significance of this point.
  *   `x` (*type:* `number()`, *default:* `nil`) - The position in the image with sub-pixel accuracy. The center of the upper left pixel has coordinates (0.0, 0.0). Thus the range for x and y is (-0.5, width - 0.5) x (-0.5, height - 0.5).
  *   `y` (*type:* `number()`, *default:* `nil`) - 
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :affineMatrix =>
            GoogleApi.ContentWarehouse.V1.Model.PhotosVisionObjectrecMatrix2D.t() | nil,
          :data => String.t() | nil,
          :dataFactor => number() | nil,
          :featureVector =>
            GoogleApi.ContentWarehouse.V1.Model.PhotosVisionObjectrecFeatureVector.t() | nil,
          :opaqueData => String.t() | nil,
          :orientation => number() | nil,
          :scale => number() | nil,
          :strength => number() | nil,
          :x => number() | nil,
          :y => number() | nil
        }

  field(:affineMatrix, as: GoogleApi.ContentWarehouse.V1.Model.PhotosVisionObjectrecMatrix2D)
  field(:data)
  field(:dataFactor)

  field(:featureVector, as: GoogleApi.ContentWarehouse.V1.Model.PhotosVisionObjectrecFeatureVector)

  field(:opaqueData)
  field(:orientation)
  field(:scale)
  field(:strength)
  field(:x)
  field(:y)
end

defimpl Poison.Decoder,
  for: GoogleApi.ContentWarehouse.V1.Model.PhotosVisionObjectrecLocalDescriptor do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.PhotosVisionObjectrecLocalDescriptor.decode(
      value,
      options
    )
  end
end

defimpl Poison.Encoder,
  for: GoogleApi.ContentWarehouse.V1.Model.PhotosVisionObjectrecLocalDescriptor do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
