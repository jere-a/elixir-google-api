# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.IndexingConverterRedirectParams do
  @moduledoc """
  If we detect any server or content based redirect, we will store the characteristics in this message.

  ## Attributes

  *   `delay` (*type:* `integer()`, *default:* `nil`) - The time difference between page loading and redirect occurrence. When missing, it means the redirect happens immediately (i.e. delay = 0). In seconds.
  *   `frameTargetDeniesFraming` (*type:* `boolean()`, *default:* `nil`) - Populated for SINGLE_FRAME and SINGLE_IFRAME redirects only and indicates that the target url requested not to be framed, by virtue of using the "X-Frame-Options" HTTP header.
  *   `isDownload` (*type:* `boolean()`, *default:* `nil`) - Indicates corresponding redirect is a download. This field is only set when rendering redirect chain is used. This field represents the value of corresponding "RedirectEvent.target_content_downloaded" field.
  *   `isRenderingRedirect` (*type:* `boolean()`, *default:* `nil`) - Indicates corresponding redirect is from rendering if set to true.
  *   `metaRedirectFromTrawler` (*type:* `boolean()`, *default:* `nil`) - If set, it means that the redirect of type META was detected by Trawler (as opposed to the content processor.) Only makes sense when type is META.
  *   `type` (*type:* `String.t`, *default:* `nil`) - 
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :delay => integer() | nil,
          :frameTargetDeniesFraming => boolean() | nil,
          :isDownload => boolean() | nil,
          :isRenderingRedirect => boolean() | nil,
          :metaRedirectFromTrawler => boolean() | nil,
          :type => String.t() | nil
        }

  field(:delay)
  field(:frameTargetDeniesFraming)
  field(:isDownload)
  field(:isRenderingRedirect)
  field(:metaRedirectFromTrawler)
  field(:type)
end

defimpl Poison.Decoder, for: GoogleApi.ContentWarehouse.V1.Model.IndexingConverterRedirectParams do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.IndexingConverterRedirectParams.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContentWarehouse.V1.Model.IndexingConverterRedirectParams do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
