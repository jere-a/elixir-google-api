# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.GoodocLogicalEntityLink do
  @moduledoc """
  NOTE(gponcin) 2008/11 This is repeated for articles where we may have multiple links in one entity. From Vivek (Atlantis): "The block segmenter outputs a list of headlines on a page as a single logical entity that we attach to the logicalentity(1) for the goodoc."

  ## Attributes

  *   `Anchor` (*type:* `String.t`, *default:* `nil`) - The preferred way to link to an element is to create an AnchorLabel in the target element and name it here. Multiple elements may contain the same Anchor string.
  *   `BlockId` (*type:* `integer()`, *default:* `nil`) - 
  *   `DocId` (*type:* `integer()`, *default:* `nil`) - Links may also specifically locate the target element with the following indices. Note that during the course of layout analysis, goodoc elements may move around, so such hard links should be created only very late (or not at all -- Anchors would be more reliable target addresses).
  *   `PageId` (*type:* `integer()`, *default:* `nil`) - 
  *   `ParagraphId` (*type:* `integer()`, *default:* `nil`) - 
  *   `RouteId` (*type:* `integer()`, *default:* `nil`) - 
  *   `SymbolId` (*type:* `integer()`, *default:* `nil`) - 
  *   `Url` (*type:* `String.t`, *default:* `nil`) - If not defined, link points to the current doc
  *   `WordId` (*type:* `integer()`, *default:* `nil`) - 
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :Anchor => String.t() | nil,
          :BlockId => integer() | nil,
          :DocId => integer() | nil,
          :PageId => integer() | nil,
          :ParagraphId => integer() | nil,
          :RouteId => integer() | nil,
          :SymbolId => integer() | nil,
          :Url => String.t() | nil,
          :WordId => integer() | nil
        }

  field(:Anchor)
  field(:BlockId)
  field(:DocId)
  field(:PageId)
  field(:ParagraphId)
  field(:RouteId)
  field(:SymbolId)
  field(:Url)
  field(:WordId)
end

defimpl Poison.Decoder, for: GoogleApi.ContentWarehouse.V1.Model.GoodocLogicalEntityLink do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.GoodocLogicalEntityLink.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContentWarehouse.V1.Model.GoodocLogicalEntityLink do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
