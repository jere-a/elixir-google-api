# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.SecurityCredentialsRbacRoleProto do
  @moduledoc """
  Principal associated with a given RBAC role. This principal is used by Sphinx Provisioning Service for RBAC provisionable (go/sphinx-rbacz).

  ## Attributes

  *   `name` (*type:* `String.t`, *default:* `nil`) - 
  *   `objectId` (*type:* `String.t`, *default:* `nil`) - 
  *   `rbacNamespace` (*type:* `String.t`, *default:* `nil`) - DEPRECATED as of 01.11.2019
  *   `rbacRoleName` (*type:* `String.t`, *default:* `nil`) - Format: "role/z?" - "role" is the Sphinx globally unique name of the Sphinx role that provisions the RBAC role. - "/z?" suffix indicates which Zanzibar environment stores the role membership data ("/zd": dev, "/zs": staging, "/zp": prod, "/zt": local test instance). Example: "mysystem_myrole/zp"
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :name => String.t() | nil,
          :objectId => String.t() | nil,
          :rbacNamespace => String.t() | nil,
          :rbacRoleName => String.t() | nil
        }

  field(:name)
  field(:objectId)
  field(:rbacNamespace)
  field(:rbacRoleName)
end

defimpl Poison.Decoder, for: GoogleApi.ContentWarehouse.V1.Model.SecurityCredentialsRbacRoleProto do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.SecurityCredentialsRbacRoleProto.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContentWarehouse.V1.Model.SecurityCredentialsRbacRoleProto do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
