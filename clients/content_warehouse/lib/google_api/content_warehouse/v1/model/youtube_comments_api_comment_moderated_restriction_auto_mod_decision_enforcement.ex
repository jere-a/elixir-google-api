# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.YoutubeCommentsApiCommentModeratedRestrictionAutoModDecisionEnforcement do
  @moduledoc """
  Whether a HOLD decision is enforced based on the decision name and QPS requirement. For LiveChat, there could be multiple Automod moderations generated at chat message creation time. Only HOLD decisions are persisted. At most one HOLD decision can be enforced based on write QPS.

  ## Attributes

  *   `enforced` (*type:* `boolean()`, *default:* `nil`) - Whether or not the decision is enforced.
  *   `name` (*type:* `String.t`, *default:* `nil`) - Current the enforcement rule depends on live chat write QPS at chat message creation time. Enforce MEDIAN when QPS<=4. Enforce HIGH_RECALL when QPS>4 AND QPS<=10. Enforce ULTRA_HIGH_RECALL when QPS>10.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :enforced => boolean() | nil,
          :name => String.t() | nil
        }

  field(:enforced)
  field(:name)
end

defimpl Poison.Decoder,
  for:
    GoogleApi.ContentWarehouse.V1.Model.YoutubeCommentsApiCommentModeratedRestrictionAutoModDecisionEnforcement do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.YoutubeCommentsApiCommentModeratedRestrictionAutoModDecisionEnforcement.decode(
      value,
      options
    )
  end
end

defimpl Poison.Encoder,
  for:
    GoogleApi.ContentWarehouse.V1.Model.YoutubeCommentsApiCommentModeratedRestrictionAutoModDecisionEnforcement do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
