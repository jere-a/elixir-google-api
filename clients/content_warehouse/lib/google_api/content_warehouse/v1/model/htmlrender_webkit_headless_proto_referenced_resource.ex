# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.HtmlrenderWebkitHeadlessProtoReferencedResource do
  @moduledoc """
  ReferencedResource contains an entry per url referenced by the browser while rendering a document. Next tag available: 20

  ## Attributes

  *   `canceled` (*type:* `boolean()`, *default:* `nil`) - True if this fetch was canceled due to render server policy. e.g. the page exceeded the fetch budget or an extension canceled the fetch.
  *   `contentType` (*type:* `integer()`, *default:* `nil`) - Content type of this resource (webutil/http/content-type.h). The content type is from guess based on the file extension, any mime type in http headers at the beginning of the content, any content-disposition http header, and the content body itself. Note: the content type defined in webutil/http/content-type.proto is incomplete. If you are interested in missing types, please update the enum and the logic of content type detection.
  *   `domTreeNodeIndex` (*type:* `list(integer())`, *default:* `nil`) - DOMTreeNode index which has the url as one of its attributes specified using either src, href or background attributes. src attribute applies to img, script, frame and iframe nodes, href applies to link nodes and background applies to body node. It is possible for a url to be referenced by multiple DOM nodes. For e.g. an tag with the same src attribute can occur in multiple places within a document. It is possible for a url to not have any DOM node reference. For example, redirects don't have DOM tree nodes.
  *   `failedHttpAccessControlCheck` (*type:* `boolean()`, *default:* `nil`) - True when a HTTP request succeeded but the resource was not made accessible to script due to a HTTP Access Control (CORS) failure. This field is not implemented on Chromium.
  *   `fetchSourceInfo` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.WirelessTranscoderFetchFetchSourceInfo.t)`, *default:* `nil`) - Where this resource comes from.
  *   `fetchStatus` (*type:* `String.t`, *default:* `nil`) - The FetchStatus returned by the fetcher. Values are taken from wireless_transcoder_fetch.FetchConstants.FetchStatus in fetch_service.proto. The default value is SUCCESS(0).
  *   `httpHeader` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.HtmlrenderWebkitHeadlessProtoReferencedResourceHttpHeader.t)`, *default:* `nil`) - HTTP headers from the fetcher.
  *   `httpResponseCode` (*type:* `integer()`, *default:* `nil`) - HTTP response code if we had tried to fetch the url. Absence of this field indicates either we have not tried to fetch the url or the fetcher never got back to us with any response.
  *   `metadata` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.WirelessTranscoderFetchFetchMetadata.t)`, *default:* `nil`) - 
  *   `postData` (*type:* `String.t`, *default:* `nil`) - The post_data field is only valid when the HTTP request method is POST.
  *   `redirectTarget` (*type:* `String.t`, *default:* `nil`) - If the http_response_code is a HTTP redirect, the redirect target will be stored here.
  *   `referencedResourceContentIndex` (*type:* `integer()`, *default:* `nil`) - Indicates which referenced_resource_content (in RenderResponse) this RefencedResource points to. This field will be set only when there is referenced_resource_content for this RefencedResource in RenderResponse.
  *   `requestHeader` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.HtmlrenderWebkitHeadlessProtoReferencedResourceHttpHeader.t)`, *default:* `nil`) - Only necessary headers are recorded. See google3/htmlrender/webkit_headless/resource_key.cc
  *   `requestMethod` (*type:* `integer()`, *default:* `nil`) - The HTTP request method (GET, HEAD, POST, etc) used for this request. Values are taken from the HTTPHeaders::Protocol enum in webutil/http/httputils.h. HTTPHeaders::PROTO_GET
  *   `styleIndex` (*type:* `list(integer())`, *default:* `nil`) - style index which has the url specified using either the background-image property or the list-style-image property.
  *   `synchronouslyFetched` (*type:* `boolean()`, *default:* `nil`) - Whether it is synchronously fetched.
  *   `timing` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.HtmlrenderWebkitHeadlessProtoReferencedResourceFetchTiming.t)`, *default:* `nil`) - 
  *   `url` (*type:* `String.t`, *default:* `nil`) - Does not have a #fragment.
  *   `webkitMetadata` (*type:* `GoogleApi.ContentWarehouse.V1.Model.HtmlrenderWebkitHeadlessProtoWebKitFetchMetadata.t`, *default:* `nil`) - Additional information webkit about this resource. e.g. intended usage
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :canceled => boolean() | nil,
          :contentType => integer() | nil,
          :domTreeNodeIndex => list(integer()) | nil,
          :failedHttpAccessControlCheck => boolean() | nil,
          :fetchSourceInfo =>
            list(GoogleApi.ContentWarehouse.V1.Model.WirelessTranscoderFetchFetchSourceInfo.t())
            | nil,
          :fetchStatus => String.t() | nil,
          :httpHeader =>
            list(
              GoogleApi.ContentWarehouse.V1.Model.HtmlrenderWebkitHeadlessProtoReferencedResourceHttpHeader.t()
            )
            | nil,
          :httpResponseCode => integer() | nil,
          :metadata =>
            list(GoogleApi.ContentWarehouse.V1.Model.WirelessTranscoderFetchFetchMetadata.t())
            | nil,
          :postData => String.t() | nil,
          :redirectTarget => String.t() | nil,
          :referencedResourceContentIndex => integer() | nil,
          :requestHeader =>
            list(
              GoogleApi.ContentWarehouse.V1.Model.HtmlrenderWebkitHeadlessProtoReferencedResourceHttpHeader.t()
            )
            | nil,
          :requestMethod => integer() | nil,
          :styleIndex => list(integer()) | nil,
          :synchronouslyFetched => boolean() | nil,
          :timing =>
            list(
              GoogleApi.ContentWarehouse.V1.Model.HtmlrenderWebkitHeadlessProtoReferencedResourceFetchTiming.t()
            )
            | nil,
          :url => String.t() | nil,
          :webkitMetadata =>
            GoogleApi.ContentWarehouse.V1.Model.HtmlrenderWebkitHeadlessProtoWebKitFetchMetadata.t()
            | nil
        }

  field(:canceled)
  field(:contentType)
  field(:domTreeNodeIndex, type: :list)
  field(:failedHttpAccessControlCheck)

  field(:fetchSourceInfo,
    as: GoogleApi.ContentWarehouse.V1.Model.WirelessTranscoderFetchFetchSourceInfo,
    type: :list
  )

  field(:fetchStatus)

  field(:httpHeader,
    as:
      GoogleApi.ContentWarehouse.V1.Model.HtmlrenderWebkitHeadlessProtoReferencedResourceHttpHeader,
    type: :list
  )

  field(:httpResponseCode)

  field(:metadata,
    as: GoogleApi.ContentWarehouse.V1.Model.WirelessTranscoderFetchFetchMetadata,
    type: :list
  )

  field(:postData)
  field(:redirectTarget)
  field(:referencedResourceContentIndex)

  field(:requestHeader,
    as:
      GoogleApi.ContentWarehouse.V1.Model.HtmlrenderWebkitHeadlessProtoReferencedResourceHttpHeader,
    type: :list
  )

  field(:requestMethod)
  field(:styleIndex, type: :list)
  field(:synchronouslyFetched)

  field(:timing,
    as:
      GoogleApi.ContentWarehouse.V1.Model.HtmlrenderWebkitHeadlessProtoReferencedResourceFetchTiming,
    type: :list
  )

  field(:url)

  field(:webkitMetadata,
    as: GoogleApi.ContentWarehouse.V1.Model.HtmlrenderWebkitHeadlessProtoWebKitFetchMetadata
  )
end

defimpl Poison.Decoder,
  for: GoogleApi.ContentWarehouse.V1.Model.HtmlrenderWebkitHeadlessProtoReferencedResource do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.HtmlrenderWebkitHeadlessProtoReferencedResource.decode(
      value,
      options
    )
  end
end

defimpl Poison.Encoder,
  for: GoogleApi.ContentWarehouse.V1.Model.HtmlrenderWebkitHeadlessProtoReferencedResource do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
