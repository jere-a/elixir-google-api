# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingAnnotationEvalData do
  @moduledoc """
  Annotators whose semantics are represented via a protocol message should add to that message a field or extension of this type and set it using Annotator::PopulateAnnotationEvalData to enable span-based evaluation metrics in training. Evaluation is done based on token spans. The byte span aligns with the token span and is used when saving examples. Background: In some settings, the examples used to induce/train a grammar do not specify complete semantics of an annotation. For example, some examples that come from Ewok specify only the span associated with each annotation. This message allows evaluation metrics to test the span by embedding it in the semantics. LINT.IfChange

  ## Attributes

  *   `additionalSpans` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingAnnotationEvalData.t)`, *default:* `nil`) - Additional spans after the first. Empty in all additional_spans.
  *   `numBytes` (*type:* `integer()`, *default:* `nil`) - 
  *   `numTokens` (*type:* `integer()`, *default:* `nil`) - 
  *   `startByte` (*type:* `integer()`, *default:* `nil`) - Byte position within the utterance. Safe to use across different components of the NLU stack as long as said components have access to the same query.
  *   `startToken` (*type:* `integer()`, *default:* `nil`) - Token position. This is cleared when normalizing examples for storage because tokenization changes over time. DO NOT use these two fields across components that use different tokenizations.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :additionalSpans =>
            list(GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingAnnotationEvalData.t())
            | nil,
          :numBytes => integer() | nil,
          :numTokens => integer() | nil,
          :startByte => integer() | nil,
          :startToken => integer() | nil
        }

  field(:additionalSpans,
    as: GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingAnnotationEvalData,
    type: :list
  )

  field(:numBytes)
  field(:numTokens)
  field(:startByte)
  field(:startToken)
end

defimpl Poison.Decoder,
  for: GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingAnnotationEvalData do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingAnnotationEvalData.decode(
      value,
      options
    )
  end
end

defimpl Poison.Encoder,
  for: GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingAnnotationEvalData do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
