# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.MapsQualitySpecialWordsProto do
  @moduledoc """
  The goal of the special words are to: - Canonicalize the user query by rewriting abbreviations into the canonical version that is indexed. - Figure out at index time for each element which tokens are important. We use this to decide if an address component is matched or not. For instance in "1600 Pennsylvania Ave NW" since "NW" is recognised as a directional (and "Ave" is recognised as a street visible type), "Pennsylvania" becomes the name and you can't match this street by just specifying "avenue" or "NW". 

  ## Attributes

  *   `alternate` (*type:* `list(String.t)`, *default:* `nil`) - Alternate versions of this canonical form. This is mainly abbreviations of the canonical form e.g. "St", "NE", etc. This should be present as it is used in the specified language with the correct capitalization, accents, etc. in UTF-8.
  *   `canonical` (*type:* `list(String.t)`, *default:* `nil`) - Canonical versions: the version which is in oyster. This should be present as it is used in the specified language with the correct capitalization, accents, etc. in UTF-8. The canonical can be a single or a multi-token string. There can be several canonicals, e.g. "center" and "centre" in English.
  *   `country` (*type:* `list(String.t)`, *default:* `nil`) - If empty, apply this rule to any country. Otherwise, a list of ISO 3166-1 alpha-2 (2-letter uppercase) country codes that this description applies to.
  *   `flags` (*type:* `GoogleApi.ContentWarehouse.V1.Model.MapsQualitySpecialWordsFlags.t`, *default:* `nil`) - Boolean flags indicating what type of special word this is.
  *   `language` (*type:* `list(String.t)`, *default:* `nil`) - The III language code of the language that this description applies to. No language means that this applies worldwide. This could be useful for codes like country codes or airport codes or for displayed language neutral icons. A special word with a language code here also applies to the regional variants of that language (e.g. "en" applies to "en-GB" and "en-US" as well).
  *   `position` (*type:* `String.t`, *default:* `nil`) - 
  *   `visibleTypeId` (*type:* `list(String.t)`, *default:* `nil`) - visible_type_id from VisibleTypeProto for visible types converted to the special words. For original special words this field is empty.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :alternate => list(String.t()) | nil,
          :canonical => list(String.t()) | nil,
          :country => list(String.t()) | nil,
          :flags => GoogleApi.ContentWarehouse.V1.Model.MapsQualitySpecialWordsFlags.t() | nil,
          :language => list(String.t()) | nil,
          :position => String.t() | nil,
          :visibleTypeId => list(String.t()) | nil
        }

  field(:alternate, type: :list)
  field(:canonical, type: :list)
  field(:country, type: :list)
  field(:flags, as: GoogleApi.ContentWarehouse.V1.Model.MapsQualitySpecialWordsFlags)
  field(:language, type: :list)
  field(:position)
  field(:visibleTypeId, type: :list)
end

defimpl Poison.Decoder, for: GoogleApi.ContentWarehouse.V1.Model.MapsQualitySpecialWordsProto do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.MapsQualitySpecialWordsProto.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContentWarehouse.V1.Model.MapsQualitySpecialWordsProto do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
