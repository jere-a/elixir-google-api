# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.CountryLocationInfo do
  @moduledoc """
  This represents one location.

  ## Attributes

  *   `center` (*type:* `GoogleApi.ContentWarehouse.V1.Model.GeostorePointProto.t`, *default:* `nil`) - The latitude and longitude of the conceptual center of the location. For cities, this would be the center of the downtown, or maybe the location of city hall. For states and countries it might be the capital city. But there are no guarantees and this may be any random point inside the location.
  *   `city` (*type:* `String.t`, *default:* `nil`) - 
  *   `country` (*type:* `String.t`, *default:* `nil`) - Human readable name hierarchy. Only the relevant fields will be present. For example for city GeoLocations, sub_locality field will not be present. Cleared during index creation.
  *   `county` (*type:* `String.t`, *default:* `nil`) - 
  *   `enclosingStateFeatureId` (*type:* `GoogleApi.ContentWarehouse.V1.Model.GeostoreFeatureIdProto.t`, *default:* `nil`) - Oyster feature ID of the enclosing state. Cleared during index creation.
  *   `featureId` (*type:* `GoogleApi.ContentWarehouse.V1.Model.GeostoreFeatureIdProto.t`, *default:* `nil`) - Oyster feature ID of the location. Cleared during index creation.
  *   `state` (*type:* `String.t`, *default:* `nil`) - 
  *   `stateIdFprint` (*type:* `integer()`, *default:* `nil`) - 32 bit fingerprint of the feature id of the state of this location. For cities and sub-localities it will be the enclosing state. For state locations, it will be fingerprint of the feture-id of the location itself. Populated during index creation.
  *   `subLocality` (*type:* `String.t`, *default:* `nil`) - 
  *   `type` (*type:* `String.t`, *default:* `nil`) - Type of the location (sub-locality, city, state etc).
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :center => GoogleApi.ContentWarehouse.V1.Model.GeostorePointProto.t() | nil,
          :city => String.t() | nil,
          :country => String.t() | nil,
          :county => String.t() | nil,
          :enclosingStateFeatureId =>
            GoogleApi.ContentWarehouse.V1.Model.GeostoreFeatureIdProto.t() | nil,
          :featureId => GoogleApi.ContentWarehouse.V1.Model.GeostoreFeatureIdProto.t() | nil,
          :state => String.t() | nil,
          :stateIdFprint => integer() | nil,
          :subLocality => String.t() | nil,
          :type => String.t() | nil
        }

  field(:center, as: GoogleApi.ContentWarehouse.V1.Model.GeostorePointProto)
  field(:city)
  field(:country)
  field(:county)
  field(:enclosingStateFeatureId, as: GoogleApi.ContentWarehouse.V1.Model.GeostoreFeatureIdProto)
  field(:featureId, as: GoogleApi.ContentWarehouse.V1.Model.GeostoreFeatureIdProto)
  field(:state)
  field(:stateIdFprint)
  field(:subLocality)
  field(:type)
end

defimpl Poison.Decoder, for: GoogleApi.ContentWarehouse.V1.Model.CountryLocationInfo do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.CountryLocationInfo.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContentWarehouse.V1.Model.CountryLocationInfo do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
