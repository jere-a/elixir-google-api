# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.ImageRegionsImageRegions do
  @moduledoc """
  An image with regions within it. NEXT_ID: 11

  ## Attributes

  *   `finalPornScore` (*type:* `number()`, *default:* `nil`) - The final_porn_score for the image.
  *   `finalViolenceScore` (*type:* `number()`, *default:* `nil`) - The final_violence_score for the image.
  *   `flowOutput` (*type:* `GoogleApi.ContentWarehouse.V1.Model.ImageContentFlowProtoProd.t`, *default:* `nil`) - The output of various features generated by the Flow framework, most importantly data from Starburst (go/starburst).
  *   `has300kThumb` (*type:* `boolean()`, *default:* `nil`) - True if the image has a 300k thumb.
  *   `hasNavboost` (*type:* `boolean()`, *default:* `nil`) - True if the image has navboost.
  *   `isIuInappropriate` (*type:* `boolean()`, *default:* `nil`) - True if the image is iu-inappropriate.
  *   `pedoScore` (*type:* `number()`, *default:* `nil`) - The pedo_score of the image.
  *   `precomputedRestricts` (*type:* `GoogleApi.ContentWarehouse.V1.Model.PrecomputedRestricts.t`, *default:* `nil`) - The precomputed restricts for the image.
  *   `racyScore` (*type:* `number()`, *default:* `nil`) - The racy_score of the image.
  *   `region` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.ImageRegionsImageRegion.t)`, *default:* `nil`) - The list of regions.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :finalPornScore => number() | nil,
          :finalViolenceScore => number() | nil,
          :flowOutput => GoogleApi.ContentWarehouse.V1.Model.ImageContentFlowProtoProd.t() | nil,
          :has300kThumb => boolean() | nil,
          :hasNavboost => boolean() | nil,
          :isIuInappropriate => boolean() | nil,
          :pedoScore => number() | nil,
          :precomputedRestricts =>
            GoogleApi.ContentWarehouse.V1.Model.PrecomputedRestricts.t() | nil,
          :racyScore => number() | nil,
          :region => list(GoogleApi.ContentWarehouse.V1.Model.ImageRegionsImageRegion.t()) | nil
        }

  field(:finalPornScore)
  field(:finalViolenceScore)
  field(:flowOutput, as: GoogleApi.ContentWarehouse.V1.Model.ImageContentFlowProtoProd)
  field(:has300kThumb)
  field(:hasNavboost)
  field(:isIuInappropriate)
  field(:pedoScore)
  field(:precomputedRestricts, as: GoogleApi.ContentWarehouse.V1.Model.PrecomputedRestricts)
  field(:racyScore)
  field(:region, as: GoogleApi.ContentWarehouse.V1.Model.ImageRegionsImageRegion, type: :list)
end

defimpl Poison.Decoder, for: GoogleApi.ContentWarehouse.V1.Model.ImageRegionsImageRegions do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.ImageRegionsImageRegions.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContentWarehouse.V1.Model.ImageRegionsImageRegions do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
