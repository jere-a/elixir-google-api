# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingModelsDialogReferentsDialogReferents do
  @moduledoc """
  Will be used by dialog_referent subgrammar to emit types annotations from DialogReferentsAnnotator and $DialogReferentOrdinal rules.

  ## Attributes

  *   `evalData` (*type:* `GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingAnnotationEvalData.t`, *default:* `nil`) - 
  *   `field` (*type:* `GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingModelsDialogReferentsListSelection.t`, *default:* `nil`) - The field mentioned in the user's utterance, if any.
  *   `index` (*type:* `integer()`, *default:* `nil`) - Used for a grammar mention of an index.
  *   `next` (*type:* `GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingModelsDialogReferentsDialogReferents.t`, *default:* `nil`) - Represents a tied referent in a different field of the same label
  *   `selection` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingModelsDialogReferentsListSelection.t)`, *default:* `nil`) - The requested value(s) for selection from a list of alternatives.
  *   `taskMention` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingModelsDialogReferentsListSelection.t)`, *default:* `nil`) - Set when the user's utterance refers to the (an) overall task/goal of the dialog (e.g. "the meeting starts at 10 am" mentions the goal, "meeting"). The field is repeated in case the user ambiguously identifies a task (two tasks named 'meeting').
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :evalData =>
            GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingAnnotationEvalData.t() | nil,
          :field =>
            GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingModelsDialogReferentsListSelection.t()
            | nil,
          :index => integer() | nil,
          :next =>
            GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingModelsDialogReferentsDialogReferents.t()
            | nil,
          :selection =>
            list(
              GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingModelsDialogReferentsListSelection.t()
            )
            | nil,
          :taskMention =>
            list(
              GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingModelsDialogReferentsListSelection.t()
            )
            | nil
        }

  field(:evalData, as: GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingAnnotationEvalData)

  field(:field,
    as: GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingModelsDialogReferentsListSelection
  )

  field(:index)

  field(:next,
    as: GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingModelsDialogReferentsDialogReferents
  )

  field(:selection,
    as: GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingModelsDialogReferentsListSelection,
    type: :list
  )

  field(:taskMention,
    as: GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingModelsDialogReferentsListSelection,
    type: :list
  )
end

defimpl Poison.Decoder,
  for: GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingModelsDialogReferentsDialogReferents do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingModelsDialogReferentsDialogReferents.decode(
      value,
      options
    )
  end
end

defimpl Poison.Encoder,
  for: GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingModelsDialogReferentsDialogReferents do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
