# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.KnowledgeAnswersSensitivityInstruction do
  @moduledoc """
  Instructions (eg., logging, disambiguation, ads serving) of handling a sensitive intent and its data. LINT.IfChange NextId: 8

  ## Attributes

  *   `argument` (*type:* `GoogleApi.ContentWarehouse.V1.Model.KnowledgeAnswersSensitivityInstructionArgument.t`, *default:* `nil`) - 
  *   `intent` (*type:* `GoogleApi.ContentWarehouse.V1.Model.KnowledgeAnswersSensitivityInstructionIntent.t`, *default:* `nil`) - 
  *   `legacyAssistantSensitivity` (*type:* `GoogleApi.ContentWarehouse.V1.Model.SearchPolicyRankableSensitivity.t`, *default:* `nil`) - This field is for backward compatibility.
  *   `multiAccountAllowed` (*type:* `boolean()`, *default:* `nil`) - Controls whether a top-level intent is multi-account approved. NLU will do go/cross-account-understanding only for intents with this bit on. Also, this bit should be propagated to user turn Attentionl Entities to extend protection of cross-account data to next turns. In principle fulfillment services (e.g., Monastery) should only dispatch such intents to multi-account approved fulfillers (schemas), at least when the user has a linked dasher account. The Assistant runtime policy engine should treat a query as dasher data if 1) this bit is true in the string redaction, and 2) the user has a linked dasher account, and apply a more restrictive rule for whitelisting, regardless of the actual account provenance in Sensitivity. Example: [User logged in to their personal gmail account.] Q1: "Schedule a meeting tiltled okr review at 3pm". Assistant: "Should I scheduled it on your xyz@gmail.com account?" Q2: "No, add it to my xyz@bigcorp.com account." We don't know Q1 is dasher data until Q2. To prevent leaking of Q1 to non-dasher approved binaries, this bit should be used as a proactive measure. It might introduce some over-triggering (e.g., user says "Yes" in Q2), but is much better than blindly treating every query as dasher, not considering whether it actually triggers any multi-account capable intents or not (see b/164420114 for example).
  *   `previousQuery` (*type:* `GoogleApi.ContentWarehouse.V1.Model.KnowledgeAnswersSensitivityInstructionPreviousQuery.t`, *default:* `nil`) - 
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :argument =>
            GoogleApi.ContentWarehouse.V1.Model.KnowledgeAnswersSensitivityInstructionArgument.t()
            | nil,
          :intent =>
            GoogleApi.ContentWarehouse.V1.Model.KnowledgeAnswersSensitivityInstructionIntent.t()
            | nil,
          :legacyAssistantSensitivity =>
            GoogleApi.ContentWarehouse.V1.Model.SearchPolicyRankableSensitivity.t() | nil,
          :multiAccountAllowed => boolean() | nil,
          :previousQuery =>
            GoogleApi.ContentWarehouse.V1.Model.KnowledgeAnswersSensitivityInstructionPreviousQuery.t()
            | nil
        }

  field(:argument,
    as: GoogleApi.ContentWarehouse.V1.Model.KnowledgeAnswersSensitivityInstructionArgument
  )

  field(:intent,
    as: GoogleApi.ContentWarehouse.V1.Model.KnowledgeAnswersSensitivityInstructionIntent
  )

  field(:legacyAssistantSensitivity,
    as: GoogleApi.ContentWarehouse.V1.Model.SearchPolicyRankableSensitivity
  )

  field(:multiAccountAllowed)

  field(:previousQuery,
    as: GoogleApi.ContentWarehouse.V1.Model.KnowledgeAnswersSensitivityInstructionPreviousQuery
  )
end

defimpl Poison.Decoder,
  for: GoogleApi.ContentWarehouse.V1.Model.KnowledgeAnswersSensitivityInstruction do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.KnowledgeAnswersSensitivityInstruction.decode(
      value,
      options
    )
  end
end

defimpl Poison.Encoder,
  for: GoogleApi.ContentWarehouse.V1.Model.KnowledgeAnswersSensitivityInstruction do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
