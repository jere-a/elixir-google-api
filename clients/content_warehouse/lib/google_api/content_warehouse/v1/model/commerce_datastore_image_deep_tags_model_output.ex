# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.CommerceDatastoreImageDeepTagsModelOutput do
  @moduledoc """


  ## Attributes

  *   `backgroundType` (*type:* `GoogleApi.ContentWarehouse.V1.Model.CommerceDatastoreDeepTag.t`, *default:* `nil`) - 
  *   `collage` (*type:* `GoogleApi.ContentWarehouse.V1.Model.CommerceDatastoreDeepTag.t`, *default:* `nil`) - 
  *   `cropping` (*type:* `GoogleApi.ContentWarehouse.V1.Model.CommerceDatastoreDeepTag.t`, *default:* `nil`) - We are looking to deploy a model for the Ads team to identify images with bad cropping. The model will be for Ads only and we will not populate the cropping field in CDS.
  *   `modelType` (*type:* `GoogleApi.ContentWarehouse.V1.Model.CommerceDatastoreDeepTag.t`, *default:* `nil`) - 
  *   `nfs` (*type:* `GoogleApi.ContentWarehouse.V1.Model.CommerceDatastoreDeepTag.t`, *default:* `nil`) - Tag corresponds to the shopping non-family safe (nfs) image signal.
  *   `objectCount` (*type:* `GoogleApi.ContentWarehouse.V1.Model.CommerceDatastoreDeepTag.t`, *default:* `nil`) - 
  *   `overlay` (*type:* `GoogleApi.ContentWarehouse.V1.Model.CommerceDatastoreDeepTag.t`, *default:* `nil`) - Tag corresponding to unwanted text overlay (watermarks, logos, promotional elements, artifacts, etc).
  *   `selfie` (*type:* `GoogleApi.ContentWarehouse.V1.Model.CommerceDatastoreDeepTag.t`, *default:* `nil`) - 
  *   `textOverlay` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.CommerceDatastoreDeepTag.t)`, *default:* `nil`) - Tag corresponding to the text overlay classifier (watermarks, logos, promotional elements, artifacts, etc).
  *   `version` (*type:* `integer()`, *default:* `nil`) - 
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :backgroundType =>
            GoogleApi.ContentWarehouse.V1.Model.CommerceDatastoreDeepTag.t() | nil,
          :collage => GoogleApi.ContentWarehouse.V1.Model.CommerceDatastoreDeepTag.t() | nil,
          :cropping => GoogleApi.ContentWarehouse.V1.Model.CommerceDatastoreDeepTag.t() | nil,
          :modelType => GoogleApi.ContentWarehouse.V1.Model.CommerceDatastoreDeepTag.t() | nil,
          :nfs => GoogleApi.ContentWarehouse.V1.Model.CommerceDatastoreDeepTag.t() | nil,
          :objectCount => GoogleApi.ContentWarehouse.V1.Model.CommerceDatastoreDeepTag.t() | nil,
          :overlay => GoogleApi.ContentWarehouse.V1.Model.CommerceDatastoreDeepTag.t() | nil,
          :selfie => GoogleApi.ContentWarehouse.V1.Model.CommerceDatastoreDeepTag.t() | nil,
          :textOverlay =>
            list(GoogleApi.ContentWarehouse.V1.Model.CommerceDatastoreDeepTag.t()) | nil,
          :version => integer() | nil
        }

  field(:backgroundType, as: GoogleApi.ContentWarehouse.V1.Model.CommerceDatastoreDeepTag)
  field(:collage, as: GoogleApi.ContentWarehouse.V1.Model.CommerceDatastoreDeepTag)
  field(:cropping, as: GoogleApi.ContentWarehouse.V1.Model.CommerceDatastoreDeepTag)
  field(:modelType, as: GoogleApi.ContentWarehouse.V1.Model.CommerceDatastoreDeepTag)
  field(:nfs, as: GoogleApi.ContentWarehouse.V1.Model.CommerceDatastoreDeepTag)
  field(:objectCount, as: GoogleApi.ContentWarehouse.V1.Model.CommerceDatastoreDeepTag)
  field(:overlay, as: GoogleApi.ContentWarehouse.V1.Model.CommerceDatastoreDeepTag)
  field(:selfie, as: GoogleApi.ContentWarehouse.V1.Model.CommerceDatastoreDeepTag)

  field(:textOverlay,
    as: GoogleApi.ContentWarehouse.V1.Model.CommerceDatastoreDeepTag,
    type: :list
  )

  field(:version)
end

defimpl Poison.Decoder,
  for: GoogleApi.ContentWarehouse.V1.Model.CommerceDatastoreImageDeepTagsModelOutput do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.CommerceDatastoreImageDeepTagsModelOutput.decode(
      value,
      options
    )
  end
end

defimpl Poison.Encoder,
  for: GoogleApi.ContentWarehouse.V1.Model.CommerceDatastoreImageDeepTagsModelOutput do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
