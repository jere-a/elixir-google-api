# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.AssistantLogsAmbiguousTargetDeviceLog do
  @moduledoc """
  This message logs details on ambiguous device targeting logic. 1. It first takes a list of ambiguous devices 2. Then applies two filters: structure filter and playability filter. 3. If more than one device remains, it tiggers DeviceSelectionDialog to let the user pick one device.

  ## Attributes

  *   `ambiguousDeviceIndex` (*type:* `list(integer())`, *default:* `nil`) - Device index of the initial ambiguous devices. The device index in this message is consistent with the device index in DeviceInfoLog. It would be used to track more detailed information of a device if needed.
  *   `devicesAfterPromoters` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.AssistantLogsDeviceInfoLog.t)`, *default:* `nil`) - DeviceInfo for devices after the filters and promoters. - When device targeting is only configured for single target, these are ambiguous devices that would have been the output of Lumos. Downstream may perform extra check before disambiguation dialog. For example, Media Initiation checks playability for devices. The output here is before the check. - When configured for multi-target, these are just the target devices. For privacy consideration, we may only log device id field inside.
  *   `finalTargetDevice` (*type:* `GoogleApi.ContentWarehouse.V1.Model.AssistantLogsDeviceInfoLog.t`, *default:* `nil`) - the final targeted device selected by playability filter or DeviceSelectionDialog
  *   `playabilityFilteredDevicesIndex` (*type:* `list(integer())`, *default:* `nil`) - Device index of the devices after playability filter
  *   `puntInfoLog` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.AssistantLogsAmbiguousTargetDeviceLogPuntInfoLog.t)`, *default:* `nil`) - When there is no qualified devices after playability check, it would populate punt_info below. If all devices are filtered out for the same reason, there would only be one item. Otherwise, there will be multiple items.
  *   `structureFilteredDeviceIndex` (*type:* `list(integer())`, *default:* `nil`) - Device index of the devices after structure filter
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :ambiguousDeviceIndex => list(integer()) | nil,
          :devicesAfterPromoters =>
            list(GoogleApi.ContentWarehouse.V1.Model.AssistantLogsDeviceInfoLog.t()) | nil,
          :finalTargetDevice =>
            GoogleApi.ContentWarehouse.V1.Model.AssistantLogsDeviceInfoLog.t() | nil,
          :playabilityFilteredDevicesIndex => list(integer()) | nil,
          :puntInfoLog =>
            list(
              GoogleApi.ContentWarehouse.V1.Model.AssistantLogsAmbiguousTargetDeviceLogPuntInfoLog.t()
            )
            | nil,
          :structureFilteredDeviceIndex => list(integer()) | nil
        }

  field(:ambiguousDeviceIndex, type: :list)

  field(:devicesAfterPromoters,
    as: GoogleApi.ContentWarehouse.V1.Model.AssistantLogsDeviceInfoLog,
    type: :list
  )

  field(:finalTargetDevice, as: GoogleApi.ContentWarehouse.V1.Model.AssistantLogsDeviceInfoLog)
  field(:playabilityFilteredDevicesIndex, type: :list)

  field(:puntInfoLog,
    as: GoogleApi.ContentWarehouse.V1.Model.AssistantLogsAmbiguousTargetDeviceLogPuntInfoLog,
    type: :list
  )

  field(:structureFilteredDeviceIndex, type: :list)
end

defimpl Poison.Decoder,
  for: GoogleApi.ContentWarehouse.V1.Model.AssistantLogsAmbiguousTargetDeviceLog do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.AssistantLogsAmbiguousTargetDeviceLog.decode(
      value,
      options
    )
  end
end

defimpl Poison.Encoder,
  for: GoogleApi.ContentWarehouse.V1.Model.AssistantLogsAmbiguousTargetDeviceLog do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
