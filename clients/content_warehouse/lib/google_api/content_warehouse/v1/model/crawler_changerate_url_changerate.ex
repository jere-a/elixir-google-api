# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.CrawlerChangerateUrlChangerate do
  @moduledoc """
  The next available field number is 22. To access the best estimate of change period, please use GetChangePeriod in predict-change-rate.h to select between this and other change period estimates below.

  ## Attributes

  *   `approximatedPosterior` (*type:* `GoogleApi.ContentWarehouse.V1.Model.CrawlerChangerateMultipleComponentDistribution.t`, *default:* `nil`) - The approximated posterior distribution.
  *   `averageChangeSignificance` (*type:* `float()`, *default:* `nil`) - The "significance" of the average change we saw of this document (from 0 to 1). Influenced by content changes. This can be used for prioritizing the crawl (higher significance first).
  *   `changeperiod` (*type:* `integer()`, *default:* `nil`) - //////////////////////////////////////////////////////////////////////////// The classic changerate estimation. //////////////////////////////////////////////////////////////////////////// The classic estimate of change period (in seconds). It is computed by inserted a "fake" change and no-change interval as a prior distribution. This field is generally not used and should NOT be accessed directly. See above for correct method for determining the change period estimate.
  *   `confidence` (*type:* `float()`, *default:* `nil`) - The confidence (between 0 and 1) in the changeperiod guess.
  *   `globalBasedChangePeriod` (*type:* `integer()`, *default:* `nil`) - //////////////////////////////////////////////////////////////////////////// The changerate estimation based on the global prior. //////////////////////////////////////////////////////////////////////////// The global-based changeperiod. This is our estimate (in seconds) for the average time between changes. It is computed using the new prior method based on global_based_prior_period and the global_based_prior_strength specified below. This is used for computing pattern priors. Use pattern_based_change_period or changeperiod fields for all other purposes.
  *   `globalBasedChangePeriodConfidence` (*type:* `float()`, *default:* `nil`) - The 'confidence' of the global-based changeperiod. This is the n-th root of the posterior evaluated at MAP point, where n is the number of history intervals. For now, it is hard to interpret the meaning of the absolute values of 'average' posterior cross different sets of data.
  *   `globalBasedPriorPeriod` (*type:* `float()`, *default:* `nil`) - The 2 parameters below specify the prior employed in calculating the global_based_change_period. These values are precomputed through an offline analysis and specified via flags.
  *   `globalBasedPriorStrength` (*type:* `float()`, *default:* `nil`) - 
  *   `lastChangeSignificance` (*type:* `float()`, *default:* `nil`) - The "significance" of the last change we saw of this document (from 0 to 1). Influenced by content changes, etc. This can be used for prioritizing the crawl (higher significance first).
  *   `lastChanged` (*type:* `integer()`, *default:* `nil`) - The last time (unix timestamp) we saw a changed copy of the document. Provided iff we have seen the page change.
  *   `lastFetched` (*type:* `integer()`, *default:* `nil`) - The last time (unix timestamp) we saw a fetched copy of the document.
  *   `numIntervals` (*type:* `integer()`, *default:* `nil`) - The number of intervals we've seen for this document (where an interval is two different versions).
  *   `patternBasedChangePeriod` (*type:* `integer()`, *default:* `nil`) - //////////////////////////////////////////////////////////////////////////// The changerate estimation based on the pattern prior. //////////////////////////////////////////////////////////////////////////// The pattern-based changeperiod. This is our estimate (in seconds) for the average time between changes. It is calculated based on the pattern_based_prior_period and pattern_based_prior_strength below. This quantity will eventually replace the old changeperiod calculation.
  *   `patternBasedChangePeriodConfidence` (*type:* `float()`, *default:* `nil`) - The same as global_based_change_period_confidence, except it is computed using pattern based priors.
  *   `patternBasedLowerChangePeriod` (*type:* `integer()`, *default:* `nil`) - The lower edge of a confidence interval for the pattern-based change period.
  *   `patternBasedPriorPeriod` (*type:* `float()`, *default:* `nil`) - The 2 parameters below specify the prior employed in calculating the pattern_based_change_period. These values are calculated in a separate process and looked up based on the URL pattern.
  *   `patternBasedPriorStrength` (*type:* `float()`, *default:* `nil`) - 
  *   `patternChangePeriodVersion` (*type:* `integer()`, *default:* `nil`) - The version number of the algorithm, refer to ChangePeriodVersion for more information.
  *   `type` (*type:* `integer()`, *default:* `nil`) - //////////////////////////////////////////////////////////////////////////// Basic information of a document. //////////////////////////////////////////////////////////////////////////// The type of the document determined by crawl histories, refer to TYPE for more information.
  *   `ugcChangePeriod` (*type:* `integer()`, *default:* `nil`) - //////////////////////////////////////////////////////////////////////////// The UGC changerate estimation. //////////////////////////////////////////////////////////////////////////// Information on change period generated from user generated content (UGC) change history.
  *   `ugcChangePeriodConfidence` (*type:* `float()`, *default:* `nil`) - 
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :approximatedPosterior =>
            GoogleApi.ContentWarehouse.V1.Model.CrawlerChangerateMultipleComponentDistribution.t()
            | nil,
          :averageChangeSignificance => float() | nil,
          :changeperiod => integer() | nil,
          :confidence => float() | nil,
          :globalBasedChangePeriod => integer() | nil,
          :globalBasedChangePeriodConfidence => float() | nil,
          :globalBasedPriorPeriod => float() | nil,
          :globalBasedPriorStrength => float() | nil,
          :lastChangeSignificance => float() | nil,
          :lastChanged => integer() | nil,
          :lastFetched => integer() | nil,
          :numIntervals => integer() | nil,
          :patternBasedChangePeriod => integer() | nil,
          :patternBasedChangePeriodConfidence => float() | nil,
          :patternBasedLowerChangePeriod => integer() | nil,
          :patternBasedPriorPeriod => float() | nil,
          :patternBasedPriorStrength => float() | nil,
          :patternChangePeriodVersion => integer() | nil,
          :type => integer() | nil,
          :ugcChangePeriod => integer() | nil,
          :ugcChangePeriodConfidence => float() | nil
        }

  field(:approximatedPosterior,
    as: GoogleApi.ContentWarehouse.V1.Model.CrawlerChangerateMultipleComponentDistribution
  )

  field(:averageChangeSignificance)
  field(:changeperiod)
  field(:confidence)
  field(:globalBasedChangePeriod)
  field(:globalBasedChangePeriodConfidence)
  field(:globalBasedPriorPeriod)
  field(:globalBasedPriorStrength)
  field(:lastChangeSignificance)
  field(:lastChanged)
  field(:lastFetched)
  field(:numIntervals)
  field(:patternBasedChangePeriod)
  field(:patternBasedChangePeriodConfidence)
  field(:patternBasedLowerChangePeriod)
  field(:patternBasedPriorPeriod)
  field(:patternBasedPriorStrength)
  field(:patternChangePeriodVersion)
  field(:type)
  field(:ugcChangePeriod)
  field(:ugcChangePeriodConfidence)
end

defimpl Poison.Decoder, for: GoogleApi.ContentWarehouse.V1.Model.CrawlerChangerateUrlChangerate do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.CrawlerChangerateUrlChangerate.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContentWarehouse.V1.Model.CrawlerChangerateUrlChangerate do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
