# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.GeostoreSpeedLimitProto do
  @moduledoc """
  A speed limit, containing both the limit and the conditions in which it applies.

  ## Attributes

  *   `category` (*type:* `String.t`, *default:* `nil`) - The type of speed limit.
  *   `condition` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.GeostoreRoadConditionalProto.t)`, *default:* `nil`) - The conditions under which this speed limit is applicable. If multiple conditions are set, at least one of them must be true.
  *   `sourceType` (*type:* `String.t`, *default:* `nil`) - The source of the speed limit.
  *   `speedWithUnit` (*type:* `GoogleApi.ContentWarehouse.V1.Model.GeostoreSpeedProto.t`, *default:* `nil`) - A constant speed limit.
  *   `unlimitedSpeed` (*type:* `GoogleApi.ContentWarehouse.V1.Model.GeostoreUnlimitedSpeedProto.t`, *default:* `nil`) - A speed limit with no limit value. When there is no speed limit in place.
  *   `variableSpeed` (*type:* `GoogleApi.ContentWarehouse.V1.Model.GeostoreVariableSpeedProto.t`, *default:* `nil`) - A dynamic speed limit that can vary within a range of values based on road conditions.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :category => String.t() | nil,
          :condition =>
            list(GoogleApi.ContentWarehouse.V1.Model.GeostoreRoadConditionalProto.t()) | nil,
          :sourceType => String.t() | nil,
          :speedWithUnit => GoogleApi.ContentWarehouse.V1.Model.GeostoreSpeedProto.t() | nil,
          :unlimitedSpeed =>
            GoogleApi.ContentWarehouse.V1.Model.GeostoreUnlimitedSpeedProto.t() | nil,
          :variableSpeed =>
            GoogleApi.ContentWarehouse.V1.Model.GeostoreVariableSpeedProto.t() | nil
        }

  field(:category)

  field(:condition,
    as: GoogleApi.ContentWarehouse.V1.Model.GeostoreRoadConditionalProto,
    type: :list
  )

  field(:sourceType)
  field(:speedWithUnit, as: GoogleApi.ContentWarehouse.V1.Model.GeostoreSpeedProto)
  field(:unlimitedSpeed, as: GoogleApi.ContentWarehouse.V1.Model.GeostoreUnlimitedSpeedProto)
  field(:variableSpeed, as: GoogleApi.ContentWarehouse.V1.Model.GeostoreVariableSpeedProto)
end

defimpl Poison.Decoder, for: GoogleApi.ContentWarehouse.V1.Model.GeostoreSpeedLimitProto do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.GeostoreSpeedLimitProto.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContentWarehouse.V1.Model.GeostoreSpeedLimitProto do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
