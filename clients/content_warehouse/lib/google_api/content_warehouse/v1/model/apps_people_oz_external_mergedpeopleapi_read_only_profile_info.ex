# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.AppsPeopleOzExternalMergedpeopleapiReadOnlyProfileInfo do
  @moduledoc """
  Metadata information about a profile. This message replaces legacy profile-specific singleton fields from the PersonMetadata proto (singleton top level Person fields are not compatible with non-profile-centric person results, which may include multiple profile containers).

  ## Attributes

  *   `accountEmail` (*type:* `GoogleApi.ContentWarehouse.V1.Model.AppsPeopleOzExternalMergedpeopleapiAccountEmail.t`, *default:* `nil`) - The account email linked to the profile, if any exists and is visible to the requester.
  *   `blockType` (*type:* `list(String.t)`, *default:* `nil`) - Indicates whether the profile owner has blocked this person.
  *   `customerInfo` (*type:* `GoogleApi.ContentWarehouse.V1.Model.AppsPeopleOzExternalMergedpeopleapiCustomerInfo.t`, *default:* `nil`) - CustomerInfo for dasher user. The reader has to explicitly request this in the field_mask as 'read_only_profile_info.customer_info'
  *   `domainInfo` (*type:* `GoogleApi.ContentWarehouse.V1.Model.AppsPeopleOzExternalMergedpeopleapiReadOnlyProfileInfoDomainInfo.t`, *default:* `nil`) - DEPRECATED. Use the `ReadOnlyProfileInfo.customer_info` field instead (b/138120418). Only populated if in_viewer_domain is true.
  *   `inViewerDomain` (*type:* `boolean()`, *default:* `nil`) - DEPRECATED. Proxying trust between users in a domain should use go/flex-orgs-platform. For more info see: http://doc/18i0-C7vWcz2UuXYBsmulnriVCK3_EuMPpRlPa2OmMHw#heading=h.dobotdwx25kg Indicates whether the profile owner is in the same domain as the viewer.
  *   `incomingBlockType` (*type:* `list(String.t)`, *default:* `nil`) - Indicates whether this person is blocking the profile owner.
  *   `metadata` (*type:* `GoogleApi.ContentWarehouse.V1.Model.AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata.t`, *default:* `nil`) - 
  *   `objectType` (*type:* `String.t`, *default:* `nil`) - DEPRECATED.
  *   `ownerId` (*type:* `String.t`, *default:* `nil`) - The Focus-obfuscated Gaia ID of the profile owner (go/obfuscated-ids).
  *   `ownerUserType` (*type:* `list(String.t)`, *default:* `nil`) - 
  *   `plusPageType` (*type:* `String.t`, *default:* `nil`) - DEPRECATED. Please use `person.plus_page_info` instead.
  *   `profileOwnerStats` (*type:* `GoogleApi.ContentWarehouse.V1.Model.AppsPeopleOzExternalMergedpeopleapiProfileOwnerStats.t`, *default:* `nil`) - Stats/counters pertaining to followers and incoming edges.
  *   `unjoinedEmailCertificates` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.AppsPeopleOzExternalMergedpeopleapiEmail.t)`, *default:* `nil`) - Returned only when explicitly requested in the request mask as read_only_profile_info.unjoined_email_certificates. Equivalent to fetching the Emails & the Email Certificates with the acls ignored.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :accountEmail =>
            GoogleApi.ContentWarehouse.V1.Model.AppsPeopleOzExternalMergedpeopleapiAccountEmail.t()
            | nil,
          :blockType => list(String.t()) | nil,
          :customerInfo =>
            GoogleApi.ContentWarehouse.V1.Model.AppsPeopleOzExternalMergedpeopleapiCustomerInfo.t()
            | nil,
          :domainInfo =>
            GoogleApi.ContentWarehouse.V1.Model.AppsPeopleOzExternalMergedpeopleapiReadOnlyProfileInfoDomainInfo.t()
            | nil,
          :inViewerDomain => boolean() | nil,
          :incomingBlockType => list(String.t()) | nil,
          :metadata =>
            GoogleApi.ContentWarehouse.V1.Model.AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata.t()
            | nil,
          :objectType => String.t() | nil,
          :ownerId => String.t() | nil,
          :ownerUserType => list(String.t()) | nil,
          :plusPageType => String.t() | nil,
          :profileOwnerStats =>
            GoogleApi.ContentWarehouse.V1.Model.AppsPeopleOzExternalMergedpeopleapiProfileOwnerStats.t()
            | nil,
          :unjoinedEmailCertificates =>
            list(GoogleApi.ContentWarehouse.V1.Model.AppsPeopleOzExternalMergedpeopleapiEmail.t())
            | nil
        }

  field(:accountEmail,
    as: GoogleApi.ContentWarehouse.V1.Model.AppsPeopleOzExternalMergedpeopleapiAccountEmail
  )

  field(:blockType, type: :list)

  field(:customerInfo,
    as: GoogleApi.ContentWarehouse.V1.Model.AppsPeopleOzExternalMergedpeopleapiCustomerInfo
  )

  field(:domainInfo,
    as:
      GoogleApi.ContentWarehouse.V1.Model.AppsPeopleOzExternalMergedpeopleapiReadOnlyProfileInfoDomainInfo
  )

  field(:inViewerDomain)
  field(:incomingBlockType, type: :list)

  field(:metadata,
    as: GoogleApi.ContentWarehouse.V1.Model.AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata
  )

  field(:objectType)
  field(:ownerId)
  field(:ownerUserType, type: :list)
  field(:plusPageType)

  field(:profileOwnerStats,
    as: GoogleApi.ContentWarehouse.V1.Model.AppsPeopleOzExternalMergedpeopleapiProfileOwnerStats
  )

  field(:unjoinedEmailCertificates,
    as: GoogleApi.ContentWarehouse.V1.Model.AppsPeopleOzExternalMergedpeopleapiEmail,
    type: :list
  )
end

defimpl Poison.Decoder,
  for: GoogleApi.ContentWarehouse.V1.Model.AppsPeopleOzExternalMergedpeopleapiReadOnlyProfileInfo do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.AppsPeopleOzExternalMergedpeopleapiReadOnlyProfileInfo.decode(
      value,
      options
    )
  end
end

defimpl Poison.Encoder,
  for: GoogleApi.ContentWarehouse.V1.Model.AppsPeopleOzExternalMergedpeopleapiReadOnlyProfileInfo do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
