# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.AssistantApiClockCapabilities do
  @moduledoc """
  Used to describe clock capabilities of the device (for example, capabilities related to maximum number of supported alarms and timers that can be created on the device). Fields may be populated by clients or be backfilled by SAL (in case of Timon, for example).

  ## Attributes

  *   `maxSupportedAlarms` (*type:* `integer()`, *default:* `nil`) - Maximum number of alarms that can be created on the client.
  *   `maxSupportedExtendedTimerDuration` (*type:* `GoogleApi.ContentWarehouse.V1.Model.AssistantApiDuration.t`, *default:* `nil`) - Maximum extended timer duration supported by the client. The extended timer duration is the total start-to-finish duration after an AddTimeToTimer operation. E.g. if a user sets a timer for 30 minutes, and later adds 10 minutes, the extended duration is 40 minutes.
  *   `maxSupportedTimerDuration` (*type:* `GoogleApi.ContentWarehouse.V1.Model.AssistantApiDuration.t`, *default:* `nil`) - Maximum duration of timers that can be created on the client.
  *   `maxSupportedTimers` (*type:* `integer()`, *default:* `nil`) - Maximum number of timers that can be created on the client.
  *   `preferredStopwatchProvider` (*type:* `GoogleApi.ContentWarehouse.V1.Model.AssistantApiCoreTypesProvider.t`, *default:* `nil`) - The preferred provider to use for stopwatch related functionality.
  *   `restrictAlarmsToNext24h` (*type:* `boolean()`, *default:* `nil`) - Whether the client restricts alarms to ring within the next 24 hours.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :maxSupportedAlarms => integer() | nil,
          :maxSupportedExtendedTimerDuration =>
            GoogleApi.ContentWarehouse.V1.Model.AssistantApiDuration.t() | nil,
          :maxSupportedTimerDuration =>
            GoogleApi.ContentWarehouse.V1.Model.AssistantApiDuration.t() | nil,
          :maxSupportedTimers => integer() | nil,
          :preferredStopwatchProvider =>
            GoogleApi.ContentWarehouse.V1.Model.AssistantApiCoreTypesProvider.t() | nil,
          :restrictAlarmsToNext24h => boolean() | nil
        }

  field(:maxSupportedAlarms)

  field(:maxSupportedExtendedTimerDuration,
    as: GoogleApi.ContentWarehouse.V1.Model.AssistantApiDuration
  )

  field(:maxSupportedTimerDuration, as: GoogleApi.ContentWarehouse.V1.Model.AssistantApiDuration)
  field(:maxSupportedTimers)

  field(:preferredStopwatchProvider,
    as: GoogleApi.ContentWarehouse.V1.Model.AssistantApiCoreTypesProvider
  )

  field(:restrictAlarmsToNext24h)
end

defimpl Poison.Decoder, for: GoogleApi.ContentWarehouse.V1.Model.AssistantApiClockCapabilities do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.AssistantApiClockCapabilities.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContentWarehouse.V1.Model.AssistantApiClockCapabilities do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
