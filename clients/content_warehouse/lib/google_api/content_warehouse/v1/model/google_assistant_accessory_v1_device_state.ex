# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.GoogleAssistantAccessoryV1DeviceState do
  @moduledoc """
  Information about the state of the device. This contains any state that Assistant may need to know about in order to fulfill requests, for example which timers and alarms are set. Next ID: 13

  ## Attributes

  *   `alarmState` (*type:* `GoogleApi.ContentWarehouse.V1.Model.GoogleAssistantEmbeddedV1Alarms.t`, *default:* `nil`) - *Optional* Information about on-device alarms. For devices that support alarms, all on-device alarms must be sent up with the DeviceState in order for Assistant Server to be able to perform operations on them.
  *   `contextParams` (*type:* `String.t`, *default:* `nil`) - Other context params to be sent to Assistant. This is a assistant.embedded.v1.ContextParams message in serialized binary proto format.
  *   `deviceTime` (*type:* `DateTime.t`, *default:* `nil`) - A timestamp of the current device time when the request was made. This field is required if your device supports alarms or timers. This ensures that requests are fulfilled relative to the current device time and regardless of any clock skew between the client and the server.
  *   `deviceTimeZone` (*type:* `GoogleApi.ContentWarehouse.V1.Model.GoogleTypeTimeZone.t`, *default:* `nil`) - The time zone where the device is currently located. This helps the Assistant answer time-related queries relative to the device's time zone. Generally speaking, mobile devices that support alarms or timers should supply device_time_zone. This field is required if your device supports alarms or timers and the device's location cannot reliably be determined. (See the comment above google.assistant.embedded.v1.DeviceLocation for a description of how the device's location is determined.) If the time zone cannot be determined, some queries for creating or modifying timers or alarms may fail with a generic error such as, "Sorry, I don't know how to help with that."
  *   `doNotDisturb` (*type:* `boolean()`, *default:* `nil`) - Indicate whether do not disturb mode is turned on.
  *   `fitnessActivitiesState` (*type:* `GoogleApi.ContentWarehouse.V1.Model.GoogleAssistantEmbeddedV1FitnessActivities.t`, *default:* `nil`) - Information about on-device fitness activities. For devices that support fitness activities, all on-device fitness activities must be sent up with the DeviceState in order for Assistant Server to be able to perform operations on them.
  *   `installedApps` (*type:* `GoogleApi.ContentWarehouse.V1.Model.GoogleAssistantAccessoryV1DeviceStateInstalledAppsState.t`, *default:* `nil`) - Information about apps currently installed on device.
  *   `installedAppsZlib` (*type:* `String.t`, *default:* `nil`) - This contains a zlib-compressed binary-encoded `InstalledAppsState` proto message.
  *   `timerState` (*type:* `GoogleApi.ContentWarehouse.V1.Model.GoogleAssistantEmbeddedV1Timers.t`, *default:* `nil`) - *Optional* Information about on-device timers. For devices that support timers, all on-device timers must be sent up with the DeviceState in order for Assistant Server to be able to perform operations on them.
  *   `unavailableSettings` (*type:* `list(String.t)`, *default:* `nil`) - This indicates which specific settings are currently unavailable for modification, despite being listed as a supported setting. Assistant can use this field to trigger unavailability messages, rather than claiming that a setting is entirely unsupported on device.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :alarmState =>
            GoogleApi.ContentWarehouse.V1.Model.GoogleAssistantEmbeddedV1Alarms.t() | nil,
          :contextParams => String.t() | nil,
          :deviceTime => DateTime.t() | nil,
          :deviceTimeZone => GoogleApi.ContentWarehouse.V1.Model.GoogleTypeTimeZone.t() | nil,
          :doNotDisturb => boolean() | nil,
          :fitnessActivitiesState =>
            GoogleApi.ContentWarehouse.V1.Model.GoogleAssistantEmbeddedV1FitnessActivities.t()
            | nil,
          :installedApps =>
            GoogleApi.ContentWarehouse.V1.Model.GoogleAssistantAccessoryV1DeviceStateInstalledAppsState.t()
            | nil,
          :installedAppsZlib => String.t() | nil,
          :timerState =>
            GoogleApi.ContentWarehouse.V1.Model.GoogleAssistantEmbeddedV1Timers.t() | nil,
          :unavailableSettings => list(String.t()) | nil
        }

  field(:alarmState, as: GoogleApi.ContentWarehouse.V1.Model.GoogleAssistantEmbeddedV1Alarms)
  field(:contextParams)
  field(:deviceTime, as: DateTime)
  field(:deviceTimeZone, as: GoogleApi.ContentWarehouse.V1.Model.GoogleTypeTimeZone)
  field(:doNotDisturb)

  field(:fitnessActivitiesState,
    as: GoogleApi.ContentWarehouse.V1.Model.GoogleAssistantEmbeddedV1FitnessActivities
  )

  field(:installedApps,
    as:
      GoogleApi.ContentWarehouse.V1.Model.GoogleAssistantAccessoryV1DeviceStateInstalledAppsState
  )

  field(:installedAppsZlib)
  field(:timerState, as: GoogleApi.ContentWarehouse.V1.Model.GoogleAssistantEmbeddedV1Timers)
  field(:unavailableSettings, type: :list)
end

defimpl Poison.Decoder,
  for: GoogleApi.ContentWarehouse.V1.Model.GoogleAssistantAccessoryV1DeviceState do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.GoogleAssistantAccessoryV1DeviceState.decode(
      value,
      options
    )
  end
end

defimpl Poison.Encoder,
  for: GoogleApi.ContentWarehouse.V1.Model.GoogleAssistantAccessoryV1DeviceState do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
