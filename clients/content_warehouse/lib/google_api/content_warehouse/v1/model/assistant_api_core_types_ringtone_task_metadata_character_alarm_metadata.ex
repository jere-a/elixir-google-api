# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.AssistantApiCoreTypesRingtoneTaskMetadataCharacterAlarmMetadata do
  @moduledoc """


  ## Attributes

  *   `agentIds` (*type:* `list(String.t)`, *default:* `nil`) - For character alarm, the media resources are provided through AOG apps. During alarm trigger phase, aog apps with the specified agent_ids are used to get the media resources. Multiple "AoG agents" can satisfy a character_tag. So the user will select the agents they want at alarm creation time. The chosen agents will be recorded so that the resources only from those agents will be used at trigger time. The number of selected agent_ids will not exceed 3. See go/character-alarm-aog.
  *   `characterTags` (*type:* `list(String.t)`, *default:* `nil`) - The Character Alarm tag. Tags are needed to identify the theme of the alarm. For example, if the tag is 'astronaut', astronaut based audio is played during alarm ring. Note : We have made it repeated so that the user can choose multiple character alarm themes at one go. At present, the user is allowed to choose only one theme during alarm creation.
  *   `iconUrls` (*type:* `list(String.t)`, *default:* `nil`) - Icons urls corresponding to a character. Note : We have made it repeated so that we can show different images when the alarm rings. At present, we only support only one image.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :agentIds => list(String.t()) | nil,
          :characterTags => list(String.t()) | nil,
          :iconUrls => list(String.t()) | nil
        }

  field(:agentIds, type: :list)
  field(:characterTags, type: :list)
  field(:iconUrls, type: :list)
end

defimpl Poison.Decoder,
  for:
    GoogleApi.ContentWarehouse.V1.Model.AssistantApiCoreTypesRingtoneTaskMetadataCharacterAlarmMetadata do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.AssistantApiCoreTypesRingtoneTaskMetadataCharacterAlarmMetadata.decode(
      value,
      options
    )
  end
end

defimpl Poison.Encoder,
  for:
    GoogleApi.ContentWarehouse.V1.Model.AssistantApiCoreTypesRingtoneTaskMetadataCharacterAlarmMetadata do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
