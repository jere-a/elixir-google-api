# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.KnowledgeGraphTripleProvenance do
  @moduledoc """
  Message containing information about the source of this triple. See go/kg-provenance for an explanation of the fields.

  ## Attributes

  *   `accessRequired` (*type:* `integer()`, *default:* `nil`) - Specifies the contract or legal visibility required to see the Triple. See go/kg-triple-level-access-controls for details and background. Note that we use an int32 here so that we won't lose values when decoding on a stale binary. The int32 references to the enum storage_graph_bfg.Triple.Provenance.AccessRequirement.
  *   `creator` (*type:* `String.t`, *default:* `nil`) - Historically, this field was used to encode the Freebase User ID, Google username, or Google MDB group that was responsible for the pipeline that is producing this data. However, there is currently no horizontal validation in place, and as of Q3 2018, this field is used essentially as a free-form string by multiple data providers. NOTE: Do not use this field in new pipelines without first consulting with the OWNERS of this proto. 
  *   `datasetMid` (*type:* `String.t`, *default:* `nil`) - The dataset which asserted this data. Must be a valid mid. See go/kg-provenance
  *   `isSupportingData` (*type:* `boolean()`, *default:* `nil`) - Indicates that the corresponding data is supporting evidence for reconciliation only, and is *not* an assertion that should be visible to other systems or to external users. Note that this also means that no provenances indicating supporting data will be visible in the composed graph. Please see go/supporting-kg-triples-design-doc for additional details and background.
  *   `lgMetadata` (*type:* `GoogleApi.ContentWarehouse.V1.Model.StorageGraphBfgLivegraphProvenanceMetadata.t`, *default:* `nil`) - Internal metadata used by Livegraph and possibly other horizontal KG infra systems. This is not part of the logical triple or its provenance, and contents may not be visible downstream of LG.
  *   `policyMetadata` (*type:* `GoogleApi.ContentWarehouse.V1.Model.StorageGraphBfgPolicyMetadata.t`, *default:* `nil`) - Metadata specifying data governance policies. This information will be processed and enforced in KE systems. For more context, see go/ke-triple-dg-policy-and-metadata. WARNING: This field is WIP and please do not populate it without consulting ke-data-governance@.
  *   `process` (*type:* `String.t`, *default:* `nil`) - An identifier for the process that asserted this triple.
  *   `restrictions` (*type:* `list(String.t)`, *default:* `nil`) - 
  *   `sourceCategory` (*type:* `String.t`, *default:* `nil`) - Used to measure impact of 3P contributions. See go/ke-metrics.
  *   `sourceDocId` (*type:* `String.t`, *default:* `nil`) - The websearch doc_id of the source_url. Used in conjunction with source_category for measuring 3P contributions.
  *   `sourceUrl` (*type:* `String.t`, *default:* `nil`) - If the triple was extracted from the web, the source URL where the assertion was found. Used for citation if needed (see restrictions field below).
  *   `spiiCertification` (*type:* `GoogleApi.ContentWarehouse.V1.Model.StorageGraphBfgSpiiCertification.t`, *default:* `nil`) - A fact about potentially sensitive personal info (http://what/SPII) can be "certified" iff it meets specific requirements. See go/kg-spii-certification for details.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :accessRequired => integer() | nil,
          :creator => String.t() | nil,
          :datasetMid => String.t() | nil,
          :isSupportingData => boolean() | nil,
          :lgMetadata =>
            GoogleApi.ContentWarehouse.V1.Model.StorageGraphBfgLivegraphProvenanceMetadata.t()
            | nil,
          :policyMetadata =>
            GoogleApi.ContentWarehouse.V1.Model.StorageGraphBfgPolicyMetadata.t() | nil,
          :process => String.t() | nil,
          :restrictions => list(String.t()) | nil,
          :sourceCategory => String.t() | nil,
          :sourceDocId => String.t() | nil,
          :sourceUrl => String.t() | nil,
          :spiiCertification =>
            GoogleApi.ContentWarehouse.V1.Model.StorageGraphBfgSpiiCertification.t() | nil
        }

  field(:accessRequired)
  field(:creator)
  field(:datasetMid)
  field(:isSupportingData)

  field(:lgMetadata,
    as: GoogleApi.ContentWarehouse.V1.Model.StorageGraphBfgLivegraphProvenanceMetadata
  )

  field(:policyMetadata, as: GoogleApi.ContentWarehouse.V1.Model.StorageGraphBfgPolicyMetadata)
  field(:process)
  field(:restrictions, type: :list)
  field(:sourceCategory)
  field(:sourceDocId)
  field(:sourceUrl)

  field(:spiiCertification,
    as: GoogleApi.ContentWarehouse.V1.Model.StorageGraphBfgSpiiCertification
  )
end

defimpl Poison.Decoder, for: GoogleApi.ContentWarehouse.V1.Model.KnowledgeGraphTripleProvenance do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.KnowledgeGraphTripleProvenance.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContentWarehouse.V1.Model.KnowledgeGraphTripleProvenance do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
