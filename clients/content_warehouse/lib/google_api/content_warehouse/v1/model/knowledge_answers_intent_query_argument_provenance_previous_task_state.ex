# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.KnowledgeAnswersIntentQueryArgumentProvenancePreviousTaskState do
  @moduledoc """
  Value is derived from previous task state (go/taskstates).

  ## Attributes

  *   `argumentName` (*type:* `list(String.t)`, *default:* `nil`) - Argument names in the DialogIntentState that the argument corresponds to. This is repeated so it can handle complex argument update paths. (ordered from outermost argument to innermost argument)
  *   `currentQueryEvalData` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingAnnotationEvalData.t)`, *default:* `nil`) - The span(s) in the current query (if any) used to resolve the previous query's DIS. Example: U: Barack Obama G: Do you want his age or his height? U: The first one. G: Age(/m/obama) In this example, the intent is derived from the previous query's DIS, but also needs to be resolved in the current query since the user was presented with multiple options.
  *   `dialogIntentStateId` (*type:* `String.t`, *default:* `nil`) - The id of the specific DialogIntentState instance that the argument corresponds to.
  *   `intentName` (*type:* `String.t`, *default:* `nil`) - Intent name of the DialogIntentState that the argument corresponds to.
  *   `listCandidate` (*type:* `GoogleApi.ContentWarehouse.V1.Model.KnowledgeAnswersIntentQueryArgumentProvenancePreviousTaskStateListCandidate.t`, *default:* `nil`) - 
  *   `previousFunctionCall` (*type:* `GoogleApi.ContentWarehouse.V1.Model.KnowledgeAnswersIntentQueryArgumentProvenancePreviousTaskStatePreviousFunctionCall.t`, *default:* `nil`) - 
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :argumentName => list(String.t()) | nil,
          :currentQueryEvalData =>
            list(GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingAnnotationEvalData.t())
            | nil,
          :dialogIntentStateId => String.t() | nil,
          :intentName => String.t() | nil,
          :listCandidate =>
            GoogleApi.ContentWarehouse.V1.Model.KnowledgeAnswersIntentQueryArgumentProvenancePreviousTaskStateListCandidate.t()
            | nil,
          :previousFunctionCall =>
            GoogleApi.ContentWarehouse.V1.Model.KnowledgeAnswersIntentQueryArgumentProvenancePreviousTaskStatePreviousFunctionCall.t()
            | nil
        }

  field(:argumentName, type: :list)

  field(:currentQueryEvalData,
    as: GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingAnnotationEvalData,
    type: :list
  )

  field(:dialogIntentStateId)
  field(:intentName)

  field(:listCandidate,
    as:
      GoogleApi.ContentWarehouse.V1.Model.KnowledgeAnswersIntentQueryArgumentProvenancePreviousTaskStateListCandidate
  )

  field(:previousFunctionCall,
    as:
      GoogleApi.ContentWarehouse.V1.Model.KnowledgeAnswersIntentQueryArgumentProvenancePreviousTaskStatePreviousFunctionCall
  )
end

defimpl Poison.Decoder,
  for:
    GoogleApi.ContentWarehouse.V1.Model.KnowledgeAnswersIntentQueryArgumentProvenancePreviousTaskState do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.KnowledgeAnswersIntentQueryArgumentProvenancePreviousTaskState.decode(
      value,
      options
    )
  end
end

defimpl Poison.Encoder,
  for:
    GoogleApi.ContentWarehouse.V1.Model.KnowledgeAnswersIntentQueryArgumentProvenancePreviousTaskState do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
