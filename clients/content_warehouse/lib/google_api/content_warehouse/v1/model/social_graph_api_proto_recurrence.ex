# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.SocialGraphApiProtoRecurrence do
  @moduledoc """
  Flexible Recurrence proto to be used with People Prompts. Examples: Single recurrence that occurs on a specific date: single_recurrence { date { year: 2022 month: 11 day: 17 } } Yearly recurrence such as a birthday or anniversary: yearly_recurrence { monthly_pattern { monthly_day_recurrence { month_day: 17 } } months: JULY } Weekly reccurrence such as: every two weeks on Monday: every: 2 weekly_recurrence { week_day: MONDAY } Monthly recurrence such as: third Thursday of every month: monthly_recurrence { monthly_weekday_recurrence { week_day: THURSDAY week_day_number: 3 } } Used in PeopleAPI layers + FBS/ContactsService (not in ProfileService) The canonical recurrence validation function is located here: http://google3/java/com/google/social/people/prompts/util/PromptValidators.java?q=func:%5CbvalidateRecurrence%5Cb

  ## Attributes

  *   `dailyRecurrence` (*type:* `GoogleApi.ContentWarehouse.V1.Model.SocialGraphApiProtoDailyRecurrence.t`, *default:* `nil`) - 
  *   `every` (*type:* `integer()`, *default:* `nil`) - Multiplier on the frequency of the recurrence. Use this to specify patterns that recur every X days, months, years, etc. Must be a positive int. Example: [remind me to call mom every 2nd week]. If this field isn't set, it will default to 1 (every day,every week, etc). This field is ignored when recurrence_data is a SingleRecurrence. Optional.
  *   `monthlyRecurrence` (*type:* `GoogleApi.ContentWarehouse.V1.Model.SocialGraphApiProtoMonthlyRecurrence.t`, *default:* `nil`) - 
  *   `recurrenceEndDate` (*type:* `GoogleApi.ContentWarehouse.V1.Model.GoogleTypeDateTime.t`, *default:* `nil`) - Ends at abstract DateTime. (inclusive)
  *   `recurrenceStart` (*type:* `GoogleApi.ContentWarehouse.V1.Model.GoogleTypeDateTime.t`, *default:* `nil`) - The start of the recurrence can be represented as a DateTime. This field is ignored when recurrence_data is a SingleRecurrence.
  *   `repeatCount` (*type:* `integer()`, *default:* `nil`) - Will repeat only a finite number of times. This is the original number of times the recurrence will repeat and not how many times are left for it to repeat. This end type is not currently supported.
  *   `repeatForever` (*type:* `GoogleApi.ContentWarehouse.V1.Model.SocialGraphApiProtoRecurrenceRepeatForever.t`, *default:* `nil`) - Will continue to repeat until prompt is deleted.
  *   `singleRecurrence` (*type:* `GoogleApi.ContentWarehouse.V1.Model.SocialGraphApiProtoSingleRecurrence.t`, *default:* `nil`) - 
  *   `weeklyRecurrence` (*type:* `GoogleApi.ContentWarehouse.V1.Model.SocialGraphApiProtoWeeklyRecurrence.t`, *default:* `nil`) - 
  *   `yearlyRecurrence` (*type:* `GoogleApi.ContentWarehouse.V1.Model.SocialGraphApiProtoYearlyRecurrence.t`, *default:* `nil`) - 
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :dailyRecurrence =>
            GoogleApi.ContentWarehouse.V1.Model.SocialGraphApiProtoDailyRecurrence.t() | nil,
          :every => integer() | nil,
          :monthlyRecurrence =>
            GoogleApi.ContentWarehouse.V1.Model.SocialGraphApiProtoMonthlyRecurrence.t() | nil,
          :recurrenceEndDate => GoogleApi.ContentWarehouse.V1.Model.GoogleTypeDateTime.t() | nil,
          :recurrenceStart => GoogleApi.ContentWarehouse.V1.Model.GoogleTypeDateTime.t() | nil,
          :repeatCount => integer() | nil,
          :repeatForever =>
            GoogleApi.ContentWarehouse.V1.Model.SocialGraphApiProtoRecurrenceRepeatForever.t()
            | nil,
          :singleRecurrence =>
            GoogleApi.ContentWarehouse.V1.Model.SocialGraphApiProtoSingleRecurrence.t() | nil,
          :weeklyRecurrence =>
            GoogleApi.ContentWarehouse.V1.Model.SocialGraphApiProtoWeeklyRecurrence.t() | nil,
          :yearlyRecurrence =>
            GoogleApi.ContentWarehouse.V1.Model.SocialGraphApiProtoYearlyRecurrence.t() | nil
        }

  field(:dailyRecurrence,
    as: GoogleApi.ContentWarehouse.V1.Model.SocialGraphApiProtoDailyRecurrence
  )

  field(:every)

  field(:monthlyRecurrence,
    as: GoogleApi.ContentWarehouse.V1.Model.SocialGraphApiProtoMonthlyRecurrence
  )

  field(:recurrenceEndDate, as: GoogleApi.ContentWarehouse.V1.Model.GoogleTypeDateTime)
  field(:recurrenceStart, as: GoogleApi.ContentWarehouse.V1.Model.GoogleTypeDateTime)
  field(:repeatCount)

  field(:repeatForever,
    as: GoogleApi.ContentWarehouse.V1.Model.SocialGraphApiProtoRecurrenceRepeatForever
  )

  field(:singleRecurrence,
    as: GoogleApi.ContentWarehouse.V1.Model.SocialGraphApiProtoSingleRecurrence
  )

  field(:weeklyRecurrence,
    as: GoogleApi.ContentWarehouse.V1.Model.SocialGraphApiProtoWeeklyRecurrence
  )

  field(:yearlyRecurrence,
    as: GoogleApi.ContentWarehouse.V1.Model.SocialGraphApiProtoYearlyRecurrence
  )
end

defimpl Poison.Decoder, for: GoogleApi.ContentWarehouse.V1.Model.SocialGraphApiProtoRecurrence do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.SocialGraphApiProtoRecurrence.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContentWarehouse.V1.Model.SocialGraphApiProtoRecurrence do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
