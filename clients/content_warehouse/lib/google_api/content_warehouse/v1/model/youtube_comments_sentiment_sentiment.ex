# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.YoutubeCommentsSentimentSentiment do
  @moduledoc """
  Sentiment information extracted from the annotated content by Goldmine. This mirrors nlp_sentiment.SentimentAnnotation. Next tag: 5.

  ## Attributes

  *   `entitySentiment` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.YoutubeCommentsSentimentSentimentEntitySentimentAnnotation.t)`, *default:* `nil`) - 
  *   `magnitude` (*type:* `number()`, *default:* `nil`) - Total magnitude of the sentiment. A positive number representing the total intensity of sentiment regardless of positive vs negative polarity.
  *   `polarity` (*type:* `number()`, *default:* `nil`) - Polarity of the sentiment. Value is between -1.0 and 1.0 inclusive, with larger numbers representing more positive sentiment and negative numbers representing negative sentiment.
  *   `score` (*type:* `number()`, *default:* `nil`) - The average score over sentences. This combines the polarity and magnitude signals into one value. Bounded between -1.0 and 1.0.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :entitySentiment =>
            list(
              GoogleApi.ContentWarehouse.V1.Model.YoutubeCommentsSentimentSentimentEntitySentimentAnnotation.t()
            )
            | nil,
          :magnitude => number() | nil,
          :polarity => number() | nil,
          :score => number() | nil
        }

  field(:entitySentiment,
    as:
      GoogleApi.ContentWarehouse.V1.Model.YoutubeCommentsSentimentSentimentEntitySentimentAnnotation,
    type: :list
  )

  field(:magnitude)
  field(:polarity)
  field(:score)
end

defimpl Poison.Decoder, for: GoogleApi.ContentWarehouse.V1.Model.YoutubeCommentsSentimentSentiment do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.YoutubeCommentsSentimentSentiment.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContentWarehouse.V1.Model.YoutubeCommentsSentimentSentiment do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
