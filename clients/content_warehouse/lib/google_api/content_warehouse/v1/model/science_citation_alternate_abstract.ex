# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.ScienceCitationAlternateAbstract do
  @moduledoc """
  There are templated functions that fill the abstract fields designed to take either ScienceCitation or ScienceCitation::AlternateAbstract, so these field names must match those used for the primary abstract.

  ## Attributes

  *   `AbstractDisplay` (*type:* `String.t`, *default:* `nil`) - 
  *   `AbstractHtml` (*type:* `String.t`, *default:* `nil`) - Version of abstract field for display. This may contain XML/HTML tags.
  *   `AbstractHtmlLeftOver` (*type:* `String.t`, *default:* `nil`) - Leftovers from AbstractHtml. These are usually unrecognized xml/html entities or xml/html tags
  *   `AbstractLanguage` (*type:* `String.t`, *default:* `nil`) - 
  *   `AbstractText` (*type:* `String.t`, *default:* `nil`) - 
  *   `AbstractTypeFromSource` (*type:* `String.t`, *default:* `nil`) - The original (unnormalized) type of an abstract. AbstractDisplay holds a normalized type deduced from things like tagnames, tag-attributes, keywords in documents or the placement of the abstract in the document. This field is meant for the type of the abstract identified explicitly by the source document. E.g., the value of the 'abstract-type' attribute from a tag in XML ('primary abstract', 'summary', 'highlights' etc.).
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :AbstractDisplay => String.t() | nil,
          :AbstractHtml => String.t() | nil,
          :AbstractHtmlLeftOver => String.t() | nil,
          :AbstractLanguage => String.t() | nil,
          :AbstractText => String.t() | nil,
          :AbstractTypeFromSource => String.t() | nil
        }

  field(:AbstractDisplay)
  field(:AbstractHtml)
  field(:AbstractHtmlLeftOver)
  field(:AbstractLanguage)
  field(:AbstractText)
  field(:AbstractTypeFromSource)
end

defimpl Poison.Decoder, for: GoogleApi.ContentWarehouse.V1.Model.ScienceCitationAlternateAbstract do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.ScienceCitationAlternateAbstract.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContentWarehouse.V1.Model.ScienceCitationAlternateAbstract do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
