# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.TeragoogleDocumentInfo do
  @moduledoc """
  The docshards are a FlatSSTable from (64-bit) urlfp to data containing the information found in this protocol buffer. (It's not actually one of these PBs for various performance reasons; instead, the DocumentFormat class handles serialization and deserialization in our own way) Next available ID: 37

  ## Attributes

  *   `attachment` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.TeragoogleDocumentInfoAttachment.t)`, *default:* `nil`) - 
  *   `averageTermWeight` (*type:* `integer()`, *default:* `nil`) - The average weight of terms in the document. If not available, there will be no term weight averaging: font sizes will be taken literally from the document HTML.
  *   `doc` (*type:* `GoogleApi.ContentWarehouse.V1.Model.GDocumentBase.t`, *default:* `nil`) - The document itself. If present, the docservers parse the contents to create a mustang repository.
  *   `extendedDocid` (*type:* `String.t`, *default:* `nil`) - The serialized ExtendedDocId, needed to construct a proper docinfo response if the docinfo request is missing it and it's present.
  *   `globalDocid` (*type:* `String.t`, *default:* `nil`) - the global docid, we need it in the docservers (Continuum mode) to construct proper docinfo response when the docinfo request does not contain a valid global docid
  *   `originalEncoding` (*type:* `integer()`, *default:* `nil`) - If the original encoding isn't UTF8
  *   `section` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.TeragoogleDocumentInfoSection.t)`, *default:* `nil`) - 
  *   `sectionType` (*type:* `String.t`, *default:* `nil`) - Indicates format of 'tokens' field in all Section entries.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :attachment =>
            list(GoogleApi.ContentWarehouse.V1.Model.TeragoogleDocumentInfoAttachment.t()) | nil,
          :averageTermWeight => integer() | nil,
          :doc => GoogleApi.ContentWarehouse.V1.Model.GDocumentBase.t() | nil,
          :extendedDocid => String.t() | nil,
          :globalDocid => String.t() | nil,
          :originalEncoding => integer() | nil,
          :section =>
            list(GoogleApi.ContentWarehouse.V1.Model.TeragoogleDocumentInfoSection.t()) | nil,
          :sectionType => String.t() | nil
        }

  field(:attachment,
    as: GoogleApi.ContentWarehouse.V1.Model.TeragoogleDocumentInfoAttachment,
    type: :list
  )

  field(:averageTermWeight)
  field(:doc, as: GoogleApi.ContentWarehouse.V1.Model.GDocumentBase)
  field(:extendedDocid)
  field(:globalDocid)
  field(:originalEncoding)

  field(:section,
    as: GoogleApi.ContentWarehouse.V1.Model.TeragoogleDocumentInfoSection,
    type: :list
  )

  field(:sectionType)
end

defimpl Poison.Decoder, for: GoogleApi.ContentWarehouse.V1.Model.TeragoogleDocumentInfo do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.TeragoogleDocumentInfo.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContentWarehouse.V1.Model.TeragoogleDocumentInfo do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
