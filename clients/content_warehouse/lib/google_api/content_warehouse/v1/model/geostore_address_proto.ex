# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.GeostoreAddressProto do
  @moduledoc """
  This class represents an address, partial address, or address range. It is intended to be attached to features to identify their address(es). Some important points about addresses: - The addresses in the Geo Schema do *not* include a component for the name of the feature, i.e. they are not self-referential. For example, the name of a feature might be "Zack's Pizza" and its address would be "123 Main Street". Similarly, streets, cities, and counties do not include themselves as part of their address. The address of "Seattle" is "King County, Washington, USA". If want to construct an address that *does* include the feature name, you can simply prepend it to the other address components. - Lakes, mountains, and other natural features do not normally have addresses. Countries also do not have addresses because they are at the top of the political hierarchy. - Address components in the Geo Schema are listed in a particular order, independent of the conventions used by the country in which they occur. The basic order is "smallest to largest" starting with street numbers and routes, then political features, and ending with postal features. The exact rules are defined by the implementation of the AddressComponentOrdering::IsLessThan() function. - Some types of address components may occur more than once in an address. For example, a UK address with a "dependent thoroughfare" would have two components of TYPE_ROUTE (i.e. street names). These are listed in the order they are normally written.

  ## Attributes

  *   `addressLines` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.GeostoreAddressLinesProto.t)`, *default:* `nil`) - The unparsed portion (lines) of the address. An address can have multiple unparsed portions. Multiple unparsed portions sharing the same language should be modeled as one address_lines instance having multiple lines. Historically, we also supported unparsed portions in different languages, but we no longer do. Consequently, only one value is allowed for this field despite the fact that it is repeated. See go/address-lines-multi-language for information about why we made this change. If any components are filled in, this is supplemental to (i.e. disjoint from) them. Furthermore, this must be the most specific portion of the address (except for the portion, if any, stored in the name field of feature.proto). Unparsed lines are always formatted together in a block. Other address components are never formatted between the address lines. This doesn't imply that the address lines are always either the first or the last part of the formatted output.
  *   `component` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.GeostoreAddressComponentProto.t)`, *default:* `nil`) - A list of parsed address components, e.g. the street, city, etc. An address range is one type of component.
  *   `crossStreet` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.GeostoreAddressComponentProto.t)`, *default:* `nil`) - ** DEPRECATED ** This field is now deprecated (see b/33268032). If you want to store cross street information as part of an address, use the address_lines field.
  *   `metadata` (*type:* `GoogleApi.ContentWarehouse.V1.Model.GeostoreFieldMetadataProto.t`, *default:* `nil`) - Field-level metadata for this address.
  *   `partialDenormalization` (*type:* `GoogleApi.ContentWarehouse.V1.Model.GeostoreAddressProto.t`, *default:* `nil`) - reserved
  *   `templateId` (*type:* `String.t`, *default:* `nil`) - The opaque ID of the address template that contains rules for structuring this address. The id of the address template can be retrieved using google3/geostore/address_templates/public/address_templates.h
  *   `temporaryData` (*type:* `GoogleApi.ContentWarehouse.V1.Model.Proto2BridgeMessageSet.t`, *default:* `nil`) - A place for clients to attach arbitrary data to an address. Never set in MapFacts.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :addressLines =>
            list(GoogleApi.ContentWarehouse.V1.Model.GeostoreAddressLinesProto.t()) | nil,
          :component =>
            list(GoogleApi.ContentWarehouse.V1.Model.GeostoreAddressComponentProto.t()) | nil,
          :crossStreet =>
            list(GoogleApi.ContentWarehouse.V1.Model.GeostoreAddressComponentProto.t()) | nil,
          :metadata => GoogleApi.ContentWarehouse.V1.Model.GeostoreFieldMetadataProto.t() | nil,
          :partialDenormalization =>
            GoogleApi.ContentWarehouse.V1.Model.GeostoreAddressProto.t() | nil,
          :templateId => String.t() | nil,
          :temporaryData => GoogleApi.ContentWarehouse.V1.Model.Proto2BridgeMessageSet.t() | nil
        }

  field(:addressLines,
    as: GoogleApi.ContentWarehouse.V1.Model.GeostoreAddressLinesProto,
    type: :list
  )

  field(:component,
    as: GoogleApi.ContentWarehouse.V1.Model.GeostoreAddressComponentProto,
    type: :list
  )

  field(:crossStreet,
    as: GoogleApi.ContentWarehouse.V1.Model.GeostoreAddressComponentProto,
    type: :list
  )

  field(:metadata, as: GoogleApi.ContentWarehouse.V1.Model.GeostoreFieldMetadataProto)
  field(:partialDenormalization, as: GoogleApi.ContentWarehouse.V1.Model.GeostoreAddressProto)
  field(:templateId)
  field(:temporaryData, as: GoogleApi.ContentWarehouse.V1.Model.Proto2BridgeMessageSet)
end

defimpl Poison.Decoder, for: GoogleApi.ContentWarehouse.V1.Model.GeostoreAddressProto do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.GeostoreAddressProto.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContentWarehouse.V1.Model.GeostoreAddressProto do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
