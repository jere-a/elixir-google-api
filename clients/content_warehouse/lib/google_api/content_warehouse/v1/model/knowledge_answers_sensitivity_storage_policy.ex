# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.KnowledgeAnswersSensitivityStoragePolicy do
  @moduledoc """
  Policies controlling the storage.

  ## Attributes

  *   `encryptArgumentValue` (*type:* `boolean()`, *default:* `nil`) - The contents of the argument value should be encrypted before being written to a persistent storage (even if the storage has short time-to-live). No-op when specified at intent level.
  *   `encryptFieldCandidateValueTerm` (*type:* `boolean()`, *default:* `nil`) - If true, triggers encryption of |value_term| [1] and move into |sensitive_value_term|. This is useful to support finer grain encryption controls for disambiguation, where the broader |encrypt_argument_value| is too restrictive. In particular, when we know that the values being disambiguated are non-sensitive (e.g. opaque event IDs), but the value_terms are sensitive (e.g. event titles), it can be helpful for debugging purposes to circulate the value unencrypted. This policy only has an effect when configured at argument-level. It has no effect in Intent or PreviousQuery stanzas. See go/delete-event-disambiguation-redaction-v2 for context and usage. [1]cs/s:quality.dialog_manager.IntentStateSignals.FieldCandidate.value_term
  *   `encryptQueryAnnotationData` (*type:* `boolean()`, *default:* `nil`) - If this is set true, we encrypt QueryAnnotationDataProto prior to writing it to Footprint ASSISTANT_EPHEMERAL corpus. This enables restricting ACL to the data.
  *   `scrubAuxiliaryFieldsInConversationSnapshot` (*type:* `boolean()`, *default:* `nil`) - If this is set to true, the following fields in ConversationSnapshot are scrubbed: * circulated_state.squery * spoken_query * All client_op arguments |from_assistant| interactions
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :encryptArgumentValue => boolean() | nil,
          :encryptFieldCandidateValueTerm => boolean() | nil,
          :encryptQueryAnnotationData => boolean() | nil,
          :scrubAuxiliaryFieldsInConversationSnapshot => boolean() | nil
        }

  field(:encryptArgumentValue)
  field(:encryptFieldCandidateValueTerm)
  field(:encryptQueryAnnotationData)
  field(:scrubAuxiliaryFieldsInConversationSnapshot)
end

defimpl Poison.Decoder,
  for: GoogleApi.ContentWarehouse.V1.Model.KnowledgeAnswersSensitivityStoragePolicy do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.KnowledgeAnswersSensitivityStoragePolicy.decode(
      value,
      options
    )
  end
end

defimpl Poison.Encoder,
  for: GoogleApi.ContentWarehouse.V1.Model.KnowledgeAnswersSensitivityStoragePolicy do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
