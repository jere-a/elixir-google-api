# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.QualityRichsnippetsAppsProtosLaunchableAppPerDocData do
  @moduledoc """
  A subset of LaunchableApplication, which is stored in the PerDocData proto (indexer/perdocdata/perdocdata.proto) and thus stored in the Search Mustang index. It is used to identify documents containing app links at serving time by SuperRoot. A subset of LaunchableApplication is used to save on storage requirements.

  ## Attributes

  *   `indexStatus` (*type:* `String.t`, *default:* `nil`) - 
  *   `packageIdFingerprint` (*type:* `String.t`, *default:* `nil`) - Android package id of the application associated with this document (example: 'com.imdb.mobile'), encoded with the Fingerprint2011() function.
  *   `perAppInfoEncoded` (*type:* `String.t`, *default:* `nil`) - A subset of the data in the PerAppInfo message, encoded to save on space. See quality/calypso/utils/app_info_utils.h for encoding/decoding.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :indexStatus => String.t() | nil,
          :packageIdFingerprint => String.t() | nil,
          :perAppInfoEncoded => String.t() | nil
        }

  field(:indexStatus)
  field(:packageIdFingerprint)
  field(:perAppInfoEncoded)
end

defimpl Poison.Decoder,
  for: GoogleApi.ContentWarehouse.V1.Model.QualityRichsnippetsAppsProtosLaunchableAppPerDocData do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.QualityRichsnippetsAppsProtosLaunchableAppPerDocData.decode(
      value,
      options
    )
  end
end

defimpl Poison.Encoder,
  for: GoogleApi.ContentWarehouse.V1.Model.QualityRichsnippetsAppsProtosLaunchableAppPerDocData do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
