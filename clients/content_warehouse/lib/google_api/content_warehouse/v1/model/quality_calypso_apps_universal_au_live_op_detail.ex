# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.QualityCalypsoAppsUniversalAuLiveOpDetail do
  @moduledoc """
  Contains the needed information for serving a single LiveOp/LiveEvent on AU. Next ID: 9

  ## Attributes

  *   `countryLevelScheduleInformation` (*type:* `%{optional(String.t) => GoogleApi.ContentWarehouse.V1.Model.QualityCalypsoAppsUniversalAuLiveOpEvent.t}`, *default:* `nil`) - Key is country, and value is the schedule information in that country.
  *   `defaultFormatInformation` (*type:* `GoogleApi.ContentWarehouse.V1.Model.QualityCalypsoAppsUniversalAuLiveOpFormat.t`, *default:* `nil`) - Fallback option for the LiveOp format. We will try en-US -> en -> any locale and get the first one that is available.
  *   `defaultScheduleInformation` (*type:* `GoogleApi.ContentWarehouse.V1.Model.QualityCalypsoAppsUniversalAuLiveOpEvent.t`, *default:* `nil`) - Fallback option for the LiveOp event scheduling information. Will use earliest start time and last end time from PDC LiveOps data dump.
  *   `eventId` (*type:* `String.t`, *default:* `nil`) - android
  *   `eventType` (*type:* `String.t`, *default:* `nil`) - [REQUIRED] type of live op event.
  *   `eventUrl` (*type:* `String.t`, *default:* `nil`) - ios
  *   `localeLevelFormatInformation` (*type:* `%{optional(String.t) => GoogleApi.ContentWarehouse.V1.Model.QualityCalypsoAppsUniversalAuLiveOpFormat.t}`, *default:* `nil`) - Key is locale, and value is the format information for that locale.
  *   `priority` (*type:* `String.t`, *default:* `nil`) - 
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :countryLevelScheduleInformation =>
            %{
              optional(String.t()) =>
                GoogleApi.ContentWarehouse.V1.Model.QualityCalypsoAppsUniversalAuLiveOpEvent.t()
            }
            | nil,
          :defaultFormatInformation =>
            GoogleApi.ContentWarehouse.V1.Model.QualityCalypsoAppsUniversalAuLiveOpFormat.t()
            | nil,
          :defaultScheduleInformation =>
            GoogleApi.ContentWarehouse.V1.Model.QualityCalypsoAppsUniversalAuLiveOpEvent.t() | nil,
          :eventId => String.t() | nil,
          :eventType => String.t() | nil,
          :eventUrl => String.t() | nil,
          :localeLevelFormatInformation =>
            %{
              optional(String.t()) =>
                GoogleApi.ContentWarehouse.V1.Model.QualityCalypsoAppsUniversalAuLiveOpFormat.t()
            }
            | nil,
          :priority => String.t() | nil
        }

  field(:countryLevelScheduleInformation,
    as: GoogleApi.ContentWarehouse.V1.Model.QualityCalypsoAppsUniversalAuLiveOpEvent,
    type: :map
  )

  field(:defaultFormatInformation,
    as: GoogleApi.ContentWarehouse.V1.Model.QualityCalypsoAppsUniversalAuLiveOpFormat
  )

  field(:defaultScheduleInformation,
    as: GoogleApi.ContentWarehouse.V1.Model.QualityCalypsoAppsUniversalAuLiveOpEvent
  )

  field(:eventId)
  field(:eventType)
  field(:eventUrl)

  field(:localeLevelFormatInformation,
    as: GoogleApi.ContentWarehouse.V1.Model.QualityCalypsoAppsUniversalAuLiveOpFormat,
    type: :map
  )

  field(:priority)
end

defimpl Poison.Decoder,
  for: GoogleApi.ContentWarehouse.V1.Model.QualityCalypsoAppsUniversalAuLiveOpDetail do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.QualityCalypsoAppsUniversalAuLiveOpDetail.decode(
      value,
      options
    )
  end
end

defimpl Poison.Encoder,
  for: GoogleApi.ContentWarehouse.V1.Model.QualityCalypsoAppsUniversalAuLiveOpDetail do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
