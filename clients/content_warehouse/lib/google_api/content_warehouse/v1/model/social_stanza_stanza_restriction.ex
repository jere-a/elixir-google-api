# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.SocialStanzaStanzaRestriction do
  @moduledoc """
  Contains various restriction information about a stanza, derived from properties of the stanza, the viewer and the creator. Restrictions stored in this message are not related to direct/indirect relationship between the viewer and the creator of stanza. Some examples are: - Abusive - Legal - Racy - Content not suitable for age - Porn - Blocked by country/geo of viewer. - Restricted by stanza creator (not the user specific block). - etc... Please see go/stanza-abuse-flow for more details.

  ## Attributes

  *   `abuseTypes` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.AbuseiamAbuseType.t)`, *default:* `nil`) - The abuses.
  *   `appealState` (*type:* `String.t`, *default:* `nil`) - The appeal state.
  *   `contentRestriction` (*type:* `GoogleApi.ContentWarehouse.V1.Model.AbuseiamContentRestriction.t`, *default:* `nil`) - Field to explain various restrictions of the Stanza. Some examples of restrictions are: - Not permitted because of legal restrictions of geography/country of viewer or creator. - Content not suitable for current viewer i.e. porn, abusive, racy. - Creator restricted the content to an age group. - etc...
  *   `deleteReason` (*type:* `list(String.t)`, *default:* `nil`) - Delete reasons. This is a repeated field because an stanza can be deleted multiple times due to different reasons such as user_delete, admin_delete.
  *   `deliveryRestriction` (*type:* `GoogleApi.ContentWarehouse.V1.Model.SocialStanzaDeliveryRestriction.t`, *default:* `nil`) - Delivery restrictions, if present.
  *   `destinationStream` (*type:* `GoogleApi.ContentWarehouse.V1.Model.AppsPeopleActivityBackendDestinationStream.t`, *default:* `nil`) - 
  *   `moderationInfo` (*type:* `GoogleApi.ContentWarehouse.V1.Model.SocialStanzaModerationInfo.t`, *default:* `nil`) - The moderation info. At write time, this field is only allowed to be set when moderator_type is AUTO_MODERATOR. For other moderator types, moderation_reason is the only field that can be set by clients.
  *   `moderationState` (*type:* `String.t`, *default:* `nil`) - The moderation state.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :abuseTypes => list(GoogleApi.ContentWarehouse.V1.Model.AbuseiamAbuseType.t()) | nil,
          :appealState => String.t() | nil,
          :contentRestriction =>
            GoogleApi.ContentWarehouse.V1.Model.AbuseiamContentRestriction.t() | nil,
          :deleteReason => list(String.t()) | nil,
          :deliveryRestriction =>
            GoogleApi.ContentWarehouse.V1.Model.SocialStanzaDeliveryRestriction.t() | nil,
          :destinationStream =>
            GoogleApi.ContentWarehouse.V1.Model.AppsPeopleActivityBackendDestinationStream.t()
            | nil,
          :moderationInfo =>
            GoogleApi.ContentWarehouse.V1.Model.SocialStanzaModerationInfo.t() | nil,
          :moderationState => String.t() | nil
        }

  field(:abuseTypes, as: GoogleApi.ContentWarehouse.V1.Model.AbuseiamAbuseType, type: :list)
  field(:appealState)
  field(:contentRestriction, as: GoogleApi.ContentWarehouse.V1.Model.AbuseiamContentRestriction)
  field(:deleteReason, type: :list)

  field(:deliveryRestriction,
    as: GoogleApi.ContentWarehouse.V1.Model.SocialStanzaDeliveryRestriction
  )

  field(:destinationStream,
    as: GoogleApi.ContentWarehouse.V1.Model.AppsPeopleActivityBackendDestinationStream
  )

  field(:moderationInfo, as: GoogleApi.ContentWarehouse.V1.Model.SocialStanzaModerationInfo)
  field(:moderationState)
end

defimpl Poison.Decoder, for: GoogleApi.ContentWarehouse.V1.Model.SocialStanzaStanzaRestriction do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.SocialStanzaStanzaRestriction.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContentWarehouse.V1.Model.SocialStanzaStanzaRestriction do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
