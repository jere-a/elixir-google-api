# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.OceanDocTagPatentSpecific do
  @moduledoc """
  Patent specific fields. Currently empty, but need to move the fields below into here at a later date

  ## Attributes

  *   `applicationDate` (*type:* `String.t`, *default:* `nil`) - this is in ONIX format.
  *   `contentLanguage` (*type:* `String.t`, *default:* `nil`) - 2-letter language of the document such as "en" or "fr" This field was created for plumbing in the OFE API intl patent flow, and is probably not otherwise filled in.
  *   `docType` (*type:* `integer()`, *default:* `nil`) - 
  *   `documentNumber` (*type:* `String.t`, *default:* `nil`) - Just the number, no bibkey prefix. Called 'doc number' b/c it could be patent number for patents, application number for applications.
  *   `domesticClassification` (*type:* `list(String.t)`, *default:* `nil`) - US and Int'l patent classification codes for "related patents".
  *   `internationalClassification` (*type:* `list(String.t)`, *default:* `nil`) - 
  *   `issueDate` (*type:* `String.t`, *default:* `nil`) - this is in ONIX format.
  *   `patentAssignee` (*type:* `String.t`, *default:* `nil`) - 
  *   `publicationNumber` (*type:* `String.t`, *default:* `nil`) - For applications, the 'publication number' Something like US20071234567A1: 'US' prefix, 4 digit year, 7 digit serial number, 2 character code, all stuck together.
  *   `relativeThumbnailPath` (*type:* `String.t`, *default:* `nil`) - Path identifying the image used for the thumbnail of this patent. e.g. "EP1234567B1/imgf0001.png" The client is expected to fill in the rest of the url such as: https://patentimages.storage.googleapis.com/thumbnails/EP1234567B1/imgf0001.png
  *   `tenCharUsClassification` (*type:* `list(String.t)`, *default:* `nil`) - 
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :applicationDate => String.t() | nil,
          :contentLanguage => String.t() | nil,
          :docType => integer() | nil,
          :documentNumber => String.t() | nil,
          :domesticClassification => list(String.t()) | nil,
          :internationalClassification => list(String.t()) | nil,
          :issueDate => String.t() | nil,
          :patentAssignee => String.t() | nil,
          :publicationNumber => String.t() | nil,
          :relativeThumbnailPath => String.t() | nil,
          :tenCharUsClassification => list(String.t()) | nil
        }

  field(:applicationDate)
  field(:contentLanguage)
  field(:docType)
  field(:documentNumber)
  field(:domesticClassification, type: :list)
  field(:internationalClassification, type: :list)
  field(:issueDate)
  field(:patentAssignee)
  field(:publicationNumber)
  field(:relativeThumbnailPath)
  field(:tenCharUsClassification, type: :list)
end

defimpl Poison.Decoder, for: GoogleApi.ContentWarehouse.V1.Model.OceanDocTagPatentSpecific do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.OceanDocTagPatentSpecific.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContentWarehouse.V1.Model.OceanDocTagPatentSpecific do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
