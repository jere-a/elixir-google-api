# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.KnowledgeAnswersIntentQueryArgumentProvenancePreviousQuery do
  @moduledoc """
  The value is carried over from either the previous winning IntentQuery or an entity annotated by QRef in a previous query. For example: U: How old is Obama. [Age(person=/m/obama)] G: Barack Obama is 56 years old. U: Who is his wife. [Spouse(person=/m/obama)] The "person" argument would have a provenance of PREVIOUS_QUERY. However, if a dialog publishes an attentional entity for "Obama", the "person" argument can have a provenance of ATTENTIONAL_ENTITY instead. This includes arguments with provenance that spans both the current and previous query.

  ## Attributes

  *   `currentQueryEvalData` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingAnnotationEvalData.t)`, *default:* `nil`) - The span(s) in the current query where the value comes from. This is used when the argument spans both the current and previous query. Eg jfk death -> [death, when] spans both queries.
  *   `evalData` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingAnnotationEvalData.t)`, *default:* `nil`) - The span(s) in the query where the value comes from.
  *   `eventId` (*type:* `GoogleApi.ContentWarehouse.V1.Model.EventIdMessage.t`, *default:* `nil`) - The event ID of the query where this value was pulled from.
  *   `neuralLocationAnnotator` (*type:* `GoogleApi.ContentWarehouse.V1.Model.KnowledgeAnswersIntentQueryArgumentProvenanceNeuralLocationAnnotator.t`, *default:* `nil`) - 
  *   `role` (*type:* `GoogleApi.ContentWarehouse.V1.Model.KnowledgeAnswersIntentQueryArgumentProvenancePreviousQueryRole.t`, *default:* `nil`) - 
  *   `source` (*type:* `String.t`, *default:* `nil`) - 
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :currentQueryEvalData =>
            list(GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingAnnotationEvalData.t())
            | nil,
          :evalData =>
            list(GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingAnnotationEvalData.t())
            | nil,
          :eventId => GoogleApi.ContentWarehouse.V1.Model.EventIdMessage.t() | nil,
          :neuralLocationAnnotator =>
            GoogleApi.ContentWarehouse.V1.Model.KnowledgeAnswersIntentQueryArgumentProvenanceNeuralLocationAnnotator.t()
            | nil,
          :role =>
            GoogleApi.ContentWarehouse.V1.Model.KnowledgeAnswersIntentQueryArgumentProvenancePreviousQueryRole.t()
            | nil,
          :source => String.t() | nil
        }

  field(:currentQueryEvalData,
    as: GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingAnnotationEvalData,
    type: :list
  )

  field(:evalData,
    as: GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingAnnotationEvalData,
    type: :list
  )

  field(:eventId, as: GoogleApi.ContentWarehouse.V1.Model.EventIdMessage)

  field(:neuralLocationAnnotator,
    as:
      GoogleApi.ContentWarehouse.V1.Model.KnowledgeAnswersIntentQueryArgumentProvenanceNeuralLocationAnnotator
  )

  field(:role,
    as:
      GoogleApi.ContentWarehouse.V1.Model.KnowledgeAnswersIntentQueryArgumentProvenancePreviousQueryRole
  )

  field(:source)
end

defimpl Poison.Decoder,
  for:
    GoogleApi.ContentWarehouse.V1.Model.KnowledgeAnswersIntentQueryArgumentProvenancePreviousQuery do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.KnowledgeAnswersIntentQueryArgumentProvenancePreviousQuery.decode(
      value,
      options
    )
  end
end

defimpl Poison.Encoder,
  for:
    GoogleApi.ContentWarehouse.V1.Model.KnowledgeAnswersIntentQueryArgumentProvenancePreviousQuery do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
