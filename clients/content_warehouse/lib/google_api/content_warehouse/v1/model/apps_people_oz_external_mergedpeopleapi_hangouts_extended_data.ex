# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.AppsPeopleOzExternalMergedpeopleapiHangoutsExtendedData do
  @moduledoc """
  Extension data for use in Hangouts.

  ## Attributes

  *   `hadPastHangoutState` (*type:* `String.t`, *default:* `nil`) - 
  *   `invitationStatus` (*type:* `String.t`, *default:* `nil`) - Populated for all contacts. Only set if had_past_hangout_state == HAD_PAST_HANGOUT. INVITATION_NEEDED is not a valid value because there already is a past hangout, which means either the invitation is still pending or itâ€™s been accepted.
  *   `isBot` (*type:* `boolean()`, *default:* `nil`) - True if this is a Hangouts bot.
  *   `isDismissed` (*type:* `boolean()`, *default:* `nil`) - 
  *   `isFavorite` (*type:* `boolean()`, *default:* `nil`) - 
  *   `isPinned` (*type:* `boolean()`, *default:* `nil`) - 
  *   `userType` (*type:* `String.t`, *default:* `nil`) - 
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :hadPastHangoutState => String.t() | nil,
          :invitationStatus => String.t() | nil,
          :isBot => boolean() | nil,
          :isDismissed => boolean() | nil,
          :isFavorite => boolean() | nil,
          :isPinned => boolean() | nil,
          :userType => String.t() | nil
        }

  field(:hadPastHangoutState)
  field(:invitationStatus)
  field(:isBot)
  field(:isDismissed)
  field(:isFavorite)
  field(:isPinned)
  field(:userType)
end

defimpl Poison.Decoder,
  for: GoogleApi.ContentWarehouse.V1.Model.AppsPeopleOzExternalMergedpeopleapiHangoutsExtendedData do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.AppsPeopleOzExternalMergedpeopleapiHangoutsExtendedData.decode(
      value,
      options
    )
  end
end

defimpl Poison.Encoder,
  for: GoogleApi.ContentWarehouse.V1.Model.AppsPeopleOzExternalMergedpeopleapiHangoutsExtendedData do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
