# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.KnowledgeAnswersSensitivityIntentEvalPolicy do
  @moduledoc """
  Policy controlling intent level eval.

  ## Attributes

  *   `allArguments` (*type:* `GoogleApi.ContentWarehouse.V1.Model.KnowledgeAnswersSensitivityArgumentEvalPolicy.t`, *default:* `nil`) - Policy for all arguments, so no need to repeat on every argument.
  *   `enabled` (*type:* `boolean()`, *default:* `nil`) - Controls whether to enabled limited logging (rpc whitelisting + GWS log query redaction) if the intent wins post-fulfillment ranking.
  *   `nestedIntentOnly` (*type:* `boolean()`, *default:* `nil`) - The eval policy won't apply if the annotated intent is a root. This check is majorly to prevent calling IntentScrubber halfway from InterpretationScrubber via nested intents.
  *   `scrubEntireIntent` (*type:* `boolean()`, *default:* `nil`) - Scrub entire intent before saving to eval storage, leaving only intent name and sensitivity info.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :allArguments =>
            GoogleApi.ContentWarehouse.V1.Model.KnowledgeAnswersSensitivityArgumentEvalPolicy.t()
            | nil,
          :enabled => boolean() | nil,
          :nestedIntentOnly => boolean() | nil,
          :scrubEntireIntent => boolean() | nil
        }

  field(:allArguments,
    as: GoogleApi.ContentWarehouse.V1.Model.KnowledgeAnswersSensitivityArgumentEvalPolicy
  )

  field(:enabled)
  field(:nestedIntentOnly)
  field(:scrubEntireIntent)
end

defimpl Poison.Decoder,
  for: GoogleApi.ContentWarehouse.V1.Model.KnowledgeAnswersSensitivityIntentEvalPolicy do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.KnowledgeAnswersSensitivityIntentEvalPolicy.decode(
      value,
      options
    )
  end
end

defimpl Poison.Encoder,
  for: GoogleApi.ContentWarehouse.V1.Model.KnowledgeAnswersSensitivityIntentEvalPolicy do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
