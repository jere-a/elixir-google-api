# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.SocialCommonUserMentionData do
  @moduledoc """
  Person metadata, for USER_MENTION segments. Should always contain at least one of user_gaia_id, user_id, email or user. The exact set of populated fields may differ depending on the context and the level in the serving stack; for example, emails will be elided on the viewing path. But as a general rule, a proto having any one of the four is valid, subject to the standard constraints of the applied annotations -- that is, communication between servers and clients will ignore jspb.ignore fields, and communication between servers and other servers (or between servers and storage) will ignore client_only fields. For more on the annotations, see the comments in social/common/segment_annotations.proto

  ## Attributes

  *   `email` (*type:* `String.t`, *default:* `nil`) - 
  *   `user` (*type:* `GoogleApi.ContentWarehouse.V1.Model.SecurityCredentialsPrincipalProto.t`, *default:* `nil`) - If the principal is backed by a gaia id, DO NOT use this field. Use user_gaia_id/user_id fields instead.
  *   `userGaiaId` (*type:* `String.t`, *default:* `nil`) - An unobfuscated gaia ID:
  *   `userId` (*type:* `String.t`, *default:* `nil`) - An obfuscated gaia ID:
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :email => String.t() | nil,
          :user =>
            GoogleApi.ContentWarehouse.V1.Model.SecurityCredentialsPrincipalProto.t() | nil,
          :userGaiaId => String.t() | nil,
          :userId => String.t() | nil
        }

  field(:email)
  field(:user, as: GoogleApi.ContentWarehouse.V1.Model.SecurityCredentialsPrincipalProto)
  field(:userGaiaId)
  field(:userId)
end

defimpl Poison.Decoder, for: GoogleApi.ContentWarehouse.V1.Model.SocialCommonUserMentionData do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.SocialCommonUserMentionData.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContentWarehouse.V1.Model.SocialCommonUserMentionData do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
