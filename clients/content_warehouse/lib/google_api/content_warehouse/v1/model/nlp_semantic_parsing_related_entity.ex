# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingRelatedEntity do
  @moduledoc """
  A message that stores relations between this annotation and another entity. Stores the mid and the kind of relationship. These links may be consumed downstream for various purposes, including support transfer and other business logic. An example is for the Honda Civic entity. It may have an mdvc_relation that is a generalization_of the 2015 Honda Civic entity. So the Honda Civic would have the following: RelatedEntity { mid = 2015 Honda Civic Mid mdvc_relation = GENERALIZATION_OF } It has no equivalent_relation because it is by default NO_EQUIVALENT. The Honda Civic entity might then have a separate relation to the Old Honda Civic entity, as they are considered the same entity, or the following relation: RelatedEntity { mid = Old Honda Civic Mid equivalent_relation = EQUIVALENT }

  ## Attributes

  *   `clusterSupportTransferRelation` (*type:* `String.t`, *default:* `nil`) - Denotes whether or not the related entity is derived from cluster support transfer.
  *   `composedFromRelation` (*type:* `String.t`, *default:* `nil`) - Denotes whether or not the related entity composes a compound entity together with other related entities.
  *   `equivalentRelation` (*type:* `String.t`, *default:* `nil`) - Whether or not the given mid is related to the other mid. Equivalent mids are usually mutually exclusive with other kinds of relations.
  *   `mdvcRelation` (*type:* `String.t`, *default:* `nil`) - The mdvc relation with the related mid.
  *   `mid` (*type:* `String.t`, *default:* `nil`) - Mid that is related.
  *   `supportTransferRelation` (*type:* `String.t`, *default:* `nil`) - Denotes whether or not there was support transfer between the two entities.
  *   `targetIsStbrSource` (*type:* `boolean()`, *default:* `nil`) - Set if the related entity is the source of an STBR rule and the target is not this one.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :clusterSupportTransferRelation => String.t() | nil,
          :composedFromRelation => String.t() | nil,
          :equivalentRelation => String.t() | nil,
          :mdvcRelation => String.t() | nil,
          :mid => String.t() | nil,
          :supportTransferRelation => String.t() | nil,
          :targetIsStbrSource => boolean() | nil
        }

  field(:clusterSupportTransferRelation)
  field(:composedFromRelation)
  field(:equivalentRelation)
  field(:mdvcRelation)
  field(:mid)
  field(:supportTransferRelation)
  field(:targetIsStbrSource)
end

defimpl Poison.Decoder, for: GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingRelatedEntity do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingRelatedEntity.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingRelatedEntity do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
