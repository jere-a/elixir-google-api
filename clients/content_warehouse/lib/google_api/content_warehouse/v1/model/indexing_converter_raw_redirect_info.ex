# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.IndexingConverterRawRedirectInfo do
  @moduledoc """
  The proto to be stored in raw_redirect_info column of document table.

  ## Attributes

  *   `rawFinalTargetFromRendering` (*type:* `String.t`, *default:* `nil`) - Final redirect target found from rendering. It is the same as the last element of raw_redirect_chain_from_rendering. It is used as an input source for the indexable fragment detection pipeline and also downstream phases.
  *   `rawFinalTargetFromTrawler` (*type:* `String.t`, *default:* `nil`) - This is with-fragment version of redirect_with_contents. This field is populated only if there was a fragment. This field is used by indexing::mobile::GetRedirectTarget() defined in indexing/mobile/internal/smartphone-util.cc, which extracts the redirect target for smartphone optimized pages. The extracted target in turn is served in search results for smartphone users. We need with-fragment version because with-fragment url can return different content than fragment-stripped url. For example, http://www.example.com/m#article=11 and http://www.example.com/m can return different content. These cases are most typical for Ajaxy sites. This fragment does not have to be indexable.
  *   `rawRedirectChainFromRendering` (*type:* `GoogleApi.ContentWarehouse.V1.Model.IndexingConverterRedirectChain.t`, *default:* `nil`) - Redirect chain generated from redirect events in rendering. At the beginning of it, there could be some redirects from trawler (i.e. could be partial or entire trawler redirect chain), other redirects have their RedirectParams::is_redirect_from_rendering fields set to true. Redirects here have no RedirectChain::Hop::raw_target fields populated, and targets stored in RedirectChain::Hop::target fields are likely cleaned while keeping fragments (also sometimes they could be uncleaned ones because of cleaning failures), fragments could be indexable or non-indexable.
  *   `renderingRedirectLimit` (*type:* `integer()`, *default:* `nil`) - This is used to describe how many redirect hops from Webkit were kept in the raw_redirect_chain_from_rendering. If it is -1, it means it kept all the hops from Webkit in redirect chain.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :rawFinalTargetFromRendering => String.t() | nil,
          :rawFinalTargetFromTrawler => String.t() | nil,
          :rawRedirectChainFromRendering =>
            GoogleApi.ContentWarehouse.V1.Model.IndexingConverterRedirectChain.t() | nil,
          :renderingRedirectLimit => integer() | nil
        }

  field(:rawFinalTargetFromRendering)
  field(:rawFinalTargetFromTrawler)

  field(:rawRedirectChainFromRendering,
    as: GoogleApi.ContentWarehouse.V1.Model.IndexingConverterRedirectChain
  )

  field(:renderingRedirectLimit)
end

defimpl Poison.Decoder, for: GoogleApi.ContentWarehouse.V1.Model.IndexingConverterRawRedirectInfo do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.IndexingConverterRawRedirectInfo.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContentWarehouse.V1.Model.IndexingConverterRawRedirectInfo do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
