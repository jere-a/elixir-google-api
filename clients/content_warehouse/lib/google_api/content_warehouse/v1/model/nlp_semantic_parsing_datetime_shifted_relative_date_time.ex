# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingDatetimeShiftedRelativeDateTime do
  @moduledoc """


  ## Attributes

  *   `base` (*type:* `GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingDatetimeAbsoluteDateTime.t`, *default:* `nil`) - The base could be an absolute datetime point for example: "March 1", a relative datetime point, for example: "2 days before March 1" or a symbolic base type, for example: CURRENT_DATETIME. This could also be used to combine EXPLICIT_PRONOUN with the actual value of that reference being setup as a datetime point in base or relative_base
  *   `baseType` (*type:* `String.t`, *default:* `nil`) - 
  *   `metadata` (*type:* `String.t`, *default:* `nil`) - Can be used to tag relative datetime expressions with metadata information in the grammar.
  *   `relativeBase` (*type:* `GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingDatetimeResolutionProperties.t`, *default:* `nil`) - 
  *   `shiftAmount` (*type:* `GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingDatetimeQuantity.t`, *default:* `nil`) - 
  *   `shiftPast` (*type:* `boolean()`, *default:* `nil`) - If true, shifting to the past; if false, shifting to the future.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :base =>
            GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingDatetimeAbsoluteDateTime.t()
            | nil,
          :baseType => String.t() | nil,
          :metadata => String.t() | nil,
          :relativeBase =>
            GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingDatetimeResolutionProperties.t()
            | nil,
          :shiftAmount =>
            GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingDatetimeQuantity.t() | nil,
          :shiftPast => boolean() | nil
        }

  field(:base, as: GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingDatetimeAbsoluteDateTime)
  field(:baseType)
  field(:metadata)

  field(:relativeBase,
    as: GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingDatetimeResolutionProperties
  )

  field(:shiftAmount, as: GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingDatetimeQuantity)
  field(:shiftPast)
end

defimpl Poison.Decoder,
  for: GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingDatetimeShiftedRelativeDateTime do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingDatetimeShiftedRelativeDateTime.decode(
      value,
      options
    )
  end
end

defimpl Poison.Encoder,
  for: GoogleApi.ContentWarehouse.V1.Model.NlpSemanticParsingDatetimeShiftedRelativeDateTime do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
