# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.QualityNavboostCrapsFeatureCrapsData do
  @moduledoc """


  ## Attributes

  *   `country` (*type:* `String.t`, *default:* `nil`) - Country, like "us". If not present, it's an aggregation for all countries. This is the same format as one used in Glue.
  *   `device` (*type:* `String.t`, *default:* `nil`) - Device, like "m". If not present, it's an aggregation for all devices. "m" - mobile devices. "d" - destop devices.
  *   `language` (*type:* `String.t`, *default:* `nil`) - Language, like "en". If not present, it's an aggregation for all languages. This is the same format as one used in Glue.
  *   `locationId` (*type:* `integer()`, *default:* `nil`) - Location id for metro and city. If not present, it's an aggregation for all locations within current country.
  *   `signals` (*type:* `GoogleApi.ContentWarehouse.V1.Model.QualityNavboostCrapsCrapsClickSignals.t`, *default:* `nil`) - CRAPS Signals for the locale.
  *   `voterTokenBitmap` (*type:* `GoogleApi.ContentWarehouse.V1.Model.QualityNavboostGlueVoterTokenBitmapMessage.t`, *default:* `nil`) - The set of voter tokens of the sessions that contributed to this feature's stats. Voter tokens are not unique per user, so it is a lower bound on the number of distinct users. Used for privacy-related filtering.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :country => String.t() | nil,
          :device => String.t() | nil,
          :language => String.t() | nil,
          :locationId => integer() | nil,
          :signals =>
            GoogleApi.ContentWarehouse.V1.Model.QualityNavboostCrapsCrapsClickSignals.t() | nil,
          :voterTokenBitmap =>
            GoogleApi.ContentWarehouse.V1.Model.QualityNavboostGlueVoterTokenBitmapMessage.t()
            | nil
        }

  field(:country)
  field(:device)
  field(:language)
  field(:locationId)
  field(:signals, as: GoogleApi.ContentWarehouse.V1.Model.QualityNavboostCrapsCrapsClickSignals)

  field(:voterTokenBitmap,
    as: GoogleApi.ContentWarehouse.V1.Model.QualityNavboostGlueVoterTokenBitmapMessage
  )
end

defimpl Poison.Decoder,
  for: GoogleApi.ContentWarehouse.V1.Model.QualityNavboostCrapsFeatureCrapsData do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.QualityNavboostCrapsFeatureCrapsData.decode(
      value,
      options
    )
  end
end

defimpl Poison.Encoder,
  for: GoogleApi.ContentWarehouse.V1.Model.QualityNavboostCrapsFeatureCrapsData do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
