# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.ImageExifIPTCMetadata do
  @moduledoc """
  This proto holds IPTC metadata. http://www.iptc.org/cms/site/index.html?channel=CH0099 Proto field name is same with IPTC property name except which is clearly stated. Next Id: 64

  ## Attributes

  *   `acquireLicensePage` (*type:* `String.t`, *default:* `nil`) - Page URL about how to acquire this licensable image.
  *   `artwork` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.ImageExifIPTCMetadataArtwork.t)`, *default:* `nil`) - 
  *   `contactinfo` (*type:* `GoogleApi.ContentWarehouse.V1.Model.ImageExifIPTCMetadataContactInfo.t`, *default:* `nil`) - 
  *   `copyrightNotice` (*type:* `String.t`, *default:* `nil`) - 
  *   `creator` (*type:* `list(String.t)`, *default:* `nil`) - IPTC authorship & copyright related fields.
  *   `creditLine` (*type:* `String.t`, *default:* `nil`) - 
  *   `dateCreated` (*type:* `String.t`, *default:* `nil`) - Time (in seconds)
  *   `dateExpired` (*type:* `String.t`, *default:* `nil`) - 
  *   `dateReleased` (*type:* `String.t`, *default:* `nil`) - 
  *   `description` (*type:* `String.t`, *default:* `nil`) - 
  *   `digitalSourceType` (*type:* `String.t`, *default:* `nil`) - See go/gi-annotations-indexing for more information.
  *   `event` (*type:* `String.t`, *default:* `nil`) - 
  *   `headline` (*type:* `String.t`, *default:* `nil`) - 
  *   `imageSupplier` (*type:* `String.t`, *default:* `nil`) - PLUS field, not used.
  *   `instructions` (*type:* `String.t`, *default:* `nil`) - 
  *   `keywords` (*type:* `list(String.t)`, *default:* `nil`) - 
  *   `licenseUrl` (*type:* `String.t`, *default:* `nil`) - License URL about how to distribute the image.
  *   `location` (*type:* `GoogleApi.ContentWarehouse.V1.Model.ImageExifIPTCMetadataLocation.t`, *default:* `nil`) - 
  *   `locationCreated` (*type:* `GoogleApi.ContentWarehouse.V1.Model.ImageExifIPTCMetadataLocationInfo.t`, *default:* `nil`) - Location of the camera
  *   `locationShown` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.ImageExifIPTCMetadataLocationInfo.t)`, *default:* `nil`) - Location shown on the image
  *   `modelReleaseStatus` (*type:* `String.t`, *default:* `nil`) - 
  *   `propertyReleaseStatus` (*type:* `String.t`, *default:* `nil`) - 
  *   `rightsUsageTerms` (*type:* `String.t`, *default:* `nil`) - 
  *   `source` (*type:* `String.t`, *default:* `nil`) - 
  *   `supplementalCategories` (*type:* `list(String.t)`, *default:* `nil`) - 
  *   `title` (*type:* `String.t`, *default:* `nil`) - IPTC description related fields.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :acquireLicensePage => String.t() | nil,
          :artwork =>
            list(GoogleApi.ContentWarehouse.V1.Model.ImageExifIPTCMetadataArtwork.t()) | nil,
          :contactinfo =>
            GoogleApi.ContentWarehouse.V1.Model.ImageExifIPTCMetadataContactInfo.t() | nil,
          :copyrightNotice => String.t() | nil,
          :creator => list(String.t()) | nil,
          :creditLine => String.t() | nil,
          :dateCreated => String.t() | nil,
          :dateExpired => String.t() | nil,
          :dateReleased => String.t() | nil,
          :description => String.t() | nil,
          :digitalSourceType => String.t() | nil,
          :event => String.t() | nil,
          :headline => String.t() | nil,
          :imageSupplier => String.t() | nil,
          :instructions => String.t() | nil,
          :keywords => list(String.t()) | nil,
          :licenseUrl => String.t() | nil,
          :location =>
            GoogleApi.ContentWarehouse.V1.Model.ImageExifIPTCMetadataLocation.t() | nil,
          :locationCreated =>
            GoogleApi.ContentWarehouse.V1.Model.ImageExifIPTCMetadataLocationInfo.t() | nil,
          :locationShown =>
            list(GoogleApi.ContentWarehouse.V1.Model.ImageExifIPTCMetadataLocationInfo.t()) | nil,
          :modelReleaseStatus => String.t() | nil,
          :propertyReleaseStatus => String.t() | nil,
          :rightsUsageTerms => String.t() | nil,
          :source => String.t() | nil,
          :supplementalCategories => list(String.t()) | nil,
          :title => String.t() | nil
        }

  field(:acquireLicensePage)

  field(:artwork,
    as: GoogleApi.ContentWarehouse.V1.Model.ImageExifIPTCMetadataArtwork,
    type: :list
  )

  field(:contactinfo, as: GoogleApi.ContentWarehouse.V1.Model.ImageExifIPTCMetadataContactInfo)
  field(:copyrightNotice)
  field(:creator, type: :list)
  field(:creditLine)
  field(:dateCreated)
  field(:dateExpired)
  field(:dateReleased)
  field(:description)
  field(:digitalSourceType)
  field(:event)
  field(:headline)
  field(:imageSupplier)
  field(:instructions)
  field(:keywords, type: :list)
  field(:licenseUrl)
  field(:location, as: GoogleApi.ContentWarehouse.V1.Model.ImageExifIPTCMetadataLocation)

  field(:locationCreated,
    as: GoogleApi.ContentWarehouse.V1.Model.ImageExifIPTCMetadataLocationInfo
  )

  field(:locationShown,
    as: GoogleApi.ContentWarehouse.V1.Model.ImageExifIPTCMetadataLocationInfo,
    type: :list
  )

  field(:modelReleaseStatus)
  field(:propertyReleaseStatus)
  field(:rightsUsageTerms)
  field(:source)
  field(:supplementalCategories, type: :list)
  field(:title)
end

defimpl Poison.Decoder, for: GoogleApi.ContentWarehouse.V1.Model.ImageExifIPTCMetadata do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.ImageExifIPTCMetadata.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContentWarehouse.V1.Model.ImageExifIPTCMetadata do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
